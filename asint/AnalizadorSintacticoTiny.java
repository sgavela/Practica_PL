
//----------------------------------------------------
// The following code was generated by CUP v0.11b beta 20140220
// Thu Apr 22 20:20:42 CEST 2021
//----------------------------------------------------

package asint;

import java_cup.runtime.*;
import alex.AnalizadorLexicoTiny;
import alex.UnidadLexica;
import errors.GestionErrores;
import ast.*;
import ast.e.*;
import ast.i.*;
import ast.t.*;
import java.util.ArrayDeque;
import java_cup.runtime.ComplexSymbolFactory.Location;

/** CUP v0.11b beta 20140220 generated parser.
  * @version Thu Apr 22 20:20:42 CEST 2021
  */
public class AnalizadorSintacticoTiny extends java_cup.runtime.lr_parser {

  /** Default constructor. */
  public AnalizadorSintacticoTiny() {super();}

  /** Constructor which sets the default scanner. */
  public AnalizadorSintacticoTiny(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public AnalizadorSintacticoTiny(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\140\000\002\002\007\000\002\002\004\000\002\003" +
    "\005\000\002\003\005\000\002\003\005\000\002\003\005" +
    "\000\002\003\005\000\002\003\005\000\002\003\005\000" +
    "\002\003\002\000\002\004\005\000\002\004\005\000\002" +
    "\004\005\000\002\004\005\000\002\004\005\000\002\004" +
    "\004\000\002\004\004\000\002\004\004\000\002\004\004" +
    "\000\002\004\002\000\002\006\005\000\002\006\003\000" +
    "\002\007\005\000\002\007\003\000\002\010\004\000\002" +
    "\010\003\000\002\011\005\000\002\011\005\000\002\011" +
    "\003\000\002\012\005\000\002\012\005\000\002\012\005" +
    "\000\002\012\005\000\002\012\003\000\002\013\005\000" +
    "\002\013\005\000\002\013\003\000\002\014\005\000\002" +
    "\014\005\000\002\014\005\000\002\014\003\000\002\015" +
    "\003\000\002\015\003\000\002\015\003\000\002\015\003" +
    "\000\002\015\003\000\002\015\003\000\002\005\005\000" +
    "\002\005\005\000\002\005\005\000\002\005\005\000\002" +
    "\005\005\000\002\005\004\000\002\005\004\000\002\005" +
    "\004\000\002\005\004\000\002\005\002\000\002\021\011" +
    "\000\002\022\015\000\002\023\011\000\002\025\015\000" +
    "\002\025\015\000\002\026\005\000\002\027\004\000\002" +
    "\030\006\000\002\031\010\000\002\047\003\000\002\047" +
    "\005\000\002\043\005\000\002\043\006\000\002\043\002" +
    "\000\002\044\006\000\002\044\007\000\002\044\002\000" +
    "\002\033\015\000\002\033\013\000\002\045\004\000\002" +
    "\045\002\000\002\046\005\000\002\046\002\000\002\035" +
    "\004\000\002\034\006\000\002\036\005\000\002\032\007" +
    "\000\002\050\005\000\002\050\005\000\002\050\002\000" +
    "\002\017\003\000\002\037\006\000\002\040\006\000\002" +
    "\041\003\000\002\041\003\000\002\042\010\000\002\042" +
    "\010\000\002\041\003\000\002\041\004" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\375\000\022\005\012\006\021\007\005\010\013\014" +
    "\ufff8\026\017\027\024\030\006\001\002\000\004\063\376" +
    "\001\002\000\004\005\012\001\002\000\004\043\351\001" +
    "\002\000\004\005\012\001\002\000\004\002\340\001\002" +
    "\000\004\063\336\001\002\000\064\005\uffaa\035\uffaa\036" +
    "\uffaa\037\uffaa\040\uffaa\041\uffaa\042\uffaa\043\uffaa\044\uffaa" +
    "\045\uffaa\046\uffaa\047\uffaa\050\uffaa\051\uffaa\052\uffaa\054" +
    "\uffaa\055\uffaa\056\uffaa\057\uffaa\060\uffaa\061\uffaa\062\uffaa" +
    "\063\uffaa\066\uffaa\067\uffaa\001\002\000\012\005\012\012" +
    "\276\026\017\027\024\001\002\000\004\014\136\001\002" +
    "\000\004\063\134\001\002\000\004\063\132\001\002\000" +
    "\012\005\uffa6\062\uffa6\066\uffa6\067\uffa6\001\002\000\004" +
    "\063\130\001\002\000\010\005\012\026\017\027\024\001" +
    "\002\000\010\005\uffa3\046\123\066\uffa3\001\002\000\006" +
    "\005\012\066\033\001\002\000\012\005\uffa7\062\uffa7\066" +
    "\uffa7\067\uffa7\001\002\000\004\063\031\001\002\000\004" +
    "\063\027\001\002\000\022\005\012\006\021\007\005\010" +
    "\013\014\ufff8\026\017\027\024\030\006\001\002\000\004" +
    "\014\ufffc\001\002\000\022\005\012\006\021\007\005\010" +
    "\013\014\ufff8\026\017\027\024\030\006\001\002\000\004" +
    "\014\ufffb\001\002\000\012\005\uffa2\062\uffa2\066\uffa2\067" +
    "\uffa2\001\002\000\006\046\035\063\uffc2\001\002\000\014" +
    "\004\036\005\012\032\041\033\043\053\047\001\002\000" +
    "\046\035\uffd8\036\uffd8\037\uffd8\040\uffd8\041\uffd8\042\uffd8" +
    "\043\uffd8\044\uffd8\045\uffd8\047\uffd8\050\uffd8\051\uffd8\052" +
    "\uffd8\055\uffd8\057\uffd8\061\uffd8\062\uffd8\063\uffd8\001\002" +
    "\000\006\052\111\063\uffc1\001\002\000\052\035\uffd5\036" +
    "\uffd5\037\uffd5\040\uffd5\041\uffd5\042\uffd5\043\uffd5\044\uffd5" +
    "\045\uffd5\047\uffd5\050\uffd5\051\uffd5\052\uffd5\054\106\055" +
    "\uffd5\057\uffd5\060\107\061\uffd5\062\uffd5\063\uffd5\001\002" +
    "\000\046\035\uffd7\036\uffd7\037\uffd7\040\uffd7\041\uffd7\042" +
    "\uffd7\043\uffd7\044\uffd7\045\uffd7\047\uffd7\050\uffd7\051\uffd7" +
    "\052\uffd7\055\uffd7\057\uffd7\061\uffd7\062\uffd7\063\uffd7\001" +
    "\002\000\046\035\uffd4\036\uffd4\037\uffd4\040\uffd4\041\uffd4" +
    "\042\uffd4\043\uffd4\044\uffd4\045\uffd4\047\uffd4\050\uffd4\051" +
    "\uffd4\052\uffd4\055\uffd4\057\uffd4\061\uffd4\062\uffd4\063\uffd4" +
    "\001\002\000\046\035\uffd6\036\uffd6\037\uffd6\040\uffd6\041" +
    "\uffd6\042\uffd6\043\uffd6\044\uffd6\045\uffd6\047\uffd6\050\uffd6" +
    "\051\uffd6\052\uffd6\055\uffd6\057\uffd6\061\uffd6\062\uffd6\063" +
    "\uffd6\001\002\000\046\035\uffd3\036\uffd3\037\uffd3\040\uffd3" +
    "\041\uffd3\042\uffd3\043\uffd3\044\uffd3\045\uffd3\047\uffd3\050" +
    "\uffd3\051\uffd3\052\uffd3\055\uffd3\057\uffd3\061\uffd3\062\uffd3" +
    "\063\uffd3\001\002\000\046\035\uffd9\036\uffd9\037\uffd9\040" +
    "\uffd9\041\uffd9\042\uffd9\043\uffd9\044\uffd9\045\uffd9\047\uffd9" +
    "\050\uffd9\051\uffd9\052\uffd9\055\uffd9\057\uffd9\061\uffd9\062" +
    "\uffd9\063\uffd9\001\002\000\046\035\uffdd\036\uffdd\037\073" +
    "\040\074\041\072\042\uffdd\043\uffdd\044\uffdd\045\uffdd\047" +
    "\uffdd\050\uffdd\051\uffdd\052\uffdd\055\uffdd\057\uffdd\061\uffdd" +
    "\062\uffdd\063\uffdd\001\002\000\014\004\036\005\012\032" +
    "\041\033\043\053\047\001\002\000\040\035\067\036\070" +
    "\042\uffe0\043\uffe0\044\uffe0\045\uffe0\047\uffe0\050\uffe0\051" +
    "\uffe0\052\uffe0\055\uffe0\057\uffe0\061\uffe0\062\uffe0\063\uffe0" +
    "\001\002\000\034\042\065\043\064\044\062\045\063\047" +
    "\uffe5\050\uffe5\051\uffe5\052\uffe5\055\uffe5\057\uffe5\061\uffe5" +
    "\062\uffe5\063\uffe5\001\002\000\024\047\057\050\060\051" +
    "\uffe8\052\uffe8\055\uffe8\057\uffe8\061\uffe8\062\uffe8\063\uffe8" +
    "\001\002\000\020\051\uffea\052\uffea\055\uffea\057\uffea\061" +
    "\uffea\062\uffea\063\uffea\001\002\000\020\051\055\052\uffec" +
    "\055\uffec\057\uffec\061\uffec\062\uffec\063\uffec\001\002\000" +
    "\014\004\036\005\012\032\041\033\043\053\047\001\002" +
    "\000\020\051\uffeb\052\uffeb\055\uffeb\057\uffeb\061\uffeb\062" +
    "\uffeb\063\uffeb\001\002\000\012\004\036\005\012\032\041" +
    "\033\043\001\002\000\012\004\036\005\012\032\041\033" +
    "\043\001\002\000\034\042\065\043\064\044\062\045\063" +
    "\047\uffe6\050\uffe6\051\uffe6\052\uffe6\055\uffe6\057\uffe6\061" +
    "\uffe6\062\uffe6\063\uffe6\001\002\000\012\004\036\005\012" +
    "\032\041\033\043\001\002\000\012\004\036\005\012\032" +
    "\041\033\043\001\002\000\012\004\036\005\012\032\041" +
    "\033\043\001\002\000\012\004\036\005\012\032\041\033" +
    "\043\001\002\000\040\035\067\036\070\042\uffe3\043\uffe3" +
    "\044\uffe3\045\uffe3\047\uffe3\050\uffe3\051\uffe3\052\uffe3\055" +
    "\uffe3\057\uffe3\061\uffe3\062\uffe3\063\uffe3\001\002\000\012" +
    "\004\036\005\012\032\041\033\043\001\002\000\012\004" +
    "\036\005\012\032\041\033\043\001\002\000\046\035\uffde" +
    "\036\uffde\037\073\040\074\041\072\042\uffde\043\uffde\044" +
    "\uffde\045\uffde\047\uffde\050\uffde\051\uffde\052\uffde\055\uffde" +
    "\057\uffde\061\uffde\062\uffde\063\uffde\001\002\000\012\004" +
    "\036\005\012\032\041\033\043\001\002\000\012\004\036" +
    "\005\012\032\041\033\043\001\002\000\012\004\036\005" +
    "\012\032\041\033\043\001\002\000\046\035\uffdb\036\uffdb" +
    "\037\uffdb\040\uffdb\041\uffdb\042\uffdb\043\uffdb\044\uffdb\045" +
    "\uffdb\047\uffdb\050\uffdb\051\uffdb\052\uffdb\055\uffdb\057\uffdb" +
    "\061\uffdb\062\uffdb\063\uffdb\001\002\000\046\035\uffdc\036" +
    "\uffdc\037\uffdc\040\uffdc\041\uffdc\042\uffdc\043\uffdc\044\uffdc" +
    "\045\uffdc\047\uffdc\050\uffdc\051\uffdc\052\uffdc\055\uffdc\057" +
    "\uffdc\061\uffdc\062\uffdc\063\uffdc\001\002\000\046\035\uffda" +
    "\036\uffda\037\uffda\040\uffda\041\uffda\042\uffda\043\uffda\044" +
    "\uffda\045\uffda\047\uffda\050\uffda\051\uffda\052\uffda\055\uffda" +
    "\057\uffda\061\uffda\062\uffda\063\uffda\001\002\000\046\035" +
    "\uffdf\036\uffdf\037\073\040\074\041\072\042\uffdf\043\uffdf" +
    "\044\uffdf\045\uffdf\047\uffdf\050\uffdf\051\uffdf\052\uffdf\055" +
    "\uffdf\057\uffdf\061\uffdf\062\uffdf\063\uffdf\001\002\000\040" +
    "\035\067\036\070\042\uffe4\043\uffe4\044\uffe4\045\uffe4\047" +
    "\uffe4\050\uffe4\051\uffe4\052\uffe4\055\uffe4\057\uffe4\061\uffe4" +
    "\062\uffe4\063\uffe4\001\002\000\040\035\067\036\070\042" +
    "\uffe1\043\uffe1\044\uffe1\045\uffe1\047\uffe1\050\uffe1\051\uffe1" +
    "\052\uffe1\055\uffe1\057\uffe1\061\uffe1\062\uffe1\063\uffe1\001" +
    "\002\000\040\035\067\036\070\042\uffe2\043\uffe2\044\uffe2" +
    "\045\uffe2\047\uffe2\050\uffe2\051\uffe2\052\uffe2\055\uffe2\057" +
    "\uffe2\061\uffe2\062\uffe2\063\uffe2\001\002\000\034\042\065" +
    "\043\064\044\062\045\063\047\uffe7\050\uffe7\051\uffe7\052" +
    "\uffe7\055\uffe7\057\uffe7\061\uffe7\062\uffe7\063\uffe7\001\002" +
    "\000\020\051\uffe9\052\uffe9\055\uffe9\057\uffe9\061\uffe9\062" +
    "\uffe9\063\uffe9\001\002\000\016\004\036\005\012\032\041" +
    "\033\043\053\047\055\uffb4\001\002\000\014\004\036\005" +
    "\012\032\041\033\043\053\047\001\002\000\006\052\111" +
    "\061\112\001\002\000\014\004\036\005\012\032\041\033" +
    "\043\053\047\001\002\000\046\035\uffa8\036\uffa8\037\uffa8" +
    "\040\uffa8\041\uffa8\042\uffa8\043\uffa8\044\uffa8\045\uffa8\047" +
    "\uffa8\050\uffa8\051\uffa8\052\uffa8\055\uffa8\057\uffa8\061\uffa8" +
    "\062\uffa8\063\uffa8\001\002\000\020\051\055\052\uffed\055" +
    "\uffed\057\uffed\061\uffed\062\uffed\063\uffed\001\002\000\010" +
    "\052\111\055\uffb2\062\117\001\002\000\004\055\116\001" +
    "\002\000\046\035\uffa9\036\uffa9\037\uffa9\040\uffa9\041\uffa9" +
    "\042\uffa9\043\uffa9\044\uffa9\045\uffa9\047\uffa9\050\uffa9\051" +
    "\uffa9\052\uffa9\055\uffa9\057\uffa9\061\uffa9\062\uffa9\063\uffa9" +
    "\001\002\000\014\004\036\005\012\032\041\033\043\053" +
    "\047\001\002\000\004\055\uffb5\001\002\000\010\052\111" +
    "\055\uffb2\062\117\001\002\000\004\055\uffb3\001\002\000" +
    "\014\004\036\005\012\032\041\033\043\053\047\001\002" +
    "\000\010\052\111\055\uffc3\063\uffc3\001\002\000\012\005" +
    "\uffa3\062\uffa3\066\uffa3\067\uffa3\001\002\000\006\005\012" +
    "\066\033\001\002\000\004\063\uffaf\001\002\000\022\005" +
    "\012\006\021\007\005\010\013\014\ufff8\026\017\027\024" +
    "\030\006\001\002\000\004\014\ufff9\001\002\000\022\005" +
    "\012\006\021\007\005\010\013\014\ufff8\026\017\027\024" +
    "\030\006\001\002\000\004\014\ufffd\001\002\000\022\005" +
    "\012\006\021\007\005\010\013\014\ufff8\026\017\027\024" +
    "\030\006\001\002\000\004\014\ufffa\001\002\000\004\056" +
    "\137\001\002\000\022\005\012\015\145\017\141\020\153" +
    "\026\017\027\024\030\006\057\uffee\001\002\000\004\063" +
    "\273\001\002\000\004\054\265\001\002\000\004\057\264" +
    "\001\002\000\022\005\012\015\145\017\141\020\153\026" +
    "\017\027\024\030\006\057\uffee\001\002\000\022\005\012" +
    "\015\145\017\141\020\153\026\017\027\024\030\006\057" +
    "\uffee\001\002\000\004\054\250\001\002\000\004\063\246" +
    "\001\002\000\004\063\244\001\002\000\022\005\012\015" +
    "\145\017\141\020\153\026\017\027\024\030\006\057\uffee" +
    "\001\002\000\022\005\012\015\145\017\141\020\153\026" +
    "\017\027\024\030\006\057\uffee\001\002\000\012\005\uffa3" +
    "\046\123\054\237\066\uffa3\001\002\000\004\054\162\001" +
    "\002\000\004\063\160\001\002\000\004\063\156\001\002" +
    "\000\022\005\012\015\145\017\141\020\153\026\017\027" +
    "\024\030\006\057\uffee\001\002\000\004\057\ufff5\001\002" +
    "\000\022\005\012\015\145\017\141\020\153\026\017\027" +
    "\024\030\006\057\uffee\001\002\000\004\057\ufff4\001\002" +
    "\000\010\005\012\026\017\027\024\001\002\000\004\063" +
    "\227\001\002\000\006\005\012\066\033\001\002\000\004" +
    "\063\166\001\002\000\014\004\036\005\012\032\041\033" +
    "\043\053\047\001\002\000\006\052\111\063\170\001\002" +
    "\000\004\005\012\001\002\000\004\046\123\001\002\000" +
    "\004\055\173\001\002\000\004\056\174\001\002\000\022" +
    "\005\012\015\145\017\141\020\153\026\017\027\024\030" +
    "\006\057\uffc9\001\002\000\004\063\224\001\002\000\024" +
    "\005\012\011\uffc9\015\145\017\141\020\153\026\017\027" +
    "\024\030\006\057\uffc9\001\002\000\024\005\012\011\uffc9" +
    "\015\145\017\141\020\153\026\017\027\024\030\006\057" +
    "\uffc9\001\002\000\004\063\220\001\002\000\004\063\216" +
    "\001\002\000\024\005\012\011\uffc9\015\145\017\141\020" +
    "\153\026\017\027\024\030\006\057\uffc9\001\002\000\024" +
    "\005\012\011\uffc9\015\145\017\141\020\153\026\017\027" +
    "\024\030\006\057\uffc9\001\002\000\004\057\213\001\002" +
    "\000\004\063\211\001\002\000\004\063\207\001\002\000" +
    "\024\005\012\011\uffc9\015\145\017\141\020\153\026\017" +
    "\027\024\030\006\057\uffc9\001\002\000\006\011\uffd0\057" +
    "\uffd0\001\002\000\024\005\012\011\uffc9\015\145\017\141" +
    "\020\153\026\017\027\024\030\006\057\uffc9\001\002\000" +
    "\006\011\uffcf\057\uffcf\001\002\000\024\005\uffc5\011\uffc5" +
    "\015\uffc5\017\uffc5\020\uffc5\026\uffc5\027\uffc5\030\uffc5\057" +
    "\uffc5\001\002\000\006\011\uffca\057\uffca\001\002\000\006" +
    "\011\uffcb\057\uffcb\001\002\000\024\005\012\011\uffc9\015" +
    "\145\017\141\020\153\026\017\027\024\030\006\057\uffc9" +
    "\001\002\000\006\011\uffd1\057\uffd1\001\002\000\024\005" +
    "\012\011\uffc9\015\145\017\141\020\153\026\017\027\024" +
    "\030\006\057\uffc9\001\002\000\006\011\uffce\057\uffce\001" +
    "\002\000\006\011\uffcc\057\uffcc\001\002\000\006\011\uffcd" +
    "\057\uffcd\001\002\000\024\005\012\011\uffc9\015\145\017" +
    "\141\020\153\026\017\027\024\030\006\057\uffc9\001\002" +
    "\000\006\011\uffd2\057\uffd2\001\002\000\004\046\035\001" +
    "\002\000\014\004\036\005\012\032\041\033\043\053\047" +
    "\001\002\000\006\052\111\063\231\001\002\000\004\005" +
    "\012\001\002\000\004\055\233\001\002\000\004\056\234" +
    "\001\002\000\022\005\012\015\145\017\141\020\153\026" +
    "\017\027\024\030\006\057\uffc9\001\002\000\004\057\236" +
    "\001\002\000\024\005\uffc4\011\uffc4\015\uffc4\017\uffc4\020" +
    "\uffc4\026\uffc4\027\uffc4\030\uffc4\057\uffc4\001\002\000\016" +
    "\004\036\005\012\032\041\033\043\053\047\055\uffb4\001" +
    "\002\000\004\055\241\001\002\000\004\063\uffb0\001\002" +
    "\000\004\057\uffef\001\002\000\004\057\ufff0\001\002\000" +
    "\022\005\012\015\145\017\141\020\153\026\017\027\024" +
    "\030\006\057\uffee\001\002\000\004\057\ufff6\001\002\000" +
    "\022\005\012\015\145\017\141\020\153\026\017\027\024" +
    "\030\006\057\uffee\001\002\000\004\057\ufff3\001\002\000" +
    "\014\004\036\005\012\032\041\033\043\053\047\001\002" +
    "\000\006\052\111\055\252\001\002\000\004\056\253\001" +
    "\002\000\022\005\012\015\145\017\141\020\153\026\017" +
    "\027\024\030\006\057\uffc9\001\002\000\004\057\255\001" +
    "\002\000\026\005\uffc8\011\uffc8\015\uffc8\016\256\017\uffc8" +
    "\020\uffc8\026\uffc8\027\uffc8\030\uffc8\057\uffc8\001\002\000" +
    "\004\056\257\001\002\000\022\005\012\015\145\017\141" +
    "\020\153\026\017\027\024\030\006\057\uffc9\001\002\000" +
    "\004\057\261\001\002\000\024\005\uffc7\011\uffc7\015\uffc7" +
    "\017\uffc7\020\uffc7\026\uffc7\027\uffc7\030\uffc7\057\uffc7\001" +
    "\002\000\004\057\ufff1\001\002\000\004\057\ufff2\001\002" +
    "\000\004\002\001\001\002\000\014\004\036\005\012\032" +
    "\041\033\043\053\047\001\002\000\006\052\111\055\267" +
    "\001\002\000\004\056\270\001\002\000\022\005\012\015" +
    "\145\017\141\020\153\026\017\027\024\030\006\057\uffc9" +
    "\001\002\000\004\057\272\001\002\000\024\005\uffc6\011" +
    "\uffc6\015\uffc6\017\uffc6\020\uffc6\026\uffc6\027\uffc6\030\uffc6" +
    "\057\uffc6\001\002\000\022\005\012\015\145\017\141\020" +
    "\153\026\017\027\024\030\006\057\uffee\001\002\000\004" +
    "\057\ufff7\001\002\000\006\005\012\066\033\001\002\000" +
    "\004\005\012\001\002\000\004\054\300\001\002\000\012" +
    "\005\012\026\017\027\024\055\uffbb\001\002\000\004\055" +
    "\317\001\002\000\010\005\012\066\033\067\303\001\002" +
    "\000\004\005\012\001\002\000\006\055\uffb8\062\305\001" +
    "\002\000\010\005\012\026\017\027\024\001\002\000\004" +
    "\055\uffbd\001\002\000\010\005\012\066\033\067\310\001" +
    "\002\000\004\005\012\001\002\000\006\055\uffb8\062\305" +
    "\001\002\000\004\055\uffba\001\002\000\006\055\uffb8\062" +
    "\305\001\002\000\004\055\uffb9\001\002\000\006\055\uffb8" +
    "\062\305\001\002\000\004\055\uffbc\001\002\000\004\056" +
    "\320\001\002\000\022\005\012\015\145\017\141\020\153" +
    "\026\017\027\024\030\006\057\uffc9\001\002\000\004\057" +
    "\322\001\002\000\004\063\uffb6\001\002\000\004\054\324" +
    "\001\002\000\012\005\012\026\017\027\024\055\uffbb\001" +
    "\002\000\004\055\326\001\002\000\004\056\327\001\002" +
    "\000\022\005\012\011\uffc9\015\145\017\141\020\153\026" +
    "\017\027\024\030\006\001\002\000\004\011\331\001\002" +
    "\000\014\004\036\005\012\032\041\033\043\053\047\001" +
    "\002\000\004\063\333\001\002\000\004\057\334\001\002" +
    "\000\004\063\uffb7\001\002\000\006\052\111\063\uffb1\001" +
    "\002\000\022\005\012\006\021\007\005\010\013\014\ufff8" +
    "\026\017\027\024\030\006\001\002\000\004\014\uffff\001" +
    "\002\000\004\002\000\001\002\000\004\046\342\001\002" +
    "\000\004\056\343\001\002\000\014\004\036\005\012\032" +
    "\041\033\043\053\047\001\002\000\010\052\111\057\uffbf" +
    "\062\uffbf\001\002\000\006\057\346\062\347\001\002\000" +
    "\004\063\uffc0\001\002\000\014\004\036\005\012\032\041" +
    "\033\043\053\047\001\002\000\010\052\111\057\uffbe\062" +
    "\uffbe\001\002\000\012\005\012\026\017\027\024\030\006" +
    "\001\002\000\006\062\357\066\033\001\002\000\004\062" +
    "\354\001\002\000\004\004\355\001\002\000\004\042\356" +
    "\001\002\000\006\005\uffa4\062\uffa4\001\002\000\004\004" +
    "\360\001\002\000\004\042\361\001\002\000\006\005\uffa5" +
    "\062\uffa5\001\002\000\004\056\363\001\002\000\014\005" +
    "\012\026\017\027\024\030\006\057\uffab\001\002\000\004" +
    "\057\375\001\002\000\004\063\373\001\002\000\004\063" +
    "\371\001\002\000\006\005\012\066\033\001\002\000\004" +
    "\063\uffc2\001\002\000\014\005\012\026\017\027\024\030" +
    "\006\057\uffab\001\002\000\004\057\uffad\001\002\000\014" +
    "\005\012\026\017\027\024\030\006\057\uffab\001\002\000" +
    "\004\057\uffac\001\002\000\004\063\uffae\001\002\000\022" +
    "\005\012\006\021\007\005\010\013\014\ufff8\026\017\027" +
    "\024\030\006\001\002\000\004\014\ufffe\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\375\000\032\002\007\003\013\017\021\026\024\027" +
    "\015\030\003\031\025\032\017\033\010\036\014\041\022" +
    "\042\006\001\001\000\002\001\001\000\004\017\361\001" +
    "\001\000\002\001\001\000\004\017\340\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\006\017" +
    "\124\041\274\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\006\017\124\041\125\001\001\000\002\001\001\000\004" +
    "\017\033\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\030\003\027\017\021\026\024\027\015" +
    "\030\003\031\025\032\017\033\010\036\014\041\022\042" +
    "\006\001\001\000\002\001\001\000\030\003\031\017\021" +
    "\026\024\027\015\030\003\031\025\032\017\033\010\036" +
    "\014\041\022\042\006\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\030\006\036\007\053\010" +
    "\052\011\051\012\050\013\047\014\045\015\044\017\037" +
    "\037\041\040\043\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\024\010\104\011\051\012\050\013\047" +
    "\014\045\015\044\017\037\037\041\040\043\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\024\010\055\011\051\012" +
    "\050\013\047\014\045\015\044\017\037\037\041\040\043" +
    "\001\001\000\002\001\001\000\020\012\103\013\047\014" +
    "\045\015\044\017\037\037\041\040\043\001\001\000\020" +
    "\012\060\013\047\014\045\015\044\017\037\037\041\040" +
    "\043\001\001\000\002\001\001\000\016\013\102\014\045" +
    "\015\044\017\037\037\041\040\043\001\001\000\016\013" +
    "\101\014\045\015\044\017\037\037\041\040\043\001\001" +
    "\000\016\013\100\014\045\015\044\017\037\037\041\040" +
    "\043\001\001\000\016\013\065\014\045\015\044\017\037" +
    "\037\041\040\043\001\001\000\002\001\001\000\014\014" +
    "\077\015\044\017\037\037\041\040\043\001\001\000\014" +
    "\014\070\015\044\017\037\037\041\040\043\001\001\000" +
    "\002\001\001\000\012\015\076\017\037\037\041\040\043" +
    "\001\001\000\012\015\075\017\037\037\041\040\043\001" +
    "\001\000\012\015\074\017\037\037\041\040\043\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\032\006" +
    "\113\007\053\010\052\011\051\012\050\013\047\014\045" +
    "\015\044\017\037\037\041\040\043\045\114\001\001\000" +
    "\030\006\107\007\053\010\052\011\051\012\050\013\047" +
    "\014\045\015\044\017\037\037\041\040\043\001\001\000" +
    "\002\001\001\000\026\007\112\010\052\011\051\012\050" +
    "\013\047\014\045\015\044\017\037\037\041\040\043\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\046\117" +
    "\001\001\000\002\001\001\000\002\001\001\000\030\006" +
    "\120\007\053\010\052\011\051\012\050\013\047\014\045" +
    "\015\044\017\037\037\041\040\043\001\001\000\002\001" +
    "\001\000\004\046\121\001\001\000\002\001\001\000\030" +
    "\006\123\007\053\010\052\011\051\012\050\013\047\014" +
    "\045\015\044\017\037\037\041\040\043\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\017\126\001\001\000" +
    "\002\001\001\000\030\003\130\017\021\026\024\027\015" +
    "\030\003\031\025\032\017\033\010\036\014\041\022\042" +
    "\006\001\001\000\002\001\001\000\030\003\132\017\021" +
    "\026\024\027\015\030\003\031\025\032\017\033\010\036" +
    "\014\041\022\042\006\001\001\000\002\001\001\000\030" +
    "\003\134\017\021\026\024\027\015\030\003\031\025\032" +
    "\017\033\010\036\014\041\022\042\006\001\001\000\002" +
    "\001\001\000\002\001\001\000\034\004\141\017\151\021" +
    "\143\022\147\023\150\025\142\026\153\027\146\030\137" +
    "\031\154\034\145\041\022\042\006\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\034\004\262" +
    "\017\151\021\143\022\147\023\150\025\142\026\153\027" +
    "\146\030\137\031\154\034\145\041\022\042\006\001\001" +
    "\000\034\004\261\017\151\021\143\022\147\023\150\025" +
    "\142\026\153\027\146\030\137\031\154\034\145\041\022" +
    "\042\006\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\034\004\242\017\151\021\143\022\147" +
    "\023\150\025\142\026\153\027\146\030\137\031\154\034" +
    "\145\041\022\042\006\001\001\000\034\004\241\017\151" +
    "\021\143\022\147\023\150\025\142\026\153\027\146\030" +
    "\137\031\154\034\145\041\022\042\006\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\034\004\156\017\151\021\143\022\147\023\150" +
    "\025\142\026\153\027\146\030\137\031\154\034\145\041" +
    "\022\042\006\001\001\000\002\001\001\000\034\004\160" +
    "\017\151\021\143\022\147\023\150\025\142\026\153\027" +
    "\146\030\137\031\154\034\145\041\022\042\006\001\001" +
    "\000\002\001\001\000\012\017\021\026\164\030\162\041" +
    "\163\001\001\000\002\001\001\000\004\017\225\001\001" +
    "\000\002\001\001\000\030\006\166\007\053\010\052\011" +
    "\051\012\050\013\047\014\045\015\044\017\037\037\041" +
    "\040\043\001\001\000\002\001\001\000\006\017\170\026" +
    "\171\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\034\005\203\017\151\021\176\022\201\023" +
    "\202\025\175\026\204\027\200\030\174\031\205\034\177" +
    "\041\022\042\006\001\001\000\002\001\001\000\034\005" +
    "\222\017\151\021\176\022\201\023\202\025\175\026\204" +
    "\027\200\030\174\031\205\034\177\041\022\042\006\001" +
    "\001\000\034\005\221\017\151\021\176\022\201\023\202" +
    "\025\175\026\204\027\200\030\174\031\205\034\177\041" +
    "\022\042\006\001\001\000\002\001\001\000\002\001\001" +
    "\000\034\005\214\017\151\021\176\022\201\023\202\025" +
    "\175\026\204\027\200\030\174\031\205\034\177\041\022" +
    "\042\006\001\001\000\034\005\213\017\151\021\176\022" +
    "\201\023\202\025\175\026\204\027\200\030\174\031\205" +
    "\034\177\041\022\042\006\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\034\005\207\017\151" +
    "\021\176\022\201\023\202\025\175\026\204\027\200\030" +
    "\174\031\205\034\177\041\022\042\006\001\001\000\002" +
    "\001\001\000\034\005\211\017\151\021\176\022\201\023" +
    "\202\025\175\026\204\027\200\030\174\031\205\034\177" +
    "\041\022\042\006\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\034\005\216" +
    "\017\151\021\176\022\201\023\202\025\175\026\204\027" +
    "\200\030\174\031\205\034\177\041\022\042\006\001\001" +
    "\000\002\001\001\000\034\005\220\017\151\021\176\022" +
    "\201\023\202\025\175\026\204\027\200\030\174\031\205" +
    "\034\177\041\022\042\006\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\034\005\224\017\151" +
    "\021\176\022\201\023\202\025\175\026\204\027\200\030" +
    "\174\031\205\034\177\041\022\042\006\001\001\000\002" +
    "\001\001\000\002\001\001\000\030\006\227\007\053\010" +
    "\052\011\051\012\050\013\047\014\045\015\044\017\037" +
    "\037\041\040\043\001\001\000\002\001\001\000\006\017" +
    "\170\026\231\001\001\000\002\001\001\000\002\001\001" +
    "\000\034\005\234\017\151\021\176\022\201\023\202\025" +
    "\175\026\204\027\200\030\174\031\205\034\177\041\022" +
    "\042\006\001\001\000\002\001\001\000\002\001\001\000" +
    "\032\006\113\007\053\010\052\011\051\012\050\013\047" +
    "\014\045\015\044\017\037\037\041\040\043\045\237\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\034\004\244\017\151\021\143\022" +
    "\147\023\150\025\142\026\153\027\146\030\137\031\154" +
    "\034\145\041\022\042\006\001\001\000\002\001\001\000" +
    "\034\004\246\017\151\021\143\022\147\023\150\025\142" +
    "\026\153\027\146\030\137\031\154\034\145\041\022\042" +
    "\006\001\001\000\002\001\001\000\030\006\250\007\053" +
    "\010\052\011\051\012\050\013\047\014\045\015\044\017" +
    "\037\037\041\040\043\001\001\000\002\001\001\000\002" +
    "\001\001\000\034\005\253\017\151\021\176\022\201\023" +
    "\202\025\175\026\204\027\200\030\174\031\205\034\177" +
    "\041\022\042\006\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\034\005\257\017\151\021\176" +
    "\022\201\023\202\025\175\026\204\027\200\030\174\031" +
    "\205\034\177\041\022\042\006\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\030\006\265\007\053\010\052\011\051" +
    "\012\050\013\047\014\045\015\044\017\037\037\041\040" +
    "\043\001\001\000\002\001\001\000\002\001\001\000\034" +
    "\005\270\017\151\021\176\022\201\023\202\025\175\026" +
    "\204\027\200\030\174\031\205\034\177\041\022\042\006" +
    "\001\001\000\002\001\001\000\002\001\001\000\034\004" +
    "\273\017\151\021\143\022\147\023\150\025\142\026\153" +
    "\027\146\030\137\031\154\034\145\041\022\042\006\001" +
    "\001\000\002\001\001\000\004\017\322\001\001\000\004" +
    "\017\276\001\001\000\002\001\001\000\010\017\124\041" +
    "\301\043\300\001\001\000\002\001\001\000\004\017\303" +
    "\001\001\000\004\017\314\001\001\000\004\044\305\001" +
    "\001\000\006\017\124\041\306\001\001\000\002\001\001" +
    "\000\004\017\310\001\001\000\004\017\312\001\001\000" +
    "\004\044\311\001\001\000\002\001\001\000\004\044\313" +
    "\001\001\000\002\001\001\000\004\044\315\001\001\000" +
    "\002\001\001\000\002\001\001\000\034\005\320\017\151" +
    "\021\176\022\201\023\202\025\175\026\204\027\200\030" +
    "\174\031\205\034\177\041\022\042\006\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\010\017" +
    "\124\041\301\043\324\001\001\000\002\001\001\000\002" +
    "\001\001\000\034\005\327\017\151\021\176\022\201\023" +
    "\202\025\175\026\204\027\200\030\174\031\205\034\177" +
    "\041\022\042\006\001\001\000\004\035\331\001\001\000" +
    "\030\006\334\007\053\010\052\011\051\012\050\013\047" +
    "\014\045\015\044\017\037\037\041\040\043\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\030\003\336\017\021\026\024\027\015\030" +
    "\003\031\025\032\017\033\010\036\014\041\022\042\006" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\032\006\343\007\053\010\052" +
    "\011\051\012\050\013\047\014\045\015\044\017\037\037" +
    "\041\040\043\047\344\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\030\006\347\007\053\010" +
    "\052\011\051\012\050\013\047\014\045\015\044\017\037" +
    "\037\041\040\043\001\001\000\002\001\001\000\010\017" +
    "\124\041\351\042\352\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\016\017\124\027\365\031\364\041" +
    "\366\042\006\050\363\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\017\367\001\001\000" +
    "\002\001\001\000\016\017\124\027\365\031\364\041\366" +
    "\042\006\050\371\001\001\000\002\001\001\000\016\017" +
    "\124\027\365\031\364\041\366\042\006\050\373\001\001" +
    "\000\002\001\001\000\002\001\001\000\030\003\376\017" +
    "\021\026\024\027\015\030\003\031\025\032\017\033\010" +
    "\036\014\041\022\042\006\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$AnalizadorSintacticoTiny$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$AnalizadorSintacticoTiny$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$AnalizadorSintacticoTiny$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 1;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}


  /** User initialization code. */
  public void user_init() throws java.lang.Exception
    {
 
   errores = new GestionErrores();
   AnalizadorLexicoTiny alex = (AnalizadorLexicoTiny)getScanner();
   alex.fijaGestionErrores(errores);

    }

  /** Scan to get the next Symbol. */
  public java_cup.runtime.Symbol scan()
    throws java.lang.Exception
    {
 return getScanner().next_token(); 
    }

 
   private GestionErrores errores;
   public void syntax_error(Symbol unidadLexica) {
     errores.errorSintactico((UnidadLexica)unidadLexica);
   }

}

/** Cup generated class to encapsulate user supplied action code.*/
class CUP$AnalizadorSintacticoTiny$actions {


   private ASExpresion as = new ASExpresion();

  private final AnalizadorSintacticoTiny parser;

  /** Constructor */
  CUP$AnalizadorSintacticoTiny$actions(AnalizadorSintacticoTiny parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$AnalizadorSintacticoTiny$do_action_part00000000(
    int                        CUP$AnalizadorSintacticoTiny$act_num,
    java_cup.runtime.lr_parser CUP$AnalizadorSintacticoTiny$parser,
    java.util.Stack            CUP$AnalizadorSintacticoTiny$stack,
    int                        CUP$AnalizadorSintacticoTiny$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$AnalizadorSintacticoTiny$result;

      /* select the action based on the action number */
      switch (CUP$AnalizadorSintacticoTiny$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // PROG_COMP ::= CABECERA MAIN LLAVEAPERTURA CUERPO_MAIN LLAVECIERRE 
            {
              ProgramaCompleto RESULT =null;
		Cabecera cab = (Cabecera)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-4)).value;
		CuerpoMain c_main = (CuerpoMain)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-1)).value;
		 RESULT = new ProgramaCompleto(cab, c_main); 
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("PROG_COMP",0, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // $START ::= PROG_COMP EOF 
            {
              Object RESULT =null;
		ProgramaCompleto start_val = (ProgramaCompleto)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-1)).value;
		RESULT = start_val;
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("$START",0, RESULT);
            }
          /* ACCEPT */
          CUP$AnalizadorSintacticoTiny$parser.done_parsing();
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // CABECERA ::= INST_DECL_FUN PUNTOCOMA CABECERA 
            {
              Cabecera RESULT =null;
		InstruccionDeclFuncion inst = (InstruccionDeclFuncion)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-2)).value;
		Cabecera cab = (Cabecera)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.peek()).value;
		 cab.addInstr(inst); RESULT = cab; 
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("CABECERA",1, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // CABECERA ::= INST_DECLASIG PUNTOCOMA CABECERA 
            {
              Cabecera RESULT =null;
		InstruccionDeclaracion inst = (InstruccionDeclaracion)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-2)).value;
		Cabecera cab = (Cabecera)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.peek()).value;
		 cab.addInstr(inst); RESULT = cab; 
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("CABECERA",1, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // CABECERA ::= INST_DECL PUNTOCOMA CABECERA 
            {
              Cabecera RESULT =null;
		InstruccionDeclaracion inst = (InstruccionDeclaracion)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-2)).value;
		Cabecera cab = (Cabecera)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.peek()).value;
		 cab.addInstr(inst); RESULT = cab; 
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("CABECERA",1, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // CABECERA ::= INST_DECL_VECTOR PUNTOCOMA CABECERA 
            {
              Cabecera RESULT =null;
		InstruccionDeclVector inst = (InstruccionDeclVector)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-2)).value;
		Cabecera cab = (Cabecera)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.peek()).value;
		 cab.addInstr(inst); RESULT = cab; 
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("CABECERA",1, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // CABECERA ::= INST_ASIG PUNTOCOMA CABECERA 
            {
              Cabecera RESULT =null;
		InstruccionAsignacion inst = (InstruccionAsignacion)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-2)).value;
		Cabecera cab = (Cabecera)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.peek()).value;
		 cab.addInstr(inst); RESULT = cab; 
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("CABECERA",1, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // CABECERA ::= INST_TYPEDEF PUNTOCOMA CABECERA 
            {
              Cabecera RESULT =null;
		InstruccionTypedef inst = (InstruccionTypedef)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-2)).value;
		Cabecera cab = (Cabecera)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.peek()).value;
		 cab.addInstr(inst); RESULT = cab; 
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("CABECERA",1, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // CABECERA ::= INST_STRUCT PUNTOCOMA CABECERA 
            {
              Cabecera RESULT =null;
		InstruccionDeclStruct inst = (InstruccionDeclStruct)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-2)).value;
		Cabecera cab = (Cabecera)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.peek()).value;
		 cab.addInstr(inst); RESULT = cab; 
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("CABECERA",1, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // CABECERA ::= 
            {
              Cabecera RESULT =null;
		 RESULT = new Cabecera(); 
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("CABECERA",1, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // CUERPO_MAIN ::= INST_DECLASIG PUNTOCOMA CUERPO_MAIN 
            {
              CuerpoMain RESULT =null;
		InstruccionDeclaracion inst = (InstruccionDeclaracion)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-2)).value;
		CuerpoMain c_main = (CuerpoMain)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.peek()).value;
		 c_main.addInstr(inst); RESULT = c_main; 
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("CUERPO_MAIN",2, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // CUERPO_MAIN ::= INST_DECL PUNTOCOMA CUERPO_MAIN 
            {
              CuerpoMain RESULT =null;
		InstruccionDeclaracion inst = (InstruccionDeclaracion)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-2)).value;
		CuerpoMain c_main = (CuerpoMain)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.peek()).value;
		 c_main.addInstr(inst); RESULT = c_main; 
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("CUERPO_MAIN",2, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // CUERPO_MAIN ::= INST_DECL_VECTOR PUNTOCOMA CUERPO_MAIN 
            {
              CuerpoMain RESULT =null;
		InstruccionDeclVector inst = (InstruccionDeclVector)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-2)).value;
		CuerpoMain c_main = (CuerpoMain)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.peek()).value;
		 c_main.addInstr(inst); RESULT = c_main; 
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("CUERPO_MAIN",2, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // CUERPO_MAIN ::= INST_ASIG PUNTOCOMA CUERPO_MAIN 
            {
              CuerpoMain RESULT =null;
		InstruccionAsignacion inst = (InstruccionAsignacion)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-2)).value;
		CuerpoMain c_main = (CuerpoMain)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.peek()).value;
		 c_main.addInstr(inst); RESULT = c_main; 
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("CUERPO_MAIN",2, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // CUERPO_MAIN ::= INST_CALL_PROC PUNTOCOMA CUERPO_MAIN 
            {
              CuerpoMain RESULT =null;
		InstruccionLlamadaFuncion inst = (InstruccionLlamadaFuncion)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-2)).value;
		CuerpoMain c_main = (CuerpoMain)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.peek()).value;
		 c_main.addInstr(inst); RESULT = c_main; 
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("CUERPO_MAIN",2, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // CUERPO_MAIN ::= INST_FOR CUERPO_MAIN 
            {
              CuerpoMain RESULT =null;
		InstruccionFor inst = (InstruccionFor)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-1)).value;
		CuerpoMain c_main = (CuerpoMain)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.peek()).value;
		 c_main.addInstr(inst); RESULT = c_main; 
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("CUERPO_MAIN",2, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // CUERPO_MAIN ::= INST_IF CUERPO_MAIN 
            {
              CuerpoMain RESULT =null;
		InstruccionIfElse inst = (InstruccionIfElse)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-1)).value;
		CuerpoMain c_main = (CuerpoMain)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.peek()).value;
		 c_main.addInstr(inst); RESULT = c_main; 
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("CUERPO_MAIN",2, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // CUERPO_MAIN ::= INST_IFELSE CUERPO_MAIN 
            {
              CuerpoMain RESULT =null;
		InstruccionIfElse inst = (InstruccionIfElse)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-1)).value;
		CuerpoMain c_main = (CuerpoMain)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.peek()).value;
		 c_main.addInstr(inst); RESULT = c_main; 
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("CUERPO_MAIN",2, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // CUERPO_MAIN ::= INST_WHILE CUERPO_MAIN 
            {
              CuerpoMain RESULT =null;
		InstruccionWhile inst = (InstruccionWhile)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-1)).value;
		CuerpoMain c_main = (CuerpoMain)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.peek()).value;
		 c_main.addInstr(inst); RESULT = c_main; 
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("CUERPO_MAIN",2, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // CUERPO_MAIN ::= 
            {
              CuerpoMain RESULT =null;
		 RESULT = new CuerpoMain(); 
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("CUERPO_MAIN",2, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // Exp0 ::= Exp0 OR Exp1 
            {
              Expresion RESULT =null;
		Expresion exp1 = (Expresion)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-2)).value;
		Expresion exp2 = (Expresion)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.peek()).value;
		 RESULT = as.or(exp1, exp2); 
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("Exp0",4, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // Exp0 ::= Exp1 
            {
              Expresion RESULT =null;
		Expresion exp = (Expresion)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.peek()).value;
		 RESULT = exp; 
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("Exp0",4, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // Exp1 ::= Exp1 AND Exp2 
            {
              Expresion RESULT =null;
		Expresion exp1 = (Expresion)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-2)).value;
		Expresion exp2 = (Expresion)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.peek()).value;
		 RESULT = as.and(exp1, exp2); 
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("Exp1",5, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // Exp1 ::= Exp2 
            {
              Expresion RESULT =null;
		Expresion exp = (Expresion)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.peek()).value;
		 RESULT = exp; 
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("Exp1",5, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // Exp2 ::= NOT Exp2 
            {
              Expresion RESULT =null;
		Expresion exp2 = (Expresion)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.peek()).value;
		 RESULT = as.not(exp2); 
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("Exp2",6, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // Exp2 ::= Exp3 
            {
              Expresion RESULT =null;
		Expresion exp = (Expresion)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.peek()).value;
		 RESULT = exp; 
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("Exp2",6, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // Exp3 ::= Exp3 IGUALIGUAL Exp4 
            {
              Expresion RESULT =null;
		Expresion exp1 = (Expresion)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-2)).value;
		Expresion exp2 = (Expresion)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.peek()).value;
		 RESULT = as.equals(exp1, exp2); 
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("Exp3",7, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // Exp3 ::= Exp3 NOIGUAL Exp4 
            {
              Expresion RESULT =null;
		Expresion exp1 = (Expresion)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-2)).value;
		Expresion exp2 = (Expresion)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.peek()).value;
		 RESULT = as.nequals(exp1, exp2); 
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("Exp3",7, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // Exp3 ::= Exp4 
            {
              Expresion RESULT =null;
		Expresion exp = (Expresion)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.peek()).value;
		 RESULT = exp; 
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("Exp3",7, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // Exp4 ::= Exp4 MENOR Exp5 
            {
              Expresion RESULT =null;
		Expresion exp1 = (Expresion)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-2)).value;
		Expresion exp2 = (Expresion)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.peek()).value;
		 RESULT = as.lt(exp1, exp2); 
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("Exp4",8, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // Exp4 ::= Exp4 MAYOR Exp5 
            {
              Expresion RESULT =null;
		Expresion exp1 = (Expresion)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-2)).value;
		Expresion exp2 = (Expresion)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.peek()).value;
		 RESULT = as.gt(exp1, exp2); 
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("Exp4",8, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // Exp4 ::= Exp4 MENOROIGUAL Exp5 
            {
              Expresion RESULT =null;
		Expresion exp1 = (Expresion)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-2)).value;
		Expresion exp2 = (Expresion)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.peek()).value;
		 RESULT = as.leq(exp1, exp2); 
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("Exp4",8, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // Exp4 ::= Exp4 MAYOROIGUAL Exp5 
            {
              Expresion RESULT =null;
		Expresion exp1 = (Expresion)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-2)).value;
		Expresion exp2 = (Expresion)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.peek()).value;
		 RESULT = as.geq(exp1, exp2); 
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("Exp4",8, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // Exp4 ::= Exp5 
            {
              Expresion RESULT =null;
		Expresion exp = (Expresion)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.peek()).value;
		 RESULT = exp; 
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("Exp4",8, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // Exp5 ::= Exp5 SUM Exp6 
            {
              Expresion RESULT =null;
		Expresion exp1 = (Expresion)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-2)).value;
		Expresion exp2 = (Expresion)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.peek()).value;
		 RESULT = as.suma(exp1, exp2); 
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("Exp5",9, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // Exp5 ::= Exp5 SUB Exp6 
            {
              Expresion RESULT =null;
		Expresion exp1 = (Expresion)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-2)).value;
		Expresion exp2 = (Expresion)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.peek()).value;
		 RESULT = as.resta(exp1, exp2); 
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("Exp5",9, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // Exp5 ::= Exp6 
            {
              Expresion RESULT =null;
		Expresion exp = (Expresion)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.peek()).value;
		 RESULT = exp; 
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("Exp5",9, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // Exp6 ::= Exp6 MULT Exp7 
            {
              Expresion RESULT =null;
		Expresion exp1 = (Expresion)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-2)).value;
		Expresion exp2 = (Expresion)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.peek()).value;
		 RESULT = as.mul(exp1, exp2); 
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("Exp6",10, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // Exp6 ::= Exp6 DIV Exp7 
            {
              Expresion RESULT =null;
		Expresion exp1 = (Expresion)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-2)).value;
		Expresion exp2 = (Expresion)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.peek()).value;
		 RESULT = as.div(exp1, exp2); 
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("Exp6",10, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // Exp6 ::= Exp6 MOD Exp7 
            {
              Expresion RESULT =null;
		Expresion exp1 = (Expresion)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-2)).value;
		Expresion exp2 = (Expresion)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.peek()).value;
		 RESULT = as.mod(exp1, exp2); 
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("Exp6",10, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // Exp6 ::= Exp7 
            {
              Expresion RESULT =null;
		Expresion exp = (Expresion)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.peek()).value;
		 RESULT = exp; 
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("Exp6",10, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // Exp7 ::= NUM 
            {
              Expresion RESULT =null;
		String cadenaNum = (String)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.peek()).value;
		 RESULT = as.num(cadenaNum); 
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("Exp7",11, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // Exp7 ::= TRUE 
            {
              Expresion RESULT =null;
		 RESULT = as.bool_true(); 
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("Exp7",11, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // Exp7 ::= FALSE 
            {
              Expresion RESULT =null;
		 RESULT = as.bool_false(); 
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("Exp7",11, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // Exp7 ::= Ident 
            {
              Expresion RESULT =null;
		Id id = (Id)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.peek()).value;
		 RESULT = id; 
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("Exp7",11, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // Exp7 ::= EXPR_LLAM_FUN 
            {
              Expresion RESULT =null;
		ExpresionLlamadaFuncion llam_fun = (ExpresionLlamadaFuncion)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.peek()).value;
		 RESULT = llam_fun; 
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("Exp7",11, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // Exp7 ::= EXPR_ACC_VECT 
            {
              Expresion RESULT =null;
		ListIndex acc = (ListIndex)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.peek()).value;
		 RESULT = acc; 
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("Exp7",11, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // CUER ::= INST_DECLASIG PUNTOCOMA CUER 
            {
              Cuerpo RESULT =null;
		InstruccionDeclaracion inst = (InstruccionDeclaracion)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-2)).value;
		Cuerpo c = (Cuerpo)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.peek()).value;
		 c.addInstr(inst); RESULT = c; 
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("CUER",3, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // CUER ::= INST_DECL PUNTOCOMA CUER 
            {
              Cuerpo RESULT =null;
		InstruccionDeclaracion inst = (InstruccionDeclaracion)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-2)).value;
		Cuerpo c = (Cuerpo)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.peek()).value;
		 c.addInstr(inst); RESULT = c; 
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("CUER",3, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // CUER ::= INST_DECL_VECTOR PUNTOCOMA CUER 
            {
              Cuerpo RESULT =null;
		InstruccionDeclVector inst = (InstruccionDeclVector)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-2)).value;
		Cuerpo c = (Cuerpo)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.peek()).value;
		 c.addInstr(inst); RESULT = c; 
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("CUER",3, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // CUER ::= INST_ASIG PUNTOCOMA CUER 
            {
              Cuerpo RESULT =null;
		InstruccionAsignacion inst = (InstruccionAsignacion)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-2)).value;
		Cuerpo c = (Cuerpo)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.peek()).value;
		 c.addInstr(inst); RESULT = c; 
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("CUER",3, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // CUER ::= INST_CALL_PROC PUNTOCOMA CUER 
            {
              Cuerpo RESULT =null;
		InstruccionLlamadaFuncion inst = (InstruccionLlamadaFuncion)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-2)).value;
		Cuerpo c = (Cuerpo)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.peek()).value;
		 c.addInstr(inst); RESULT = c; 
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("CUER",3, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // CUER ::= INST_FOR CUER 
            {
              Cuerpo RESULT =null;
		InstruccionFor inst = (InstruccionFor)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-1)).value;
		Cuerpo c = (Cuerpo)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.peek()).value;
		 c.addInstr(inst); RESULT = c; 
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("CUER",3, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // CUER ::= INST_IF CUER 
            {
              Cuerpo RESULT =null;
		InstruccionIfElse inst = (InstruccionIfElse)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-1)).value;
		Cuerpo c = (Cuerpo)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.peek()).value;
		 c.addInstr(inst); RESULT = c; 
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("CUER",3, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // CUER ::= INST_IFELSE CUER 
            {
              Cuerpo RESULT =null;
		InstruccionIfElse inst = (InstruccionIfElse)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-1)).value;
		Cuerpo c = (Cuerpo)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.peek()).value;
		 c.addInstr(inst); RESULT = c; 
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("CUER",3, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // CUER ::= INST_WHILE CUER 
            {
              Cuerpo RESULT =null;
		InstruccionWhile inst = (InstruccionWhile)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-1)).value;
		Cuerpo c = (Cuerpo)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.peek()).value;
		 c.addInstr(inst); RESULT = c; 
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("CUER",3, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // CUER ::= 
            {
              Cuerpo RESULT =null;
		 RESULT = new Cuerpo(); 
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("CUER",3, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // INST_IF ::= IF PARAPERTURA Exp0 PARCIERRE LLAVEAPERTURA CUER LLAVECIERRE 
            {
              InstruccionIfElse RESULT =null;
		Expresion cond = (Expresion)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-4)).value;
		Cuerpo cif = (Cuerpo)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-1)).value;
		 RESULT = new InstruccionIfElse(cond, cif); 
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("INST_IF",15, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // INST_IFELSE ::= IF PARAPERTURA Exp0 PARCIERRE LLAVEAPERTURA CUER LLAVECIERRE ELSE LLAVEAPERTURA CUER LLAVECIERRE 
            {
              InstruccionIfElse RESULT =null;
		Expresion cond = (Expresion)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-8)).value;
		Cuerpo cif = (Cuerpo)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-5)).value;
		Cuerpo celse = (Cuerpo)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-1)).value;
		 RESULT = new InstruccionIfElse(cond, cif, celse); 
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("INST_IFELSE",16, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // INST_WHILE ::= WHILE PARAPERTURA Exp0 PARCIERRE LLAVEAPERTURA CUER LLAVECIERRE 
            {
              InstruccionWhile RESULT =null;
		Expresion cond = (Expresion)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-4)).value;
		Cuerpo cwhile = (Cuerpo)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-1)).value;
		 RESULT = new InstruccionWhile(cond, cwhile); 
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("INST_WHILE",17, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // INST_FOR ::= FOR PARAPERTURA INST_ASIG PUNTOCOMA Exp0 PUNTOCOMA INST_ASIG PARCIERRE LLAVEAPERTURA CUER LLAVECIERRE 
            {
              InstruccionFor RESULT =null;
		InstruccionAsignacion ini = (InstruccionAsignacion)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-8)).value;
		Expresion cond = (Expresion)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-6)).value;
		InstruccionAsignacion paso = (InstruccionAsignacion)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-4)).value;
		Cuerpo cfor = (Cuerpo)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-1)).value;
		 RESULT = new InstruccionFor(ini.getId(), ini.getValor(), cond, paso.getValor(), cfor); 
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("INST_FOR",19, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // INST_FOR ::= FOR PARAPERTURA INST_DECLASIG PUNTOCOMA Exp0 PUNTOCOMA INST_ASIG PARCIERRE LLAVEAPERTURA CUER LLAVECIERRE 
            {
              InstruccionFor RESULT =null;
		InstruccionDeclaracion ini = (InstruccionDeclaracion)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-8)).value;
		Expresion cond = (Expresion)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-6)).value;
		InstruccionAsignacion paso = (InstruccionAsignacion)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-4)).value;
		Cuerpo cfor = (Cuerpo)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-1)).value;
		 RESULT = new InstruccionFor(ini.getId(), ini.getValor(), cond, paso.getValor(), cfor); 
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("INST_FOR",19, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // INST_ASIG ::= Ident IGUAL Exp0 
            {
              InstruccionAsignacion RESULT =null;
		Id id = (Id)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-2)).value;
		Expresion exp = (Expresion)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.peek()).value;
		 RESULT = new InstruccionAsignacion(id, exp); 
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("INST_ASIG",20, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // INST_DECL ::= Tip Ident 
            {
              InstruccionDeclaracion RESULT =null;
		Tipo t = (Tipo)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-1)).value;
		Id id = (Id)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.peek()).value;
		 RESULT = new InstruccionDeclaracion(t,id); 
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("INST_DECL",21, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // INST_DECLASIG ::= Tip Ident IGUAL Exp0 
            {
              InstruccionDeclaracion RESULT =null;
		Tipo t = (Tipo)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-3)).value;
		Id id = (Id)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-2)).value;
		Expresion exp = (Expresion)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.peek()).value;
		 RESULT = new InstruccionDeclaracion(t,id,exp); 
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("INST_DECLASIG",22, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // INST_DECL_VECTOR ::= Tip_vect Ident IGUAL LLAVEAPERTURA LIST_VAL LLAVECIERRE 
            {
              InstruccionDeclVector RESULT =null;
		TipoLista t = (TipoLista)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-5)).value;
		Id id = (Id)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-4)).value;
		ArrayDeque<Expresion> list = (ArrayDeque<Expresion>)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-1)).value;
		 RESULT = new InstruccionDeclVector(t.getTipoDeLaLista(),id,t.length(),list);
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("INST_DECL_VECTOR",23, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // LIST_VAL ::= Exp0 
            {
              ArrayDeque<Expresion> RESULT =null;
		Expresion val = (Expresion)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.peek()).value;
		ArrayDeque<Expresion> list = new ArrayDeque<Expresion>(); list.add(val); RESULT = list;
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("LIST_VAL",37, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // LIST_VAL ::= LIST_VAL COMA Exp0 
            {
              ArrayDeque<Expresion> RESULT =null;
		ArrayDeque<Expresion> list = (ArrayDeque<Expresion>)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-2)).value;
		Expresion val = (Expresion)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.peek()).value;
		list.add(val); RESULT = list;
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("LIST_VAL",37, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // ARGUMENTOS_INI ::= Tip Ident ARGUMENTOS 
            {
              ArrayDeque<Tipo_Id> RESULT =null;
		Tipo t = (Tipo)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-2)).value;
		Id id = (Id)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-1)).value;
		ArrayDeque<Tipo_Id> arg = (ArrayDeque<Tipo_Id>)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.peek()).value;
		 arg.addFirst(new Tipo_Id(t, id)); RESULT = arg; 
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("ARGUMENTOS_INI",33, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // ARGUMENTOS_INI ::= Tip AMPERSAND Ident ARGUMENTOS 
            {
              ArrayDeque<Tipo_Id> RESULT =null;
		Tipo t = (Tipo)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-3)).value;
		Id id = (Id)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-1)).value;
		ArrayDeque<Tipo_Id> arg = (ArrayDeque<Tipo_Id>)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.peek()).value;
		 arg.addFirst(new Tipo_Id(t, id)); RESULT = arg; 
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("ARGUMENTOS_INI",33, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // ARGUMENTOS_INI ::= 
            {
              ArrayDeque<Tipo_Id> RESULT =null;
		 RESULT = new ArrayDeque<Tipo_Id>(); 
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("ARGUMENTOS_INI",33, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // ARGUMENTOS ::= COMA Tip Ident ARGUMENTOS 
            {
              ArrayDeque<Tipo_Id> RESULT =null;
		Tipo t = (Tipo)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-2)).value;
		Id id = (Id)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-1)).value;
		ArrayDeque<Tipo_Id> arg = (ArrayDeque<Tipo_Id>)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.peek()).value;
		 arg.addFirst(new Tipo_Id(t, id)); RESULT = arg; 
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("ARGUMENTOS",34, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // ARGUMENTOS ::= COMA Tip AMPERSAND Ident ARGUMENTOS 
            {
              ArrayDeque<Tipo_Id> RESULT =null;
		Tipo t = (Tipo)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-3)).value;
		Id id = (Id)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-1)).value;
		ArrayDeque<Tipo_Id> arg = (ArrayDeque<Tipo_Id>)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.peek()).value;
		 arg.addFirst(new Tipo_Id(t, id)); RESULT = arg; 
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("ARGUMENTOS",34, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // ARGUMENTOS ::= 
            {
              ArrayDeque<Tipo_Id> RESULT =null;
		 RESULT = new ArrayDeque<Tipo_Id>(); 
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("ARGUMENTOS",34, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // INST_DECL_FUN ::= FUNCTION Tip Ident PARAPERTURA ARGUMENTOS_INI PARCIERRE LLAVEAPERTURA CUER INST_RETURN PUNTOCOMA LLAVECIERRE 
            {
              InstruccionDeclFuncion RESULT =null;
		Tipo tipo_dev = (Tipo)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-9)).value;
		Id id = (Id)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-8)).value;
		ArrayDeque<Tipo_Id> arg = (ArrayDeque<Tipo_Id>)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-6)).value;
		Cuerpo c = (Cuerpo)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-3)).value;
		 RESULT = new InstruccionDeclFuncion(tipo_dev, id, arg, c); 
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("INST_DECL_FUN",25, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // INST_DECL_FUN ::= FUNCTION VOID Ident PARAPERTURA ARGUMENTOS_INI PARCIERRE LLAVEAPERTURA CUER LLAVECIERRE 
            {
              InstruccionDeclFuncion RESULT =null;
		Id id = (Id)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-6)).value;
		ArrayDeque<Tipo_Id> arg = (ArrayDeque<Tipo_Id>)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-4)).value;
		Cuerpo c = (Cuerpo)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-1)).value;
		 RESULT = new InstruccionDeclFuncion(null, id, arg, c); 
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("INST_DECL_FUN",25, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // ARGUMENTOSPROC_INI ::= Exp0 ARGUMENTOSPROC 
            {
              ArrayDeque<Expresion> RESULT =null;
		Expresion e = (Expresion)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-1)).value;
		ArrayDeque<Expresion> arg = (ArrayDeque<Expresion>)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.peek()).value;
		 arg.addFirst(e); RESULT = arg; 
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("ARGUMENTOSPROC_INI",35, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // ARGUMENTOSPROC_INI ::= 
            {
              ArrayDeque<Expresion> RESULT =null;
		 RESULT = new ArrayDeque<Expresion>(); 
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("ARGUMENTOSPROC_INI",35, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // ARGUMENTOSPROC ::= COMA Exp0 ARGUMENTOSPROC 
            {
              ArrayDeque<Expresion> RESULT =null;
		Expresion e = (Expresion)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-1)).value;
		ArrayDeque<Expresion> arg = (ArrayDeque<Expresion>)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.peek()).value;
		 arg.addFirst(e); RESULT = arg; 
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("ARGUMENTOSPROC",36, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // ARGUMENTOSPROC ::= 
            {
              ArrayDeque<Expresion> RESULT =null;
		 RESULT = new ArrayDeque<Expresion>(); 
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("ARGUMENTOSPROC",36, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // INST_RETURN ::= RETURN Exp0 
            {
              InstruccionReturn RESULT =null;
		Expresion e = (Expresion)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.peek()).value;
		 RESULT = new InstruccionReturn(e); 
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("INST_RETURN",27, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // INST_CALL_PROC ::= Ident PARAPERTURA ARGUMENTOSPROC_INI PARCIERRE 
            {
              InstruccionLlamadaFuncion RESULT =null;
		Id id = (Id)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-3)).value;
		ArrayDeque<Expresion> arg = (ArrayDeque<Expresion>)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-1)).value;
		 RESULT = new InstruccionLlamadaFuncion(id, arg); 
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("INST_CALL_PROC",26, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // INST_TYPEDEF ::= TYPEDEF Tip Ident 
            {
              InstruccionTypedef RESULT =null;
		Tipo tipo = (Tipo)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-1)).value;
		Id id = (Id)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.peek()).value;
		 RESULT = new InstruccionTypedef(tipo, id); 
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("INST_TYPEDEF",28, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // INST_STRUCT ::= STRUCT Ident LLAVEAPERTURA CAMPOS_STRUCT LLAVECIERRE 
            {
              InstruccionDeclStruct RESULT =null;
		Object struct = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-4)).value;
		Id nombre = (Id)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-3)).value;
		ArrayDeque<Instruccion> lista = (ArrayDeque<Instruccion>)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-1)).value;
		RESULT = new InstruccionDeclStruct(nombre, lista);
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("INST_STRUCT",24, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // CAMPOS_STRUCT ::= INST_DECL PUNTOCOMA CAMPOS_STRUCT 
            {
              ArrayDeque<Instruccion> RESULT =null;
		InstruccionDeclaracion decl = (InstruccionDeclaracion)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-2)).value;
		ArrayDeque<Instruccion> lista = (ArrayDeque<Instruccion>)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.peek()).value;
		lista.add(decl); RESULT = lista;
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("CAMPOS_STRUCT",38, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 85: // CAMPOS_STRUCT ::= INST_DECL_VECTOR PUNTOCOMA CAMPOS_STRUCT 
            {
              ArrayDeque<Instruccion> RESULT =null;
		InstruccionDeclVector decl = (InstruccionDeclVector)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-2)).value;
		ArrayDeque<Instruccion> lista = (ArrayDeque<Instruccion>)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.peek()).value;
		lista.add(decl); RESULT = lista;
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("CAMPOS_STRUCT",38, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 86: // CAMPOS_STRUCT ::= 
            {
              ArrayDeque<Instruccion> RESULT =null;
		RESULT = new ArrayDeque<Instruccion>();
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("CAMPOS_STRUCT",38, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 87: // Ident ::= IDEN 
            {
              Id RESULT =null;
		String id = (String)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.peek()).value;
		 RESULT = new Id(id); 
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("Ident",13, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 88: // EXPR_LLAM_FUN ::= Ident PARAPERTURA ARGUMENTOSPROC_INI PARCIERRE 
            {
              ExpresionLlamadaFuncion RESULT =null;
		Id id = (Id)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-3)).value;
		ArrayDeque<Expresion> arg = (ArrayDeque<Expresion>)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-1)).value;
		 RESULT = new ExpresionLlamadaFuncion(id, arg); 
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("EXPR_LLAM_FUN",29, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 89: // EXPR_ACC_VECT ::= Ident CORCHAPERTURA Exp0 CORCHCIERRE 
            {
              ListIndex RESULT =null;
		Id id = (Id)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-3)).value;
		Expresion idx = (Expresion)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-1)).value;
		 RESULT = new ListIndex(id, idx); 
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("EXPR_ACC_VECT",30, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 90: // Tip ::= INTEGER 
            {
              Tipo RESULT =null;
		 RESULT = new Tipo(Tipos.INTEGER); 
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("Tip",31, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 91: // Tip ::= BOOLEAN 
            {
              Tipo RESULT =null;
		 RESULT = new Tipo(Tipos.BOOLEAN); 
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("Tip",31, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 92: // Tip_vect ::= LIST MENOR Tip COMA NUM MAYOR 
            {
              TipoLista RESULT =null;
		Tipo t = (Tipo)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-3)).value;
		String n = (String)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-1)).value;
		 RESULT = new TipoLista(t, n); 
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("Tip_vect",32, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 93: // Tip_vect ::= LIST MENOR Tip_vect COMA NUM MAYOR 
            {
              TipoLista RESULT =null;
		TipoLista t = (TipoLista)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-3)).value;
		String n = (String)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-1)).value;
		 RESULT = new TipoLista(t, n); 
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("Tip_vect",32, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 94: // Tip ::= Ident 
            {
              Tipo RESULT =null;
		Id nombreStruct = (Id)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.peek()).value;
		 RESULT = new TipoStruct(nombreStruct.getS()); 
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("Tip",31, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 95: // Tip ::= Tip ASTERISCO 
            {
              Tipo RESULT =null;
		Tipo t = (Tipo)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-1)).value;
		 RESULT = new TipoPuntero(t); 
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("Tip",31, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$AnalizadorSintacticoTiny$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$AnalizadorSintacticoTiny$do_action(
    int                        CUP$AnalizadorSintacticoTiny$act_num,
    java_cup.runtime.lr_parser CUP$AnalizadorSintacticoTiny$parser,
    java.util.Stack            CUP$AnalizadorSintacticoTiny$stack,
    int                        CUP$AnalizadorSintacticoTiny$top)
    throws java.lang.Exception
    {
              return CUP$AnalizadorSintacticoTiny$do_action_part00000000(
                               CUP$AnalizadorSintacticoTiny$act_num,
                               CUP$AnalizadorSintacticoTiny$parser,
                               CUP$AnalizadorSintacticoTiny$stack,
                               CUP$AnalizadorSintacticoTiny$top);
    }
}

