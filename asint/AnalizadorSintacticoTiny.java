
//----------------------------------------------------
// The following code was generated by CUP v0.11b beta 20140220
// Fri Apr 23 14:04:00 CEST 2021
//----------------------------------------------------

package asint;

import java_cup.runtime.*;
import alex.AnalizadorLexicoTiny;
import alex.UnidadLexica;
import errors.GestionErrores;
import ast.*;
import ast.e.*;
import ast.i.*;
import ast.t.*;
import java.util.ArrayDeque;
import java_cup.runtime.ComplexSymbolFactory.Location;

/** CUP v0.11b beta 20140220 generated parser.
  * @version Fri Apr 23 14:04:00 CEST 2021
  */
public class AnalizadorSintacticoTiny extends java_cup.runtime.lr_parser {

  /** Default constructor. */
  public AnalizadorSintacticoTiny() {super();}

  /** Constructor which sets the default scanner. */
  public AnalizadorSintacticoTiny(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public AnalizadorSintacticoTiny(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\201\000\002\002\007\000\002\002\004\000\002\003" +
    "\004\000\002\003\005\000\002\003\005\000\002\003\005" +
    "\000\002\003\005\000\002\003\005\000\002\003\005\000" +
    "\002\003\005\000\002\003\005\000\002\003\005\000\002" +
    "\003\002\000\002\004\005\000\002\004\005\000\002\004" +
    "\005\000\002\004\005\000\002\004\005\000\002\004\005" +
    "\000\002\004\005\000\002\004\004\000\002\004\004\000" +
    "\002\004\004\000\002\004\004\000\002\004\005\000\002" +
    "\004\002\000\002\007\005\000\002\007\003\000\002\010" +
    "\005\000\002\010\003\000\002\011\004\000\002\011\003" +
    "\000\002\012\005\000\002\012\005\000\002\012\003\000" +
    "\002\013\005\000\002\013\005\000\002\013\005\000\002" +
    "\013\005\000\002\013\003\000\002\014\005\000\002\014" +
    "\005\000\002\014\003\000\002\015\005\000\002\015\005" +
    "\000\002\015\005\000\002\015\003\000\002\016\003\000" +
    "\002\016\003\000\002\016\003\000\002\016\003\000\002" +
    "\016\003\000\002\016\003\000\002\005\005\000\002\005" +
    "\005\000\002\005\005\000\002\005\005\000\002\005\005" +
    "\000\002\005\005\000\002\005\005\000\002\005\004\000" +
    "\002\005\004\000\002\005\004\000\002\005\004\000\002" +
    "\005\005\000\002\005\002\000\002\022\011\000\002\023" +
    "\015\000\002\024\011\000\002\026\015\000\002\026\015" +
    "\000\002\027\005\000\002\033\007\000\002\054\003\000" +
    "\002\054\005\000\002\030\004\000\002\034\004\000\002" +
    "\031\006\000\002\034\010\000\002\053\003\000\002\053" +
    "\005\000\002\032\005\000\002\047\005\000\002\047\006" +
    "\000\002\047\005\000\002\047\006\000\002\047\002\000" +
    "\002\050\006\000\002\050\007\000\002\050\006\000\002" +
    "\050\007\000\002\050\002\000\002\006\005\000\002\006" +
    "\005\000\002\006\005\000\002\006\005\000\002\006\005" +
    "\000\002\006\005\000\002\006\005\000\002\006\004\000" +
    "\002\006\004\000\002\006\004\000\002\006\004\000\002" +
    "\006\005\000\002\006\005\000\002\006\002\000\002\036" +
    "\013\000\002\036\013\000\002\036\013\000\002\051\004" +
    "\000\002\051\002\000\002\052\005\000\002\052\002\000" +
    "\002\040\004\000\002\037\006\000\002\041\005\000\002" +
    "\042\010\000\002\035\007\000\002\055\005\000\002\055" +
    "\005\000\002\055\002\000\002\020\003\000\002\043\006" +
    "\000\002\044\006\000\002\045\003\000\002\045\003\000" +
    "\002\046\010\000\002\046\010\000\002\045\003" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\u015b\000\024\005\012\006\023\007\005\010\013\013" +
    "\024\014\ufff5\026\020\027\027\030\006\001\002\000\004" +
    "\063\u015c\001\002\000\004\005\012\001\002\000\004\043" +
    "\u0147\001\002\000\004\005\012\001\002\000\004\002\u013e" +
    "\001\002\000\024\005\012\006\023\007\005\010\013\013" +
    "\024\014\ufff5\026\020\027\027\030\006\001\002\000\064" +
    "\005\uff88\035\uff88\036\uff88\037\uff88\040\uff88\041\uff88\042" +
    "\uff88\043\uff88\044\uff88\045\uff88\046\uff88\047\uff88\050\uff88" +
    "\051\uff88\052\uff88\054\uff88\055\uff88\056\uff88\057\uff88\060" +
    "\uff88\061\uff88\062\uff88\063\uff88\067\uff88\071\uff88\001\002" +
    "\000\014\005\012\012\351\026\020\027\027\030\006\001" +
    "\002\000\004\014\164\001\002\000\004\063\162\001\002" +
    "\000\004\063\160\001\002\000\004\063\156\001\002\000" +
    "\012\005\uff84\062\uff84\067\uff84\071\uff84\001\002\000\004" +
    "\063\154\001\002\000\004\063\152\001\002\000\010\005" +
    "\012\026\020\027\027\001\002\000\004\054\142\001\002" +
    "\000\010\005\uff81\046\132\071\uff81\001\002\000\006\005" +
    "\012\071\042\001\002\000\012\005\uff85\062\uff85\067\uff85" +
    "\071\uff85\001\002\000\004\063\037\001\002\000\004\063" +
    "\035\001\002\000\004\063\033\001\002\000\024\005\012" +
    "\006\023\007\005\010\013\013\024\014\ufff5\026\020\027" +
    "\027\030\006\001\002\000\004\014\ufffc\001\002\000\024" +
    "\005\012\006\023\007\005\010\013\013\024\014\ufff5\026" +
    "\020\027\027\030\006\001\002\000\004\014\ufffa\001\002" +
    "\000\024\005\012\006\023\007\005\010\013\013\024\014" +
    "\ufff5\026\020\027\027\030\006\001\002\000\004\014\ufff6" +
    "\001\002\000\006\046\044\063\uffb6\001\002\000\004\005" +
    "\012\001\002\000\004\063\uffb0\001\002\000\014\004\045" +
    "\005\012\032\050\033\052\053\056\001\002\000\046\035" +
    "\uffd2\036\uffd2\037\uffd2\040\uffd2\041\uffd2\042\uffd2\043\uffd2" +
    "\044\uffd2\045\uffd2\047\uffd2\050\uffd2\051\uffd2\052\uffd2\055" +
    "\uffd2\057\uffd2\061\uffd2\062\uffd2\063\uffd2\001\002\000\006" +
    "\052\120\063\uffb4\001\002\000\052\035\uffcf\036\uffcf\037" +
    "\uffcf\040\uffcf\041\uffcf\042\uffcf\043\uffcf\044\uffcf\045\uffcf" +
    "\047\uffcf\050\uffcf\051\uffcf\052\uffcf\054\115\055\uffcf\057" +
    "\uffcf\060\116\061\uffcf\062\uffcf\063\uffcf\001\002\000\046" +
    "\035\uffd1\036\uffd1\037\uffd1\040\uffd1\041\uffd1\042\uffd1\043" +
    "\uffd1\044\uffd1\045\uffd1\047\uffd1\050\uffd1\051\uffd1\052\uffd1" +
    "\055\uffd1\057\uffd1\061\uffd1\062\uffd1\063\uffd1\001\002\000" +
    "\046\035\uffce\036\uffce\037\uffce\040\uffce\041\uffce\042\uffce" +
    "\043\uffce\044\uffce\045\uffce\047\uffce\050\uffce\051\uffce\052" +
    "\uffce\055\uffce\057\uffce\061\uffce\062\uffce\063\uffce\001\002" +
    "\000\046\035\uffd0\036\uffd0\037\uffd0\040\uffd0\041\uffd0\042" +
    "\uffd0\043\uffd0\044\uffd0\045\uffd0\047\uffd0\050\uffd0\051\uffd0" +
    "\052\uffd0\055\uffd0\057\uffd0\061\uffd0\062\uffd0\063\uffd0\001" +
    "\002\000\046\035\uffd3\036\uffd3\037\uffd3\040\uffd3\041\uffd3" +
    "\042\uffd3\043\uffd3\044\uffd3\045\uffd3\047\uffd3\050\uffd3\051" +
    "\uffd3\052\uffd3\055\uffd3\057\uffd3\061\uffd3\062\uffd3\063\uffd3" +
    "\001\002\000\046\035\uffcd\036\uffcd\037\uffcd\040\uffcd\041" +
    "\uffcd\042\uffcd\043\uffcd\044\uffcd\045\uffcd\047\uffcd\050\uffcd" +
    "\051\uffcd\052\uffcd\055\uffcd\057\uffcd\061\uffcd\062\uffcd\063" +
    "\uffcd\001\002\000\046\035\uffd7\036\uffd7\037\102\040\103" +
    "\041\101\042\uffd7\043\uffd7\044\uffd7\045\uffd7\047\uffd7\050" +
    "\uffd7\051\uffd7\052\uffd7\055\uffd7\057\uffd7\061\uffd7\062\uffd7" +
    "\063\uffd7\001\002\000\014\004\045\005\012\032\050\033" +
    "\052\053\056\001\002\000\040\035\077\036\076\042\uffda" +
    "\043\uffda\044\uffda\045\uffda\047\uffda\050\uffda\051\uffda\052" +
    "\uffda\055\uffda\057\uffda\061\uffda\062\uffda\063\uffda\001\002" +
    "\000\034\042\074\043\073\044\071\045\072\047\uffdf\050" +
    "\uffdf\051\uffdf\052\uffdf\055\uffdf\057\uffdf\061\uffdf\062\uffdf" +
    "\063\uffdf\001\002\000\024\047\067\050\066\051\uffe2\052" +
    "\uffe2\055\uffe2\057\uffe2\061\uffe2\062\uffe2\063\uffe2\001\002" +
    "\000\020\051\uffe4\052\uffe4\055\uffe4\057\uffe4\061\uffe4\062" +
    "\uffe4\063\uffe4\001\002\000\020\051\064\052\uffe6\055\uffe6" +
    "\057\uffe6\061\uffe6\062\uffe6\063\uffe6\001\002\000\014\004" +
    "\045\005\012\032\050\033\052\053\056\001\002\000\020" +
    "\051\uffe5\052\uffe5\055\uffe5\057\uffe5\061\uffe5\062\uffe5\063" +
    "\uffe5\001\002\000\012\004\045\005\012\032\050\033\052" +
    "\001\002\000\012\004\045\005\012\032\050\033\052\001" +
    "\002\000\034\042\074\043\073\044\071\045\072\047\uffe1" +
    "\050\uffe1\051\uffe1\052\uffe1\055\uffe1\057\uffe1\061\uffe1\062" +
    "\uffe1\063\uffe1\001\002\000\012\004\045\005\012\032\050" +
    "\033\052\001\002\000\012\004\045\005\012\032\050\033" +
    "\052\001\002\000\012\004\045\005\012\032\050\033\052" +
    "\001\002\000\012\004\045\005\012\032\050\033\052\001" +
    "\002\000\040\035\077\036\076\042\uffdd\043\uffdd\044\uffdd" +
    "\045\uffdd\047\uffdd\050\uffdd\051\uffdd\052\uffdd\055\uffdd\057" +
    "\uffdd\061\uffdd\062\uffdd\063\uffdd\001\002\000\012\004\045" +
    "\005\012\032\050\033\052\001\002\000\012\004\045\005" +
    "\012\032\050\033\052\001\002\000\046\035\uffd9\036\uffd9" +
    "\037\102\040\103\041\101\042\uffd9\043\uffd9\044\uffd9\045" +
    "\uffd9\047\uffd9\050\uffd9\051\uffd9\052\uffd9\055\uffd9\057\uffd9" +
    "\061\uffd9\062\uffd9\063\uffd9\001\002\000\012\004\045\005" +
    "\012\032\050\033\052\001\002\000\012\004\045\005\012" +
    "\032\050\033\052\001\002\000\012\004\045\005\012\032" +
    "\050\033\052\001\002\000\046\035\uffd5\036\uffd5\037\uffd5" +
    "\040\uffd5\041\uffd5\042\uffd5\043\uffd5\044\uffd5\045\uffd5\047" +
    "\uffd5\050\uffd5\051\uffd5\052\uffd5\055\uffd5\057\uffd5\061\uffd5" +
    "\062\uffd5\063\uffd5\001\002\000\046\035\uffd6\036\uffd6\037" +
    "\uffd6\040\uffd6\041\uffd6\042\uffd6\043\uffd6\044\uffd6\045\uffd6" +
    "\047\uffd6\050\uffd6\051\uffd6\052\uffd6\055\uffd6\057\uffd6\061" +
    "\uffd6\062\uffd6\063\uffd6\001\002\000\046\035\uffd4\036\uffd4" +
    "\037\uffd4\040\uffd4\041\uffd4\042\uffd4\043\uffd4\044\uffd4\045" +
    "\uffd4\047\uffd4\050\uffd4\051\uffd4\052\uffd4\055\uffd4\057\uffd4" +
    "\061\uffd4\062\uffd4\063\uffd4\001\002\000\046\035\uffd8\036" +
    "\uffd8\037\102\040\103\041\101\042\uffd8\043\uffd8\044\uffd8" +
    "\045\uffd8\047\uffd8\050\uffd8\051\uffd8\052\uffd8\055\uffd8\057" +
    "\uffd8\061\uffd8\062\uffd8\063\uffd8\001\002\000\040\035\077" +
    "\036\076\042\uffde\043\uffde\044\uffde\045\uffde\047\uffde\050" +
    "\uffde\051\uffde\052\uffde\055\uffde\057\uffde\061\uffde\062\uffde" +
    "\063\uffde\001\002\000\040\035\077\036\076\042\uffdb\043" +
    "\uffdb\044\uffdb\045\uffdb\047\uffdb\050\uffdb\051\uffdb\052\uffdb" +
    "\055\uffdb\057\uffdb\061\uffdb\062\uffdb\063\uffdb\001\002\000" +
    "\040\035\077\036\076\042\uffdc\043\uffdc\044\uffdc\045\uffdc" +
    "\047\uffdc\050\uffdc\051\uffdc\052\uffdc\055\uffdc\057\uffdc\061" +
    "\uffdc\062\uffdc\063\uffdc\001\002\000\034\042\074\043\073" +
    "\044\071\045\072\047\uffe0\050\uffe0\051\uffe0\052\uffe0\055" +
    "\uffe0\057\uffe0\061\uffe0\062\uffe0\063\uffe0\001\002\000\020" +
    "\051\uffe3\052\uffe3\055\uffe3\057\uffe3\061\uffe3\062\uffe3\063" +
    "\uffe3\001\002\000\016\004\045\005\012\032\050\033\052" +
    "\053\056\055\uff93\001\002\000\014\004\045\005\012\032" +
    "\050\033\052\053\056\001\002\000\006\052\120\061\121" +
    "\001\002\000\014\004\045\005\012\032\050\033\052\053" +
    "\056\001\002\000\046\035\uff86\036\uff86\037\uff86\040\uff86" +
    "\041\uff86\042\uff86\043\uff86\044\uff86\045\uff86\047\uff86\050" +
    "\uff86\051\uff86\052\uff86\055\uff86\057\uff86\061\uff86\062\uff86" +
    "\063\uff86\001\002\000\020\051\064\052\uffe7\055\uffe7\057" +
    "\uffe7\061\uffe7\062\uffe7\063\uffe7\001\002\000\010\052\120" +
    "\055\uff91\062\126\001\002\000\004\055\125\001\002\000" +
    "\046\035\uff87\036\uff87\037\uff87\040\uff87\041\uff87\042\uff87" +
    "\043\uff87\044\uff87\045\uff87\047\uff87\050\uff87\051\uff87\052" +
    "\uff87\055\uff87\057\uff87\061\uff87\062\uff87\063\uff87\001\002" +
    "\000\014\004\045\005\012\032\050\033\052\053\056\001" +
    "\002\000\004\055\uff94\001\002\000\010\052\120\055\uff91" +
    "\062\126\001\002\000\004\055\uff92\001\002\000\016\004" +
    "\045\005\012\032\050\033\052\053\056\056\134\001\002" +
    "\000\010\052\120\055\uffba\063\uffba\001\002\000\014\004" +
    "\045\005\012\032\050\033\052\053\056\001\002\000\010" +
    "\052\120\057\uffb8\062\uffb8\001\002\000\006\057\140\062" +
    "\137\001\002\000\014\004\045\005\012\032\050\033\052" +
    "\053\056\001\002\000\004\063\uffb9\001\002\000\010\052" +
    "\120\057\uffb7\062\uffb7\001\002\000\004\005\012\001\002" +
    "\000\004\062\144\001\002\000\004\004\145\001\002\000" +
    "\004\055\146\001\002\000\004\063\uff8d\001\002\000\010" +
    "\005\uff81\062\uff81\067\uff81\001\002\000\004\005\012\001" +
    "\002\000\004\063\uff8e\001\002\000\024\005\012\006\023" +
    "\007\005\010\013\013\024\014\ufff5\026\020\027\027\030" +
    "\006\001\002\000\004\014\ufff7\001\002\000\024\005\012" +
    "\006\023\007\005\010\013\013\024\014\ufff5\026\020\027" +
    "\027\030\006\001\002\000\004\014\ufff9\001\002\000\024" +
    "\005\012\006\023\007\005\010\013\013\024\014\ufff5\026" +
    "\020\027\027\030\006\001\002\000\004\014\ufffd\001\002" +
    "\000\024\005\012\006\023\007\005\010\013\013\024\014" +
    "\ufff5\026\020\027\027\030\006\001\002\000\004\014\ufff8" +
    "\001\002\000\024\005\012\006\023\007\005\010\013\013" +
    "\024\014\ufff5\026\020\027\027\030\006\001\002\000\004" +
    "\014\ufffb\001\002\000\004\056\165\001\002\000\024\005" +
    "\012\013\024\015\173\017\167\020\203\026\020\027\027" +
    "\030\006\057\uffe8\001\002\000\004\063\345\001\002\000" +
    "\004\054\337\001\002\000\004\057\336\001\002\000\024" +
    "\005\012\013\024\015\173\017\167\020\203\026\020\027" +
    "\027\030\006\057\uffe8\001\002\000\024\005\012\013\024" +
    "\015\173\017\167\020\203\026\020\027\027\030\006\057" +
    "\uffe8\001\002\000\004\054\322\001\002\000\004\063\320" +
    "\001\002\000\004\063\316\001\002\000\004\063\314\001" +
    "\002\000\004\063\312\001\002\000\024\005\012\013\024" +
    "\015\173\017\167\020\203\026\020\027\027\030\006\057" +
    "\uffe8\001\002\000\024\005\012\013\024\015\173\017\167" +
    "\020\203\026\020\027\027\030\006\057\uffe8\001\002\000" +
    "\012\005\uff81\046\132\054\305\071\uff81\001\002\000\004" +
    "\054\215\001\002\000\004\063\213\001\002\000\004\063" +
    "\211\001\002\000\004\063\207\001\002\000\024\005\012" +
    "\013\024\015\173\017\167\020\203\026\020\027\027\030" +
    "\006\057\uffe8\001\002\000\004\057\ufff2\001\002\000\024" +
    "\005\012\013\024\015\173\017\167\020\203\026\020\027" +
    "\027\030\006\057\uffe8\001\002\000\004\057\ufff0\001\002" +
    "\000\024\005\012\013\024\015\173\017\167\020\203\026" +
    "\020\027\027\030\006\057\uffe8\001\002\000\004\057\uffe9" +
    "\001\002\000\010\005\012\026\020\027\027\001\002\000" +
    "\004\063\275\001\002\000\006\005\uff81\046\273\001\002" +
    "\000\004\005\012\001\002\000\004\063\222\001\002\000" +
    "\014\004\045\005\012\032\050\033\052\053\056\001\002" +
    "\000\006\052\120\063\224\001\002\000\004\005\012\001" +
    "\002\000\004\046\273\001\002\000\004\055\227\001\002" +
    "\000\004\056\230\001\002\000\024\005\012\013\024\015" +
    "\173\017\167\020\203\026\020\027\027\030\006\057\uffc0" +
    "\001\002\000\004\063\271\001\002\000\024\005\012\013" +
    "\024\015\173\017\167\020\203\026\020\027\027\030\006" +
    "\057\uffc0\001\002\000\024\005\012\013\024\015\173\017" +
    "\167\020\203\026\020\027\027\030\006\057\uffc0\001\002" +
    "\000\004\063\265\001\002\000\004\063\263\001\002\000" +
    "\004\063\261\001\002\000\004\063\257\001\002\000\024" +
    "\005\012\013\024\015\173\017\167\020\203\026\020\027" +
    "\027\030\006\057\uffc0\001\002\000\024\005\012\013\024" +
    "\015\173\017\167\020\203\026\020\027\027\030\006\057" +
    "\uffc0\001\002\000\004\057\254\001\002\000\004\063\252" +
    "\001\002\000\004\063\250\001\002\000\004\063\246\001" +
    "\002\000\024\005\012\013\024\015\173\017\167\020\203" +
    "\026\020\027\027\030\006\057\uffc0\001\002\000\004\057" +
    "\uffca\001\002\000\024\005\012\013\024\015\173\017\167" +
    "\020\203\026\020\027\027\030\006\057\uffc0\001\002\000" +
    "\004\057\uffc8\001\002\000\024\005\012\013\024\015\173" +
    "\017\167\020\203\026\020\027\027\030\006\057\uffc0\001" +
    "\002\000\004\057\uffc1\001\002\000\026\005\uffbc\011\uffbc" +
    "\013\uffbc\015\uffbc\017\uffbc\020\uffbc\026\uffbc\027\uffbc\030" +
    "\uffbc\057\uffbc\001\002\000\004\057\uffc2\001\002\000\004" +
    "\057\uffc3\001\002\000\024\005\012\013\024\015\173\017" +
    "\167\020\203\026\020\027\027\030\006\057\uffc0\001\002" +
    "\000\004\057\uffc7\001\002\000\024\005\012\013\024\015" +
    "\173\017\167\020\203\026\020\027\027\030\006\057\uffc0" +
    "\001\002\000\004\057\uffcb\001\002\000\024\005\012\013" +
    "\024\015\173\017\167\020\203\026\020\027\027\030\006" +
    "\057\uffc0\001\002\000\004\057\uffc9\001\002\000\024\005" +
    "\012\013\024\015\173\017\167\020\203\026\020\027\027" +
    "\030\006\057\uffc0\001\002\000\004\057\uffc6\001\002\000" +
    "\004\057\uffc5\001\002\000\004\057\uffc4\001\002\000\024" +
    "\005\012\013\024\015\173\017\167\020\203\026\020\027" +
    "\027\030\006\057\uffc0\001\002\000\004\057\uffcc\001\002" +
    "\000\014\004\045\005\012\032\050\033\052\053\056\001" +
    "\002\000\004\046\044\001\002\000\014\004\045\005\012" +
    "\032\050\033\052\053\056\001\002\000\006\052\120\063" +
    "\277\001\002\000\004\005\012\001\002\000\004\055\301" +
    "\001\002\000\004\056\302\001\002\000\024\005\012\013" +
    "\024\015\173\017\167\020\203\026\020\027\027\030\006" +
    "\057\uffc0\001\002\000\004\057\304\001\002\000\026\005" +
    "\uffbb\011\uffbb\013\uffbb\015\uffbb\017\uffbb\020\uffbb\026\uffbb" +
    "\027\uffbb\030\uffbb\057\uffbb\001\002\000\016\004\045\005" +
    "\012\032\050\033\052\053\056\055\uff93\001\002\000\004" +
    "\055\307\001\002\000\004\063\uff8f\001\002\000\004\057" +
    "\uffea\001\002\000\004\057\uffeb\001\002\000\024\005\012" +
    "\013\024\015\173\017\167\020\203\026\020\027\027\030" +
    "\006\057\uffe8\001\002\000\004\057\uffef\001\002\000\024" +
    "\005\012\013\024\015\173\017\167\020\203\026\020\027" +
    "\027\030\006\057\uffe8\001\002\000\004\057\ufff3\001\002" +
    "\000\024\005\012\013\024\015\173\017\167\020\203\026" +
    "\020\027\027\030\006\057\uffe8\001\002\000\004\057\ufff1" +
    "\001\002\000\024\005\012\013\024\015\173\017\167\020" +
    "\203\026\020\027\027\030\006\057\uffe8\001\002\000\004" +
    "\057\uffee\001\002\000\014\004\045\005\012\032\050\033" +
    "\052\053\056\001\002\000\006\052\120\055\324\001\002" +
    "\000\004\056\325\001\002\000\024\005\012\013\024\015" +
    "\173\017\167\020\203\026\020\027\027\030\006\057\uffc0" +
    "\001\002\000\004\057\327\001\002\000\030\005\uffbf\011" +
    "\uffbf\013\uffbf\015\uffbf\016\330\017\uffbf\020\uffbf\026\uffbf" +
    "\027\uffbf\030\uffbf\057\uffbf\001\002\000\004\056\331\001" +
    "\002\000\024\005\012\013\024\015\173\017\167\020\203" +
    "\026\020\027\027\030\006\057\uffc0\001\002\000\004\057" +
    "\333\001\002\000\026\005\uffbe\011\uffbe\013\uffbe\015\uffbe" +
    "\017\uffbe\020\uffbe\026\uffbe\027\uffbe\030\uffbe\057\uffbe\001" +
    "\002\000\004\057\uffec\001\002\000\004\057\uffed\001\002" +
    "\000\004\002\001\001\002\000\014\004\045\005\012\032" +
    "\050\033\052\053\056\001\002\000\006\052\120\055\341" +
    "\001\002\000\004\056\342\001\002\000\024\005\012\013" +
    "\024\015\173\017\167\020\203\026\020\027\027\030\006" +
    "\057\uffc0\001\002\000\004\057\344\001\002\000\026\005" +
    "\uffbd\011\uffbd\013\uffbd\015\uffbd\017\uffbd\020\uffbd\026\uffbd" +
    "\027\uffbd\030\uffbd\057\uffbd\001\002\000\024\005\012\013" +
    "\024\015\173\017\167\020\203\026\020\027\027\030\006" +
    "\057\uffe8\001\002\000\004\057\ufff4\001\002\000\004\005" +
    "\012\001\002\000\004\005\012\001\002\000\004\005\012" +
    "\001\002\000\004\054\353\001\002\000\014\005\012\026" +
    "\020\027\027\030\006\055\uffab\001\002\000\004\055\u0106" +
    "\001\002\000\006\005\012\067\u0101\001\002\000\006\005" +
    "\012\067\357\001\002\000\004\005\012\001\002\000\006" +
    "\055\uffa6\062\361\001\002\000\012\005\012\026\020\027" +
    "\027\030\006\001\002\000\004\055\uffad\001\002\000\006" +
    "\005\012\067\372\001\002\000\006\005\012\067\365\001" +
    "\002\000\004\005\012\001\002\000\006\055\uffa6\062\361" +
    "\001\002\000\004\055\uffa8\001\002\000\006\055\uffa6\062" +
    "\361\001\002\000\004\055\uffa7\001\002\000\004\005\012" +
    "\001\002\000\006\055\uffa6\062\361\001\002\000\004\055" +
    "\uffaa\001\002\000\006\055\uffa6\062\361\001\002\000\004" +
    "\055\uffa9\001\002\000\006\055\uffa6\062\361\001\002\000" +
    "\004\055\uffac\001\002\000\004\005\012\001\002\000\006" +
    "\055\uffa6\062\361\001\002\000\004\055\uffaf\001\002\000" +
    "\006\055\uffa6\062\361\001\002\000\004\055\uffae\001\002" +
    "\000\004\056\u0107\001\002\000\024\005\012\013\024\015" +
    "\173\017\167\020\203\026\020\027\027\030\006\057\uffc0" +
    "\001\002\000\004\057\u0109\001\002\000\024\005\uff95\006" +
    "\uff95\007\uff95\010\uff95\013\uff95\014\uff95\026\uff95\027\uff95" +
    "\030\uff95\001\002\000\004\054\u010b\001\002\000\014\005" +
    "\012\026\020\027\027\030\006\055\uffab\001\002\000\004" +
    "\055\u010d\001\002\000\004\056\u010e\001\002\000\026\005" +
    "\012\011\u0110\013\024\015\173\017\167\020\203\026\020" +
    "\027\027\030\006\057\uff98\001\002\000\004\063\u0134\001" +
    "\002\000\014\004\045\005\012\032\050\033\052\053\056" +
    "\001\002\000\026\005\012\011\u0110\013\024\015\173\017" +
    "\167\020\203\026\020\027\027\030\006\057\uff98\001\002" +
    "\000\026\005\012\011\u0110\013\024\015\173\017\167\020" +
    "\203\026\020\027\027\030\006\057\uff98\001\002\000\004" +
    "\063\u012f\001\002\000\004\063\u012d\001\002\000\004\063" +
    "\u012b\001\002\000\004\063\u0129\001\002\000\026\005\012" +
    "\011\u0110\013\024\015\173\017\167\020\203\026\020\027" +
    "\027\030\006\057\uff98\001\002\000\026\005\012\011\u0110" +
    "\013\024\015\173\017\167\020\203\026\020\027\027\030" +
    "\006\057\uff98\001\002\000\004\063\u0125\001\002\000\004" +
    "\063\u0123\001\002\000\004\063\u0121\001\002\000\004\063" +
    "\u011f\001\002\000\004\057\u011e\001\002\000\024\005\uff96" +
    "\006\uff96\007\uff96\010\uff96\013\uff96\014\uff96\026\uff96\027" +
    "\uff96\030\uff96\001\002\000\026\005\012\011\u0110\013\024" +
    "\015\173\017\167\020\203\026\020\027\027\030\006\057" +
    "\uff98\001\002\000\004\057\uffa3\001\002\000\026\005\012" +
    "\011\u0110\013\024\015\173\017\167\020\203\026\020\027" +
    "\027\030\006\057\uff98\001\002\000\004\057\uffa1\001\002" +
    "\000\026\005\012\011\u0110\013\024\015\173\017\167\020" +
    "\203\026\020\027\027\030\006\057\uff98\001\002\000\004" +
    "\057\uff99\001\002\000\026\005\012\011\u0110\013\024\015" +
    "\173\017\167\020\203\026\020\027\027\030\006\057\uff98" +
    "\001\002\000\004\057\uff9a\001\002\000\004\057\uff9b\001" +
    "\002\000\004\057\uff9c\001\002\000\026\005\012\011\u0110" +
    "\013\024\015\173\017\167\020\203\026\020\027\027\030" +
    "\006\057\uff98\001\002\000\004\057\uffa0\001\002\000\026" +
    "\005\012\011\u0110\013\024\015\173\017\167\020\203\026" +
    "\020\027\027\030\006\057\uff98\001\002\000\004\057\uffa4" +
    "\001\002\000\026\005\012\011\u0110\013\024\015\173\017" +
    "\167\020\203\026\020\027\027\030\006\057\uff98\001\002" +
    "\000\004\057\uff9f\001\002\000\026\005\012\011\u0110\013" +
    "\024\015\173\017\167\020\203\026\020\027\027\030\006" +
    "\057\uff98\001\002\000\004\057\uffa2\001\002\000\004\057" +
    "\uff9d\001\002\000\004\057\uff9e\001\002\000\006\052\120" +
    "\063\uff90\001\002\000\026\005\012\011\u0110\013\024\015" +
    "\173\017\167\020\203\026\020\027\027\030\006\057\uff98" +
    "\001\002\000\004\057\uffa5\001\002\000\004\054\u0137\001" +
    "\002\000\014\005\012\026\020\027\027\030\006\055\uffab" +
    "\001\002\000\004\055\u0139\001\002\000\004\056\u013a\001" +
    "\002\000\026\005\012\011\u0110\013\024\015\173\017\167" +
    "\020\203\026\020\027\027\030\006\057\uff98\001\002\000" +
    "\004\057\u013c\001\002\000\024\005\uff97\006\uff97\007\uff97" +
    "\010\uff97\013\uff97\014\uff97\026\uff97\027\uff97\030\uff97\001" +
    "\002\000\004\014\uffff\001\002\000\004\002\000\001\002" +
    "\000\006\046\u0140\063\uffb5\001\002\000\004\056\u0141\001" +
    "\002\000\014\004\045\005\012\032\050\033\052\053\056" +
    "\001\002\000\010\052\120\057\uffb2\062\uffb2\001\002\000" +
    "\006\057\u0145\062\u0144\001\002\000\014\004\045\005\012" +
    "\032\050\033\052\053\056\001\002\000\004\063\uffb3\001" +
    "\002\000\010\052\120\057\uffb1\062\uffb1\001\002\000\012" +
    "\005\012\026\020\027\027\030\006\001\002\000\004\062" +
    "\u014d\001\002\000\004\062\u014a\001\002\000\004\004\u014b" +
    "\001\002\000\004\042\u014c\001\002\000\010\005\uff82\062" +
    "\uff82\067\uff82\001\002\000\004\004\u014e\001\002\000\004" +
    "\042\u014f\001\002\000\010\005\uff83\062\uff83\067\uff83\001" +
    "\002\000\004\056\u0151\001\002\000\014\005\012\026\020" +
    "\027\027\030\006\057\uff89\001\002\000\004\057\u015b\001" +
    "\002\000\004\063\u0159\001\002\000\004\063\u0157\001\002" +
    "\000\004\005\012\001\002\000\004\063\uffb6\001\002\000" +
    "\014\005\012\026\020\027\027\030\006\057\uff89\001\002" +
    "\000\004\057\uff8b\001\002\000\014\005\012\026\020\027" +
    "\027\030\006\057\uff89\001\002\000\004\057\uff8a\001\002" +
    "\000\004\063\uff8c\001\002\000\024\005\012\006\023\007" +
    "\005\010\013\013\024\014\ufff5\026\020\027\027\030\006" +
    "\001\002\000\004\014\ufffe\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\u015b\000\040\002\007\003\013\020\024\027\030\030" +
    "\016\031\003\032\014\033\020\034\031\035\021\036\010" +
    "\041\015\042\027\045\025\046\006\001\001\000\002\001" +
    "\001\000\004\020\u014f\001\001\000\002\001\001\000\004" +
    "\020\u013e\001\001\000\002\001\001\000\036\003\u013c\020" +
    "\024\027\030\030\016\031\003\032\014\033\020\034\031" +
    "\035\021\036\010\041\015\042\027\045\025\046\006\001" +
    "\001\000\002\001\001\000\010\020\146\045\346\046\347" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\006\020\146\045\147\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\020\040\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\036\003\033\020\024\027\030\030\016" +
    "\031\003\032\014\033\020\034\031\035\021\036\010\041" +
    "\015\042\027\045\025\046\006\001\001\000\002\001\001" +
    "\000\036\003\035\020\024\027\030\030\016\031\003\032" +
    "\014\033\020\034\031\035\021\036\010\041\015\042\027" +
    "\045\025\046\006\001\001\000\002\001\001\000\036\003" +
    "\037\020\024\027\030\030\016\031\003\032\014\033\020" +
    "\034\031\035\021\036\010\041\015\042\027\045\025\046" +
    "\006\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\020\042\001\001\000\002\001\001\000\030\007\045\010" +
    "\062\011\061\012\060\013\057\014\056\015\054\016\052" +
    "\020\046\043\050\044\053\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\024\011\113\012\060\013\057" +
    "\014\056\015\054\016\052\020\046\043\050\044\053\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\024\011\064\012" +
    "\060\013\057\014\056\015\054\016\052\020\046\043\050" +
    "\044\053\001\001\000\002\001\001\000\020\013\112\014" +
    "\056\015\054\016\052\020\046\043\050\044\053\001\001" +
    "\000\020\013\067\014\056\015\054\016\052\020\046\043" +
    "\050\044\053\001\001\000\002\001\001\000\016\014\111" +
    "\015\054\016\052\020\046\043\050\044\053\001\001\000" +
    "\016\014\110\015\054\016\052\020\046\043\050\044\053" +
    "\001\001\000\016\014\107\015\054\016\052\020\046\043" +
    "\050\044\053\001\001\000\016\014\074\015\054\016\052" +
    "\020\046\043\050\044\053\001\001\000\002\001\001\000" +
    "\014\015\106\016\052\020\046\043\050\044\053\001\001" +
    "\000\014\015\077\016\052\020\046\043\050\044\053\001" +
    "\001\000\002\001\001\000\012\016\105\020\046\043\050" +
    "\044\053\001\001\000\012\016\104\020\046\043\050\044" +
    "\053\001\001\000\012\016\103\020\046\043\050\044\053" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\032\007\122\010\062\011\061\012\060\013\057\014\056" +
    "\015\054\016\052\020\046\043\050\044\053\051\123\001" +
    "\001\000\030\007\116\010\062\011\061\012\060\013\057" +
    "\014\056\015\054\016\052\020\046\043\050\044\053\001" +
    "\001\000\002\001\001\000\026\010\121\011\061\012\060" +
    "\013\057\014\056\015\054\016\052\020\046\043\050\044" +
    "\053\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\052\126\001\001\000\002\001\001\000\002\001\001\000" +
    "\030\007\127\010\062\011\061\012\060\013\057\014\056" +
    "\015\054\016\052\020\046\043\050\044\053\001\001\000" +
    "\002\001\001\000\004\052\130\001\001\000\002\001\001" +
    "\000\030\007\132\010\062\011\061\012\060\013\057\014" +
    "\056\015\054\016\052\020\046\043\050\044\053\001\001" +
    "\000\002\001\001\000\032\007\134\010\062\011\061\012" +
    "\060\013\057\014\056\015\054\016\052\020\046\043\050" +
    "\044\053\054\135\001\001\000\002\001\001\000\002\001" +
    "\001\000\030\007\140\010\062\011\061\012\060\013\057" +
    "\014\056\015\054\016\052\020\046\043\050\044\053\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\020\142" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\020\150" +
    "\001\001\000\002\001\001\000\036\003\152\020\024\027" +
    "\030\030\016\031\003\032\014\033\020\034\031\035\021" +
    "\036\010\041\015\042\027\045\025\046\006\001\001\000" +
    "\002\001\001\000\036\003\154\020\024\027\030\030\016" +
    "\031\003\032\014\033\020\034\031\035\021\036\010\041" +
    "\015\042\027\045\025\046\006\001\001\000\002\001\001" +
    "\000\036\003\156\020\024\027\030\030\016\031\003\032" +
    "\014\033\020\034\031\035\021\036\010\041\015\042\027" +
    "\045\025\046\006\001\001\000\002\001\001\000\036\003" +
    "\160\020\024\027\030\030\016\031\003\032\014\033\020" +
    "\034\031\035\021\036\010\041\015\042\027\045\025\046" +
    "\006\001\001\000\002\001\001\000\036\003\162\020\024" +
    "\027\030\030\016\031\003\032\014\033\020\034\031\035" +
    "\021\036\010\041\015\042\027\045\025\046\006\001\001" +
    "\000\002\001\001\000\002\001\001\000\042\004\167\020" +
    "\201\022\171\023\177\024\200\026\170\027\204\030\175" +
    "\031\165\032\174\033\176\034\205\037\173\042\203\045" +
    "\025\046\006\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\042\004\334\020\201\022\171\023" +
    "\177\024\200\026\170\027\204\030\175\031\165\032\174" +
    "\033\176\034\205\037\173\042\203\045\025\046\006\001" +
    "\001\000\042\004\333\020\201\022\171\023\177\024\200" +
    "\026\170\027\204\030\175\031\165\032\174\033\176\034" +
    "\205\037\173\042\203\045\025\046\006\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\042\004\310\020\201\022\171" +
    "\023\177\024\200\026\170\027\204\030\175\031\165\032" +
    "\174\033\176\034\205\037\173\042\203\045\025\046\006" +
    "\001\001\000\042\004\307\020\201\022\171\023\177\024" +
    "\200\026\170\027\204\030\175\031\165\032\174\033\176" +
    "\034\205\037\173\042\203\045\025\046\006\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\042\004\207\020\201\022" +
    "\171\023\177\024\200\026\170\027\204\030\175\031\165" +
    "\032\174\033\176\034\205\037\173\042\203\045\025\046" +
    "\006\001\001\000\002\001\001\000\042\004\211\020\201" +
    "\022\171\023\177\024\200\026\170\027\204\030\175\031" +
    "\165\032\174\033\176\034\205\037\173\042\203\045\025" +
    "\046\006\001\001\000\002\001\001\000\042\004\213\020" +
    "\201\022\171\023\177\024\200\026\170\027\204\030\175" +
    "\031\165\032\174\033\176\034\205\037\173\042\203\045" +
    "\025\046\006\001\001\000\002\001\001\000\012\020\216" +
    "\027\220\031\215\045\217\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\020\273\001\001\000\002\001\001" +
    "\000\030\007\222\010\062\011\061\012\060\013\057\014" +
    "\056\015\054\016\052\020\046\043\050\044\053\001\001" +
    "\000\002\001\001\000\006\020\224\027\225\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\042" +
    "\005\241\020\201\022\231\023\237\024\240\026\232\027" +
    "\243\030\235\031\230\032\234\033\236\034\244\037\233" +
    "\042\242\045\025\046\006\001\001\000\002\001\001\000" +
    "\042\005\267\020\201\022\231\023\237\024\240\026\232" +
    "\027\243\030\235\031\230\032\234\033\236\034\244\037" +
    "\233\042\242\045\025\046\006\001\001\000\042\005\266" +
    "\020\201\022\231\023\237\024\240\026\232\027\243\030" +
    "\235\031\230\032\234\033\236\034\244\037\233\042\242" +
    "\045\025\046\006\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\042\005\255" +
    "\020\201\022\231\023\237\024\240\026\232\027\243\030" +
    "\235\031\230\032\234\033\236\034\244\037\233\042\242" +
    "\045\025\046\006\001\001\000\042\005\254\020\201\022" +
    "\231\023\237\024\240\026\232\027\243\030\235\031\230" +
    "\032\234\033\236\034\244\037\233\042\242\045\025\046" +
    "\006\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\042\005\246\020\201\022" +
    "\231\023\237\024\240\026\232\027\243\030\235\031\230" +
    "\032\234\033\236\034\244\037\233\042\242\045\025\046" +
    "\006\001\001\000\002\001\001\000\042\005\250\020\201" +
    "\022\231\023\237\024\240\026\232\027\243\030\235\031" +
    "\230\032\234\033\236\034\244\037\233\042\242\045\025" +
    "\046\006\001\001\000\002\001\001\000\042\005\252\020" +
    "\201\022\231\023\237\024\240\026\232\027\243\030\235" +
    "\031\230\032\234\033\236\034\244\037\233\042\242\045" +
    "\025\046\006\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\042\005\257\020" +
    "\201\022\231\023\237\024\240\026\232\027\243\030\235" +
    "\031\230\032\234\033\236\034\244\037\233\042\242\045" +
    "\025\046\006\001\001\000\002\001\001\000\042\005\261" +
    "\020\201\022\231\023\237\024\240\026\232\027\243\030" +
    "\235\031\230\032\234\033\236\034\244\037\233\042\242" +
    "\045\025\046\006\001\001\000\002\001\001\000\042\005" +
    "\263\020\201\022\231\023\237\024\240\026\232\027\243" +
    "\030\235\031\230\032\234\033\236\034\244\037\233\042" +
    "\242\045\025\046\006\001\001\000\002\001\001\000\042" +
    "\005\265\020\201\022\231\023\237\024\240\026\232\027" +
    "\243\030\235\031\230\032\234\033\236\034\244\037\233" +
    "\042\242\045\025\046\006\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\042\005\271\020\201" +
    "\022\231\023\237\024\240\026\232\027\243\030\235\031" +
    "\230\032\234\033\236\034\244\037\233\042\242\045\025" +
    "\046\006\001\001\000\002\001\001\000\030\007\132\010" +
    "\062\011\061\012\060\013\057\014\056\015\054\016\052" +
    "\020\046\043\050\044\053\001\001\000\002\001\001\000" +
    "\030\007\275\010\062\011\061\012\060\013\057\014\056" +
    "\015\054\016\052\020\046\043\050\044\053\001\001\000" +
    "\002\001\001\000\006\020\224\027\277\001\001\000\002" +
    "\001\001\000\002\001\001\000\042\005\302\020\201\022" +
    "\231\023\237\024\240\026\232\027\243\030\235\031\230" +
    "\032\234\033\236\034\244\037\233\042\242\045\025\046" +
    "\006\001\001\000\002\001\001\000\002\001\001\000\032" +
    "\007\122\010\062\011\061\012\060\013\057\014\056\015" +
    "\054\016\052\020\046\043\050\044\053\051\305\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\042\004\312\020\201\022\171\023\177" +
    "\024\200\026\170\027\204\030\175\031\165\032\174\033" +
    "\176\034\205\037\173\042\203\045\025\046\006\001\001" +
    "\000\002\001\001\000\042\004\314\020\201\022\171\023" +
    "\177\024\200\026\170\027\204\030\175\031\165\032\174" +
    "\033\176\034\205\037\173\042\203\045\025\046\006\001" +
    "\001\000\002\001\001\000\042\004\316\020\201\022\171" +
    "\023\177\024\200\026\170\027\204\030\175\031\165\032" +
    "\174\033\176\034\205\037\173\042\203\045\025\046\006" +
    "\001\001\000\002\001\001\000\042\004\320\020\201\022" +
    "\171\023\177\024\200\026\170\027\204\030\175\031\165" +
    "\032\174\033\176\034\205\037\173\042\203\045\025\046" +
    "\006\001\001\000\002\001\001\000\030\007\322\010\062" +
    "\011\061\012\060\013\057\014\056\015\054\016\052\020" +
    "\046\043\050\044\053\001\001\000\002\001\001\000\002" +
    "\001\001\000\042\005\325\020\201\022\231\023\237\024" +
    "\240\026\232\027\243\030\235\031\230\032\234\033\236" +
    "\034\244\037\233\042\242\045\025\046\006\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\042" +
    "\005\331\020\201\022\231\023\237\024\240\026\232\027" +
    "\243\030\235\031\230\032\234\033\236\034\244\037\233" +
    "\042\242\045\025\046\006\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\030\007\337\010\062\011\061\012\060\013" +
    "\057\014\056\015\054\016\052\020\046\043\050\044\053" +
    "\001\001\000\002\001\001\000\002\001\001\000\042\005" +
    "\342\020\201\022\231\023\237\024\240\026\232\027\243" +
    "\030\235\031\230\032\234\033\236\034\244\037\233\042" +
    "\242\045\025\046\006\001\001\000\002\001\001\000\002" +
    "\001\001\000\042\004\345\020\201\022\171\023\177\024" +
    "\200\026\170\027\204\030\175\031\165\032\174\033\176" +
    "\034\205\037\173\042\203\045\025\046\006\001\001\000" +
    "\002\001\001\000\004\020\u0135\001\001\000\004\020\u0109" +
    "\001\001\000\004\020\351\001\001\000\002\001\001\000" +
    "\012\020\146\045\354\046\355\047\353\001\001\000\002" +
    "\001\001\000\004\020\u0101\001\001\000\004\020\357\001" +
    "\001\000\004\020\376\001\001\000\004\050\361\001\001" +
    "\000\010\020\146\045\362\046\363\001\001\000\002\001" +
    "\001\000\004\020\372\001\001\000\004\020\365\001\001" +
    "\000\004\020\367\001\001\000\004\050\366\001\001\000" +
    "\002\001\001\000\004\050\370\001\001\000\002\001\001" +
    "\000\004\020\374\001\001\000\004\050\373\001\001\000" +
    "\002\001\001\000\004\050\375\001\001\000\002\001\001" +
    "\000\004\050\377\001\001\000\002\001\001\000\004\020" +
    "\u0103\001\001\000\004\050\u0102\001\001\000\002\001\001" +
    "\000\004\050\u0104\001\001\000\002\001\001\000\002\001" +
    "\001\000\042\005\u0107\020\201\022\231\023\237\024\240" +
    "\026\232\027\243\030\235\031\230\032\234\033\236\034" +
    "\244\037\233\042\242\045\025\046\006\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\012\020" +
    "\146\045\354\046\355\047\u010b\001\001\000\002\001\001" +
    "\000\002\001\001\000\044\006\u011c\020\201\022\u0111\023" +
    "\u0116\024\u0117\026\u0110\027\u011a\030\u0114\031\u010e\032\u0112" +
    "\033\u0115\034\u011b\037\u0113\040\u0118\042\u0119\045\025\046" +
    "\006\001\001\000\002\001\001\000\030\007\u0132\010\062" +
    "\011\061\012\060\013\057\014\056\015\054\016\052\020" +
    "\046\043\050\044\053\001\001\000\044\006\u0131\020\201" +
    "\022\u0111\023\u0116\024\u0117\026\u0110\027\u011a\030\u0114\031" +
    "\u010e\032\u0112\033\u0115\034\u011b\037\u0113\040\u0118\042\u0119" +
    "\045\025\046\006\001\001\000\044\006\u0130\020\201\022" +
    "\u0111\023\u0116\024\u0117\026\u0110\027\u011a\030\u0114\031\u010e" +
    "\032\u0112\033\u0115\034\u011b\037\u0113\040\u0118\042\u0119\045" +
    "\025\046\006\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\044\006\u0127\020" +
    "\201\022\u0111\023\u0116\024\u0117\026\u0110\027\u011a\030\u0114" +
    "\031\u010e\032\u0112\033\u0115\034\u011b\037\u0113\040\u0118\042" +
    "\u0119\045\025\046\006\001\001\000\044\006\u0126\020\201" +
    "\022\u0111\023\u0116\024\u0117\026\u0110\027\u011a\030\u0114\031" +
    "\u010e\032\u0112\033\u0115\034\u011b\037\u0113\040\u0118\042\u0119" +
    "\045\025\046\006\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\044\006\u011f\020\201\022\u0111\023" +
    "\u0116\024\u0117\026\u0110\027\u011a\030\u0114\031\u010e\032\u0112" +
    "\033\u0115\034\u011b\037\u0113\040\u0118\042\u0119\045\025\046" +
    "\006\001\001\000\002\001\001\000\044\006\u0121\020\201" +
    "\022\u0111\023\u0116\024\u0117\026\u0110\027\u011a\030\u0114\031" +
    "\u010e\032\u0112\033\u0115\034\u011b\037\u0113\040\u0118\042\u0119" +
    "\045\025\046\006\001\001\000\002\001\001\000\044\006" +
    "\u0123\020\201\022\u0111\023\u0116\024\u0117\026\u0110\027\u011a" +
    "\030\u0114\031\u010e\032\u0112\033\u0115\034\u011b\037\u0113\040" +
    "\u0118\042\u0119\045\025\046\006\001\001\000\002\001\001" +
    "\000\044\006\u0125\020\201\022\u0111\023\u0116\024\u0117\026" +
    "\u0110\027\u011a\030\u0114\031\u010e\032\u0112\033\u0115\034\u011b" +
    "\037\u0113\040\u0118\042\u0119\045\025\046\006\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\044" +
    "\006\u0129\020\201\022\u0111\023\u0116\024\u0117\026\u0110\027" +
    "\u011a\030\u0114\031\u010e\032\u0112\033\u0115\034\u011b\037\u0113" +
    "\040\u0118\042\u0119\045\025\046\006\001\001\000\002\001" +
    "\001\000\044\006\u012b\020\201\022\u0111\023\u0116\024\u0117" +
    "\026\u0110\027\u011a\030\u0114\031\u010e\032\u0112\033\u0115\034" +
    "\u011b\037\u0113\040\u0118\042\u0119\045\025\046\006\001\001" +
    "\000\002\001\001\000\044\006\u012d\020\201\022\u0111\023" +
    "\u0116\024\u0117\026\u0110\027\u011a\030\u0114\031\u010e\032\u0112" +
    "\033\u0115\034\u011b\037\u0113\040\u0118\042\u0119\045\025\046" +
    "\006\001\001\000\002\001\001\000\044\006\u012f\020\201" +
    "\022\u0111\023\u0116\024\u0117\026\u0110\027\u011a\030\u0114\031" +
    "\u010e\032\u0112\033\u0115\034\u011b\037\u0113\040\u0118\042\u0119" +
    "\045\025\046\006\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\044\006\u0134" +
    "\020\201\022\u0111\023\u0116\024\u0117\026\u0110\027\u011a\030" +
    "\u0114\031\u010e\032\u0112\033\u0115\034\u011b\037\u0113\040\u0118" +
    "\042\u0119\045\025\046\006\001\001\000\002\001\001\000" +
    "\002\001\001\000\012\020\146\045\354\046\355\047\u0137" +
    "\001\001\000\002\001\001\000\002\001\001\000\044\006" +
    "\u013a\020\201\022\u0111\023\u0116\024\u0117\026\u0110\027\u011a" +
    "\030\u0114\031\u010e\032\u0112\033\u0115\034\u011b\037\u0113\040" +
    "\u0118\042\u0119\045\025\046\006\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\032\007\u0141\010\062" +
    "\011\061\012\060\013\057\014\056\015\054\016\052\020" +
    "\046\043\050\044\053\053\u0142\001\001\000\002\001\001" +
    "\000\002\001\001\000\030\007\u0145\010\062\011\061\012" +
    "\060\013\057\014\056\015\054\016\052\020\046\043\050" +
    "\044\053\001\001\000\002\001\001\000\002\001\001\000" +
    "\010\020\146\045\u0147\046\u0148\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\016\020\146\030\u0153\034" +
    "\u0152\045\u0154\046\006\055\u0151\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\020\u0155\001" +
    "\001\000\002\001\001\000\016\020\146\030\u0153\034\u0152" +
    "\045\u0154\046\006\055\u0157\001\001\000\002\001\001\000" +
    "\016\020\146\030\u0153\034\u0152\045\u0154\046\006\055\u0159" +
    "\001\001\000\002\001\001\000\002\001\001\000\036\003" +
    "\u015c\020\024\027\030\030\016\031\003\032\014\033\020" +
    "\034\031\035\021\036\010\041\015\042\027\045\025\046" +
    "\006\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$AnalizadorSintacticoTiny$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$AnalizadorSintacticoTiny$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$AnalizadorSintacticoTiny$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 1;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}


  /** User initialization code. */
  public void user_init() throws java.lang.Exception
    {
 
   errores = new GestionErrores();
   AnalizadorLexicoTiny alex = (AnalizadorLexicoTiny)getScanner();
   alex.fijaGestionErrores(errores);

    }

  /** Scan to get the next Symbol. */
  public java_cup.runtime.Symbol scan()
    throws java.lang.Exception
    {
 return getScanner().next_token(); 
    }

 
   private GestionErrores errores;
   public void syntax_error(Symbol unidadLexica) {
     errores.errorSintactico((UnidadLexica)unidadLexica);
   }

}

/** Cup generated class to encapsulate user supplied action code.*/
class CUP$AnalizadorSintacticoTiny$actions {


   private ASExpresion as = new ASExpresion();

  private final AnalizadorSintacticoTiny parser;

  /** Constructor */
  CUP$AnalizadorSintacticoTiny$actions(AnalizadorSintacticoTiny parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$AnalizadorSintacticoTiny$do_action_part00000000(
    int                        CUP$AnalizadorSintacticoTiny$act_num,
    java_cup.runtime.lr_parser CUP$AnalizadorSintacticoTiny$parser,
    java.util.Stack            CUP$AnalizadorSintacticoTiny$stack,
    int                        CUP$AnalizadorSintacticoTiny$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$AnalizadorSintacticoTiny$result;

      /* select the action based on the action number */
      switch (CUP$AnalizadorSintacticoTiny$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // PROG_COMP ::= CABECERA MAIN LLAVEAPERTURA CUERPO_MAIN LLAVECIERRE 
            {
              ProgramaCompleto RESULT =null;
		Cabecera cab = (Cabecera)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-4)).value;
		CuerpoMain c_main = (CuerpoMain)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-1)).value;
		 RESULT = new ProgramaCompleto(cab, c_main); 
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("PROG_COMP",0, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // $START ::= PROG_COMP EOF 
            {
              Object RESULT =null;
		ProgramaCompleto start_val = (ProgramaCompleto)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-1)).value;
		RESULT = start_val;
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("$START",0, RESULT);
            }
          /* ACCEPT */
          CUP$AnalizadorSintacticoTiny$parser.done_parsing();
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // CABECERA ::= INST_DECL_FUN CABECERA 
            {
              Cabecera RESULT =null;
		InstruccionDeclFuncion inst = (InstruccionDeclFuncion)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-1)).value;
		Cabecera cab = (Cabecera)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.peek()).value;
		 cab.addInstr(inst); RESULT = cab; 
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("CABECERA",1, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // CABECERA ::= INST_DECLASIG PUNTOCOMA CABECERA 
            {
              Cabecera RESULT =null;
		InstruccionDeclaracion inst = (InstruccionDeclaracion)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-2)).value;
		Cabecera cab = (Cabecera)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.peek()).value;
		 cab.addInstr(inst); RESULT = cab; 
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("CABECERA",1, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // CABECERA ::= INST_DECL PUNTOCOMA CABECERA 
            {
              Cabecera RESULT =null;
		InstruccionDeclaracion inst = (InstruccionDeclaracion)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-2)).value;
		Cabecera cab = (Cabecera)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.peek()).value;
		 cab.addInstr(inst); RESULT = cab; 
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("CABECERA",1, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // CABECERA ::= INST_DECL_VECTOR PUNTOCOMA CABECERA 
            {
              Cabecera RESULT =null;
		InstruccionDeclVector inst = (InstruccionDeclVector)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-2)).value;
		Cabecera cab = (Cabecera)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.peek()).value;
		 cab.addInstr(inst); RESULT = cab; 
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("CABECERA",1, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // CABECERA ::= INST_DECL_PUNT PUNTOCOMA CABECERA 
            {
              Cabecera RESULT =null;
		InstruccionDeclaracion inst = (InstruccionDeclaracion)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-2)).value;
		Cabecera cab = (Cabecera)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.peek()).value;
		 cab.addInstr(inst); RESULT = cab; 
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("CABECERA",1, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // CABECERA ::= INST_ASIG PUNTOCOMA CABECERA 
            {
              Cabecera RESULT =null;
		InstruccionAsignacion inst = (InstruccionAsignacion)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-2)).value;
		Cabecera cab = (Cabecera)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.peek()).value;
		 cab.addInstr(inst); RESULT = cab; 
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("CABECERA",1, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // CABECERA ::= INST_ASIG_VECTOR PUNTOCOMA CABECERA 
            {
              Cabecera RESULT =null;
		InstruccionAsigVector inst = (InstruccionAsigVector)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-2)).value;
		Cabecera cab = (Cabecera)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.peek()).value;
		 cab.addInstr(inst); RESULT = cab; 
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("CABECERA",1, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // CABECERA ::= INST_TYPEDEF PUNTOCOMA CABECERA 
            {
              Cabecera RESULT =null;
		InstruccionTypedef inst = (InstruccionTypedef)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-2)).value;
		Cabecera cab = (Cabecera)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.peek()).value;
		 cab.addInstr(inst); RESULT = cab; 
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("CABECERA",1, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // CABECERA ::= INST_STRUCT PUNTOCOMA CABECERA 
            {
              Cabecera RESULT =null;
		InstruccionDeclStruct inst = (InstruccionDeclStruct)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-2)).value;
		Cabecera cab = (Cabecera)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.peek()).value;
		 cab.addInstr(inst); RESULT = cab; 
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("CABECERA",1, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // CABECERA ::= INST_MEM PUNTOCOMA CABECERA 
            {
              Cabecera RESULT =null;
		InstruccionReservaMemoria inst = (InstruccionReservaMemoria)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-2)).value;
		Cabecera cab = (Cabecera)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.peek()).value;
		 cab.addInstr(inst); RESULT = cab; 
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("CABECERA",1, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // CABECERA ::= 
            {
              Cabecera RESULT =null;
		 RESULT = new Cabecera(); 
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("CABECERA",1, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // CUERPO_MAIN ::= INST_DECLASIG PUNTOCOMA CUERPO_MAIN 
            {
              CuerpoMain RESULT =null;
		InstruccionDeclaracion inst = (InstruccionDeclaracion)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-2)).value;
		CuerpoMain c_main = (CuerpoMain)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.peek()).value;
		 c_main.addInstr(inst); RESULT = c_main; 
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("CUERPO_MAIN",2, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // CUERPO_MAIN ::= INST_DECL PUNTOCOMA CUERPO_MAIN 
            {
              CuerpoMain RESULT =null;
		InstruccionDeclaracion inst = (InstruccionDeclaracion)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-2)).value;
		CuerpoMain c_main = (CuerpoMain)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.peek()).value;
		 c_main.addInstr(inst); RESULT = c_main; 
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("CUERPO_MAIN",2, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // CUERPO_MAIN ::= INST_DECL_VECTOR PUNTOCOMA CUERPO_MAIN 
            {
              CuerpoMain RESULT =null;
		InstruccionDeclVector inst = (InstruccionDeclVector)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-2)).value;
		CuerpoMain c_main = (CuerpoMain)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.peek()).value;
		 c_main.addInstr(inst); RESULT = c_main; 
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("CUERPO_MAIN",2, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // CUERPO_MAIN ::= INST_DECL_PUNT PUNTOCOMA CUERPO_MAIN 
            {
              CuerpoMain RESULT =null;
		InstruccionDeclaracion inst = (InstruccionDeclaracion)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-2)).value;
		CuerpoMain c_main = (CuerpoMain)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.peek()).value;
		 c_main.addInstr(inst); RESULT = c_main; 
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("CUERPO_MAIN",2, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // CUERPO_MAIN ::= INST_ASIG PUNTOCOMA CUERPO_MAIN 
            {
              CuerpoMain RESULT =null;
		InstruccionAsignacion inst = (InstruccionAsignacion)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-2)).value;
		CuerpoMain c_main = (CuerpoMain)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.peek()).value;
		 c_main.addInstr(inst); RESULT = c_main; 
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("CUERPO_MAIN",2, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // CUERPO_MAIN ::= INST_ASIG_VECTOR PUNTOCOMA CUERPO_MAIN 
            {
              CuerpoMain RESULT =null;
		InstruccionAsigVector inst = (InstruccionAsigVector)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-2)).value;
		CuerpoMain c_main = (CuerpoMain)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.peek()).value;
		 c_main.addInstr(inst); RESULT = c_main; 
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("CUERPO_MAIN",2, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // CUERPO_MAIN ::= INST_CALL_PROC PUNTOCOMA CUERPO_MAIN 
            {
              CuerpoMain RESULT =null;
		InstruccionLlamadaFuncion inst = (InstruccionLlamadaFuncion)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-2)).value;
		CuerpoMain c_main = (CuerpoMain)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.peek()).value;
		 c_main.addInstr(inst); RESULT = c_main; 
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("CUERPO_MAIN",2, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // CUERPO_MAIN ::= INST_FOR CUERPO_MAIN 
            {
              CuerpoMain RESULT =null;
		InstruccionFor inst = (InstruccionFor)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-1)).value;
		CuerpoMain c_main = (CuerpoMain)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.peek()).value;
		 c_main.addInstr(inst); RESULT = c_main; 
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("CUERPO_MAIN",2, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // CUERPO_MAIN ::= INST_IF CUERPO_MAIN 
            {
              CuerpoMain RESULT =null;
		InstruccionIfElse inst = (InstruccionIfElse)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-1)).value;
		CuerpoMain c_main = (CuerpoMain)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.peek()).value;
		 c_main.addInstr(inst); RESULT = c_main; 
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("CUERPO_MAIN",2, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // CUERPO_MAIN ::= INST_IFELSE CUERPO_MAIN 
            {
              CuerpoMain RESULT =null;
		InstruccionIfElse inst = (InstruccionIfElse)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-1)).value;
		CuerpoMain c_main = (CuerpoMain)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.peek()).value;
		 c_main.addInstr(inst); RESULT = c_main; 
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("CUERPO_MAIN",2, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // CUERPO_MAIN ::= INST_WHILE CUERPO_MAIN 
            {
              CuerpoMain RESULT =null;
		InstruccionWhile inst = (InstruccionWhile)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-1)).value;
		CuerpoMain c_main = (CuerpoMain)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.peek()).value;
		 c_main.addInstr(inst); RESULT = c_main; 
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("CUERPO_MAIN",2, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // CUERPO_MAIN ::= INST_MEM PUNTOCOMA CUERPO_MAIN 
            {
              CuerpoMain RESULT =null;
		InstruccionReservaMemoria inst = (InstruccionReservaMemoria)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-2)).value;
		CuerpoMain c_main = (CuerpoMain)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.peek()).value;
		 c_main.addInstr(inst); RESULT = c_main; 
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("CUERPO_MAIN",2, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // CUERPO_MAIN ::= 
            {
              CuerpoMain RESULT =null;
		 RESULT = new CuerpoMain(); 
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("CUERPO_MAIN",2, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // Exp0 ::= Exp0 OR Exp1 
            {
              Expresion RESULT =null;
		Expresion exp1 = (Expresion)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-2)).value;
		Expresion exp2 = (Expresion)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.peek()).value;
		 RESULT = as.or(exp1, exp2); 
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("Exp0",5, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // Exp0 ::= Exp1 
            {
              Expresion RESULT =null;
		Expresion exp = (Expresion)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.peek()).value;
		 RESULT = exp; 
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("Exp0",5, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // Exp1 ::= Exp1 AND Exp2 
            {
              Expresion RESULT =null;
		Expresion exp1 = (Expresion)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-2)).value;
		Expresion exp2 = (Expresion)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.peek()).value;
		 RESULT = as.and(exp1, exp2); 
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("Exp1",6, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // Exp1 ::= Exp2 
            {
              Expresion RESULT =null;
		Expresion exp = (Expresion)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.peek()).value;
		 RESULT = exp; 
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("Exp1",6, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // Exp2 ::= NOT Exp2 
            {
              Expresion RESULT =null;
		Expresion exp2 = (Expresion)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.peek()).value;
		 RESULT = as.not(exp2); 
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("Exp2",7, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // Exp2 ::= Exp3 
            {
              Expresion RESULT =null;
		Expresion exp = (Expresion)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.peek()).value;
		 RESULT = exp; 
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("Exp2",7, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // Exp3 ::= Exp3 IGUALIGUAL Exp4 
            {
              Expresion RESULT =null;
		Expresion exp1 = (Expresion)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-2)).value;
		Expresion exp2 = (Expresion)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.peek()).value;
		 RESULT = as.equals(exp1, exp2); 
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("Exp3",8, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // Exp3 ::= Exp3 NOIGUAL Exp4 
            {
              Expresion RESULT =null;
		Expresion exp1 = (Expresion)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-2)).value;
		Expresion exp2 = (Expresion)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.peek()).value;
		 RESULT = as.nequals(exp1, exp2); 
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("Exp3",8, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // Exp3 ::= Exp4 
            {
              Expresion RESULT =null;
		Expresion exp = (Expresion)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.peek()).value;
		 RESULT = exp; 
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("Exp3",8, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // Exp4 ::= Exp4 MENOR Exp5 
            {
              Expresion RESULT =null;
		Expresion exp1 = (Expresion)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-2)).value;
		Expresion exp2 = (Expresion)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.peek()).value;
		 RESULT = as.lt(exp1, exp2); 
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("Exp4",9, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // Exp4 ::= Exp4 MAYOR Exp5 
            {
              Expresion RESULT =null;
		Expresion exp1 = (Expresion)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-2)).value;
		Expresion exp2 = (Expresion)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.peek()).value;
		 RESULT = as.gt(exp1, exp2); 
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("Exp4",9, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // Exp4 ::= Exp4 MENOROIGUAL Exp5 
            {
              Expresion RESULT =null;
		Expresion exp1 = (Expresion)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-2)).value;
		Expresion exp2 = (Expresion)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.peek()).value;
		 RESULT = as.leq(exp1, exp2); 
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("Exp4",9, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // Exp4 ::= Exp4 MAYOROIGUAL Exp5 
            {
              Expresion RESULT =null;
		Expresion exp1 = (Expresion)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-2)).value;
		Expresion exp2 = (Expresion)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.peek()).value;
		 RESULT = as.geq(exp1, exp2); 
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("Exp4",9, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // Exp4 ::= Exp5 
            {
              Expresion RESULT =null;
		Expresion exp = (Expresion)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.peek()).value;
		 RESULT = exp; 
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("Exp4",9, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // Exp5 ::= Exp5 SUM Exp6 
            {
              Expresion RESULT =null;
		Expresion exp1 = (Expresion)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-2)).value;
		Expresion exp2 = (Expresion)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.peek()).value;
		 RESULT = as.suma(exp1, exp2); 
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("Exp5",10, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // Exp5 ::= Exp5 SUB Exp6 
            {
              Expresion RESULT =null;
		Expresion exp1 = (Expresion)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-2)).value;
		Expresion exp2 = (Expresion)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.peek()).value;
		 RESULT = as.resta(exp1, exp2); 
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("Exp5",10, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // Exp5 ::= Exp6 
            {
              Expresion RESULT =null;
		Expresion exp = (Expresion)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.peek()).value;
		 RESULT = exp; 
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("Exp5",10, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // Exp6 ::= Exp6 MULT Exp7 
            {
              Expresion RESULT =null;
		Expresion exp1 = (Expresion)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-2)).value;
		Expresion exp2 = (Expresion)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.peek()).value;
		 RESULT = as.mul(exp1, exp2); 
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("Exp6",11, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // Exp6 ::= Exp6 DIV Exp7 
            {
              Expresion RESULT =null;
		Expresion exp1 = (Expresion)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-2)).value;
		Expresion exp2 = (Expresion)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.peek()).value;
		 RESULT = as.div(exp1, exp2); 
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("Exp6",11, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // Exp6 ::= Exp6 MOD Exp7 
            {
              Expresion RESULT =null;
		Expresion exp1 = (Expresion)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-2)).value;
		Expresion exp2 = (Expresion)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.peek()).value;
		 RESULT = as.mod(exp1, exp2); 
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("Exp6",11, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // Exp6 ::= Exp7 
            {
              Expresion RESULT =null;
		Expresion exp = (Expresion)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.peek()).value;
		 RESULT = exp; 
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("Exp6",11, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // Exp7 ::= NUM 
            {
              Expresion RESULT =null;
		String cadenaNum = (String)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.peek()).value;
		 RESULT = as.num(cadenaNum); 
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("Exp7",12, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // Exp7 ::= TRUE 
            {
              Expresion RESULT =null;
		 RESULT = as.bool_true(); 
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("Exp7",12, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // Exp7 ::= FALSE 
            {
              Expresion RESULT =null;
		 RESULT = as.bool_false(); 
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("Exp7",12, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // Exp7 ::= Ident 
            {
              Expresion RESULT =null;
		Id id = (Id)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.peek()).value;
		 RESULT = id; 
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("Exp7",12, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // Exp7 ::= EXPR_LLAM_FUN 
            {
              Expresion RESULT =null;
		ExpresionLlamadaFuncion llam_fun = (ExpresionLlamadaFuncion)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.peek()).value;
		 RESULT = llam_fun; 
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("Exp7",12, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // Exp7 ::= EXPR_ACC_VECT 
            {
              Expresion RESULT =null;
		ListIndex acc = (ListIndex)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.peek()).value;
		 RESULT = acc; 
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("Exp7",12, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // CUER ::= INST_DECLASIG PUNTOCOMA CUER 
            {
              Cuerpo RESULT =null;
		InstruccionDeclaracion inst = (InstruccionDeclaracion)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-2)).value;
		Cuerpo c = (Cuerpo)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.peek()).value;
		 c.addInstr(inst); RESULT = c; 
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("CUER",3, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // CUER ::= INST_DECL PUNTOCOMA CUER 
            {
              Cuerpo RESULT =null;
		InstruccionDeclaracion inst = (InstruccionDeclaracion)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-2)).value;
		Cuerpo c = (Cuerpo)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.peek()).value;
		 c.addInstr(inst); RESULT = c; 
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("CUER",3, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // CUER ::= INST_DECL_VECTOR PUNTOCOMA CUER 
            {
              Cuerpo RESULT =null;
		InstruccionDeclVector inst = (InstruccionDeclVector)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-2)).value;
		Cuerpo c = (Cuerpo)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.peek()).value;
		 c.addInstr(inst); RESULT = c; 
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("CUER",3, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // CUER ::= INST_DECL_PUNT PUNTOCOMA CUER 
            {
              Cuerpo RESULT =null;
		InstruccionDeclaracion inst = (InstruccionDeclaracion)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-2)).value;
		Cuerpo c = (Cuerpo)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.peek()).value;
		 c.addInstr(inst); RESULT = c; 
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("CUER",3, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // CUER ::= INST_ASIG PUNTOCOMA CUER 
            {
              Cuerpo RESULT =null;
		InstruccionAsignacion inst = (InstruccionAsignacion)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-2)).value;
		Cuerpo c = (Cuerpo)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.peek()).value;
		 c.addInstr(inst); RESULT = c; 
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("CUER",3, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // CUER ::= INST_ASIG_VECTOR PUNTOCOMA CUER 
            {
              Cuerpo RESULT =null;
		InstruccionAsigVector inst = (InstruccionAsigVector)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-2)).value;
		Cuerpo c = (Cuerpo)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.peek()).value;
		 c.addInstr(inst); RESULT = c; 
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("CUER",3, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // CUER ::= INST_CALL_PROC PUNTOCOMA CUER 
            {
              Cuerpo RESULT =null;
		InstruccionLlamadaFuncion inst = (InstruccionLlamadaFuncion)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-2)).value;
		Cuerpo c = (Cuerpo)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.peek()).value;
		 c.addInstr(inst); RESULT = c; 
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("CUER",3, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // CUER ::= INST_FOR CUER 
            {
              Cuerpo RESULT =null;
		InstruccionFor inst = (InstruccionFor)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-1)).value;
		Cuerpo c = (Cuerpo)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.peek()).value;
		 c.addInstr(inst); RESULT = c; 
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("CUER",3, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // CUER ::= INST_IF CUER 
            {
              Cuerpo RESULT =null;
		InstruccionIfElse inst = (InstruccionIfElse)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-1)).value;
		Cuerpo c = (Cuerpo)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.peek()).value;
		 c.addInstr(inst); RESULT = c; 
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("CUER",3, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // CUER ::= INST_IFELSE CUER 
            {
              Cuerpo RESULT =null;
		InstruccionIfElse inst = (InstruccionIfElse)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-1)).value;
		Cuerpo c = (Cuerpo)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.peek()).value;
		 c.addInstr(inst); RESULT = c; 
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("CUER",3, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // CUER ::= INST_WHILE CUER 
            {
              Cuerpo RESULT =null;
		InstruccionWhile inst = (InstruccionWhile)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-1)).value;
		Cuerpo c = (Cuerpo)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.peek()).value;
		 c.addInstr(inst); RESULT = c; 
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("CUER",3, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // CUER ::= INST_MEM PUNTOCOMA CUER 
            {
              Cuerpo RESULT =null;
		InstruccionReservaMemoria inst = (InstruccionReservaMemoria)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-2)).value;
		Cuerpo c = (Cuerpo)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.peek()).value;
		 c.addInstr(inst); RESULT = c; 
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("CUER",3, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // CUER ::= 
            {
              Cuerpo RESULT =null;
		 RESULT = new Cuerpo(); 
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("CUER",3, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // INST_IF ::= IF PARAPERTURA Exp0 PARCIERRE LLAVEAPERTURA CUER LLAVECIERRE 
            {
              InstruccionIfElse RESULT =null;
		Expresion cond = (Expresion)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-4)).value;
		Cuerpo cif = (Cuerpo)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-1)).value;
		 RESULT = new InstruccionIfElse(cond, cif); 
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("INST_IF",16, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // INST_IFELSE ::= IF PARAPERTURA Exp0 PARCIERRE LLAVEAPERTURA CUER LLAVECIERRE ELSE LLAVEAPERTURA CUER LLAVECIERRE 
            {
              InstruccionIfElse RESULT =null;
		Expresion cond = (Expresion)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-8)).value;
		Cuerpo cif = (Cuerpo)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-5)).value;
		Cuerpo celse = (Cuerpo)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-1)).value;
		 RESULT = new InstruccionIfElse(cond, cif, celse); 
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("INST_IFELSE",17, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // INST_WHILE ::= WHILE PARAPERTURA Exp0 PARCIERRE LLAVEAPERTURA CUER LLAVECIERRE 
            {
              InstruccionWhile RESULT =null;
		Expresion cond = (Expresion)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-4)).value;
		Cuerpo cwhile = (Cuerpo)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-1)).value;
		 RESULT = new InstruccionWhile(cond, cwhile); 
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("INST_WHILE",18, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // INST_FOR ::= FOR PARAPERTURA INST_ASIG PUNTOCOMA Exp0 PUNTOCOMA INST_ASIG PARCIERRE LLAVEAPERTURA CUER LLAVECIERRE 
            {
              InstruccionFor RESULT =null;
		InstruccionAsignacion ini = (InstruccionAsignacion)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-8)).value;
		Expresion cond = (Expresion)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-6)).value;
		InstruccionAsignacion paso = (InstruccionAsignacion)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-4)).value;
		Cuerpo cfor = (Cuerpo)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-1)).value;
		 RESULT = new InstruccionFor(ini.getId(), ini.getValor(), cond, paso.getValor(), cfor); 
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("INST_FOR",20, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // INST_FOR ::= FOR PARAPERTURA INST_DECLASIG PUNTOCOMA Exp0 PUNTOCOMA INST_ASIG PARCIERRE LLAVEAPERTURA CUER LLAVECIERRE 
            {
              InstruccionFor RESULT =null;
		InstruccionDeclaracion ini = (InstruccionDeclaracion)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-8)).value;
		Expresion cond = (Expresion)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-6)).value;
		InstruccionAsignacion paso = (InstruccionAsignacion)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-4)).value;
		Cuerpo cfor = (Cuerpo)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-1)).value;
		 RESULT = new InstruccionFor(ini.getId(), ini.getValor(), cond, paso.getValor(), cfor); 
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("INST_FOR",20, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // INST_ASIG ::= Ident IGUAL Exp0 
            {
              InstruccionAsignacion RESULT =null;
		Id id = (Id)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-2)).value;
		Expresion exp = (Expresion)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.peek()).value;
		 RESULT = new InstruccionAsignacion(id, exp); 
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("INST_ASIG",21, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // INST_ASIG_VECTOR ::= Ident IGUAL LLAVEAPERTURA LIST_VAL2 LLAVECIERRE 
            {
              InstruccionAsigVector RESULT =null;
		Id id = (Id)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-4)).value;
		ArrayDeque<Expresion> list = (ArrayDeque<Expresion>)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-1)).value;
		 RESULT = new InstruccionAsigVector(id,list);
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("INST_ASIG_VECTOR",25, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // LIST_VAL2 ::= Exp0 
            {
              ArrayDeque<Expresion> RESULT =null;
		Expresion val = (Expresion)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.peek()).value;
		ArrayDeque<Expresion> list = new ArrayDeque<Expresion>(); list.add(val); RESULT = list;
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("LIST_VAL2",42, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // LIST_VAL2 ::= LIST_VAL2 COMA Exp0 
            {
              ArrayDeque<Expresion> RESULT =null;
		ArrayDeque<Expresion> list = (ArrayDeque<Expresion>)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-2)).value;
		Expresion val = (Expresion)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.peek()).value;
		list.add(val); RESULT = list;
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("LIST_VAL2",42, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // INST_DECL ::= Tip Ident 
            {
              InstruccionDeclaracion RESULT =null;
		Tipo t = (Tipo)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-1)).value;
		Id id = (Id)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.peek()).value;
		 RESULT = new InstruccionDeclaracion(t,id); 
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("INST_DECL",22, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // INST_DECL_VECTOR ::= Tip_vect Ident 
            {
              InstruccionDeclVector RESULT =null;
		TipoLista t = (TipoLista)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-1)).value;
		Id id = (Id)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.peek()).value;
		 RESULT = new InstruccionDeclVector(t.getTipoDeLaLista(),id,t.length()); 
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("INST_DECL_VECTOR",26, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // INST_DECLASIG ::= Tip Ident IGUAL Exp0 
            {
              InstruccionDeclaracion RESULT =null;
		Tipo t = (Tipo)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-3)).value;
		Id id = (Id)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-2)).value;
		Expresion exp = (Expresion)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.peek()).value;
		 RESULT = new InstruccionDeclaracion(t,id,exp); 
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("INST_DECLASIG",23, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // INST_DECL_VECTOR ::= Tip_vect Ident IGUAL LLAVEAPERTURA LIST_VAL LLAVECIERRE 
            {
              InstruccionDeclVector RESULT =null;
		TipoLista t = (TipoLista)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-5)).value;
		Id id = (Id)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-4)).value;
		ArrayDeque<Expresion> list = (ArrayDeque<Expresion>)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-1)).value;
		 RESULT = new InstruccionDeclVector(t.getTipoDeLaLista(),id,t.length(),list);
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("INST_DECL_VECTOR",26, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // LIST_VAL ::= Exp0 
            {
              ArrayDeque<Expresion> RESULT =null;
		Expresion val = (Expresion)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.peek()).value;
		ArrayDeque<Expresion> list = new ArrayDeque<Expresion>(); list.add(val); RESULT = list;
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("LIST_VAL",41, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // LIST_VAL ::= LIST_VAL COMA Exp0 
            {
              ArrayDeque<Expresion> RESULT =null;
		ArrayDeque<Expresion> list = (ArrayDeque<Expresion>)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-2)).value;
		Expresion val = (Expresion)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.peek()).value;
		list.add(val); RESULT = list;
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("LIST_VAL",41, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // INST_DECL_PUNT ::= Tip DOLLAR Ident 
            {
              InstruccionDeclaracion RESULT =null;
		Tipo t = (Tipo)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-2)).value;
		Id id = (Id)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.peek()).value;
		 RESULT = new InstruccionDeclaracion(new TipoPuntero(t),id); 
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("INST_DECL_PUNT",24, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // ARGUMENTOS_INI ::= Tip Ident ARGUMENTOS 
            {
              ArrayDeque<Tipo_Id> RESULT =null;
		Tipo t = (Tipo)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-2)).value;
		Id id = (Id)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-1)).value;
		ArrayDeque<Tipo_Id> arg = (ArrayDeque<Tipo_Id>)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.peek()).value;
		 arg.addFirst(new Tipo_Id(t, id)); RESULT = arg; 
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("ARGUMENTOS_INI",37, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // ARGUMENTOS_INI ::= Tip AMPERSAND Ident ARGUMENTOS 
            {
              ArrayDeque<Tipo_Id> RESULT =null;
		Tipo t = (Tipo)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-3)).value;
		Id id = (Id)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-1)).value;
		ArrayDeque<Tipo_Id> arg = (ArrayDeque<Tipo_Id>)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.peek()).value;
		 arg.addFirst(new Tipo_Id(t, id)); RESULT = arg; 
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("ARGUMENTOS_INI",37, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // ARGUMENTOS_INI ::= Tip_vect Ident ARGUMENTOS 
            {
              ArrayDeque<Tipo_Id> RESULT =null;
		TipoLista t = (TipoLista)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-2)).value;
		Id id = (Id)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-1)).value;
		ArrayDeque<Tipo_Id> arg = (ArrayDeque<Tipo_Id>)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.peek()).value;
		 arg.addFirst(new Tipo_Id(t, id)); RESULT = arg; 
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("ARGUMENTOS_INI",37, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 85: // ARGUMENTOS_INI ::= Tip_vect AMPERSAND Ident ARGUMENTOS 
            {
              ArrayDeque<Tipo_Id> RESULT =null;
		TipoLista t = (TipoLista)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-3)).value;
		Id id = (Id)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-1)).value;
		ArrayDeque<Tipo_Id> arg = (ArrayDeque<Tipo_Id>)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.peek()).value;
		 arg.addFirst(new Tipo_Id(t, id)); RESULT = arg; 
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("ARGUMENTOS_INI",37, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 86: // ARGUMENTOS_INI ::= 
            {
              ArrayDeque<Tipo_Id> RESULT =null;
		 RESULT = new ArrayDeque<Tipo_Id>(); 
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("ARGUMENTOS_INI",37, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 87: // ARGUMENTOS ::= COMA Tip Ident ARGUMENTOS 
            {
              ArrayDeque<Tipo_Id> RESULT =null;
		Tipo t = (Tipo)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-2)).value;
		Id id = (Id)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-1)).value;
		ArrayDeque<Tipo_Id> arg = (ArrayDeque<Tipo_Id>)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.peek()).value;
		 arg.addFirst(new Tipo_Id(t, id)); RESULT = arg; 
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("ARGUMENTOS",38, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 88: // ARGUMENTOS ::= COMA Tip AMPERSAND Ident ARGUMENTOS 
            {
              ArrayDeque<Tipo_Id> RESULT =null;
		Tipo t = (Tipo)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-3)).value;
		Id id = (Id)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-1)).value;
		ArrayDeque<Tipo_Id> arg = (ArrayDeque<Tipo_Id>)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.peek()).value;
		 arg.addFirst(new Tipo_Id(t, id)); RESULT = arg; 
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("ARGUMENTOS",38, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 89: // ARGUMENTOS ::= COMA Tip_vect Ident ARGUMENTOS 
            {
              ArrayDeque<Tipo_Id> RESULT =null;
		TipoLista t = (TipoLista)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-2)).value;
		Id id = (Id)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-1)).value;
		ArrayDeque<Tipo_Id> arg = (ArrayDeque<Tipo_Id>)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.peek()).value;
		 arg.addFirst(new Tipo_Id(t, id)); RESULT = arg; 
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("ARGUMENTOS",38, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 90: // ARGUMENTOS ::= COMA Tip_vect AMPERSAND Ident ARGUMENTOS 
            {
              ArrayDeque<Tipo_Id> RESULT =null;
		TipoLista t = (TipoLista)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-3)).value;
		Id id = (Id)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-1)).value;
		ArrayDeque<Tipo_Id> arg = (ArrayDeque<Tipo_Id>)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.peek()).value;
		 arg.addFirst(new Tipo_Id(t, id)); RESULT = arg; 
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("ARGUMENTOS",38, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 91: // ARGUMENTOS ::= 
            {
              ArrayDeque<Tipo_Id> RESULT =null;
		 RESULT = new ArrayDeque<Tipo_Id>(); 
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("ARGUMENTOS",38, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 92: // CUER_FUN ::= INST_DECLASIG PUNTOCOMA CUER_FUN 
            {
              Cuerpo RESULT =null;
		InstruccionDeclaracion inst = (InstruccionDeclaracion)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-2)).value;
		Cuerpo c = (Cuerpo)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.peek()).value;
		 c.addInstr(inst); RESULT = c; 
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("CUER_FUN",4, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 93: // CUER_FUN ::= INST_DECL PUNTOCOMA CUER_FUN 
            {
              Cuerpo RESULT =null;
		InstruccionDeclaracion inst = (InstruccionDeclaracion)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-2)).value;
		Cuerpo c = (Cuerpo)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.peek()).value;
		 c.addInstr(inst); RESULT = c; 
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("CUER_FUN",4, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 94: // CUER_FUN ::= INST_DECL_VECTOR PUNTOCOMA CUER_FUN 
            {
              Cuerpo RESULT =null;
		InstruccionDeclVector inst = (InstruccionDeclVector)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-2)).value;
		Cuerpo c = (Cuerpo)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.peek()).value;
		 c.addInstr(inst); RESULT = c; 
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("CUER_FUN",4, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 95: // CUER_FUN ::= INST_DECL_PUNT PUNTOCOMA CUER_FUN 
            {
              Cuerpo RESULT =null;
		InstruccionDeclaracion inst = (InstruccionDeclaracion)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-2)).value;
		Cuerpo c = (Cuerpo)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.peek()).value;
		 c.addInstr(inst); RESULT = c; 
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("CUER_FUN",4, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 96: // CUER_FUN ::= INST_ASIG PUNTOCOMA CUER_FUN 
            {
              Cuerpo RESULT =null;
		InstruccionAsignacion inst = (InstruccionAsignacion)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-2)).value;
		Cuerpo c = (Cuerpo)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.peek()).value;
		 c.addInstr(inst); RESULT = c; 
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("CUER_FUN",4, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 97: // CUER_FUN ::= INST_ASIG_VECTOR PUNTOCOMA CUER_FUN 
            {
              Cuerpo RESULT =null;
		InstruccionAsigVector inst = (InstruccionAsigVector)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-2)).value;
		Cuerpo c = (Cuerpo)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.peek()).value;
		 c.addInstr(inst); RESULT = c; 
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("CUER_FUN",4, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 98: // CUER_FUN ::= INST_CALL_PROC PUNTOCOMA CUER_FUN 
            {
              Cuerpo RESULT =null;
		InstruccionLlamadaFuncion inst = (InstruccionLlamadaFuncion)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-2)).value;
		Cuerpo c = (Cuerpo)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.peek()).value;
		 c.addInstr(inst); RESULT = c; 
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("CUER_FUN",4, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 99: // CUER_FUN ::= INST_FOR CUER_FUN 
            {
              Cuerpo RESULT =null;
		InstruccionFor inst = (InstruccionFor)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-1)).value;
		Cuerpo c = (Cuerpo)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.peek()).value;
		 c.addInstr(inst); RESULT = c; 
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("CUER_FUN",4, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 100: // CUER_FUN ::= INST_IF CUER_FUN 
            {
              Cuerpo RESULT =null;
		InstruccionIfElse inst = (InstruccionIfElse)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-1)).value;
		Cuerpo c = (Cuerpo)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.peek()).value;
		 c.addInstr(inst); RESULT = c; 
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("CUER_FUN",4, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 101: // CUER_FUN ::= INST_IFELSE CUER_FUN 
            {
              Cuerpo RESULT =null;
		InstruccionIfElse inst = (InstruccionIfElse)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-1)).value;
		Cuerpo c = (Cuerpo)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.peek()).value;
		 c.addInstr(inst); RESULT = c; 
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("CUER_FUN",4, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 102: // CUER_FUN ::= INST_WHILE CUER_FUN 
            {
              Cuerpo RESULT =null;
		InstruccionWhile inst = (InstruccionWhile)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-1)).value;
		Cuerpo c = (Cuerpo)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.peek()).value;
		 c.addInstr(inst); RESULT = c; 
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("CUER_FUN",4, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 103: // CUER_FUN ::= INST_RETURN PUNTOCOMA CUER_FUN 
            {
              Cuerpo RESULT =null;
		InstruccionReturn inst = (InstruccionReturn)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-2)).value;
		Cuerpo c = (Cuerpo)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.peek()).value;
		 c.addInstr(inst); RESULT = c; 
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("CUER_FUN",4, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 104: // CUER_FUN ::= INST_MEM PUNTOCOMA CUER_FUN 
            {
              Cuerpo RESULT =null;
		InstruccionReservaMemoria inst = (InstruccionReservaMemoria)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-2)).value;
		Cuerpo c = (Cuerpo)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.peek()).value;
		 c.addInstr(inst); RESULT = c; 
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("CUER_FUN",4, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 105: // CUER_FUN ::= 
            {
              Cuerpo RESULT =null;
		 RESULT = new Cuerpo(); 
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("CUER_FUN",4, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 106: // INST_DECL_FUN ::= FUNCTION Tip Ident PARAPERTURA ARGUMENTOS_INI PARCIERRE LLAVEAPERTURA CUER_FUN LLAVECIERRE 
            {
              InstruccionDeclFuncion RESULT =null;
		Tipo tipo_dev = (Tipo)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-7)).value;
		Id id = (Id)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-6)).value;
		ArrayDeque<Tipo_Id> arg = (ArrayDeque<Tipo_Id>)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-4)).value;
		Cuerpo c = (Cuerpo)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-1)).value;
		 RESULT = new InstruccionDeclFuncion(tipo_dev, id, arg, c); 
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("INST_DECL_FUN",28, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 107: // INST_DECL_FUN ::= FUNCTION Tip_vect Ident PARAPERTURA ARGUMENTOS_INI PARCIERRE LLAVEAPERTURA CUER_FUN LLAVECIERRE 
            {
              InstruccionDeclFuncion RESULT =null;
		TipoLista tipo_dev = (TipoLista)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-7)).value;
		Id id = (Id)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-6)).value;
		ArrayDeque<Tipo_Id> arg = (ArrayDeque<Tipo_Id>)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-4)).value;
		Cuerpo c = (Cuerpo)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-1)).value;
		 RESULT = new InstruccionDeclFuncion(tipo_dev, id, arg, c); 
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("INST_DECL_FUN",28, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 108: // INST_DECL_FUN ::= FUNCTION VOID Ident PARAPERTURA ARGUMENTOS_INI PARCIERRE LLAVEAPERTURA CUER LLAVECIERRE 
            {
              InstruccionDeclFuncion RESULT =null;
		Id id = (Id)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-6)).value;
		ArrayDeque<Tipo_Id> arg = (ArrayDeque<Tipo_Id>)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-4)).value;
		Cuerpo c = (Cuerpo)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-1)).value;
		 RESULT = new InstruccionDeclFuncion(null, id, arg, c); 
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("INST_DECL_FUN",28, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 109: // ARGUMENTOSPROC_INI ::= Exp0 ARGUMENTOSPROC 
            {
              ArrayDeque<Expresion> RESULT =null;
		Expresion e = (Expresion)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-1)).value;
		ArrayDeque<Expresion> arg = (ArrayDeque<Expresion>)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.peek()).value;
		 arg.addFirst(e); RESULT = arg; 
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("ARGUMENTOSPROC_INI",39, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 110: // ARGUMENTOSPROC_INI ::= 
            {
              ArrayDeque<Expresion> RESULT =null;
		 RESULT = new ArrayDeque<Expresion>(); 
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("ARGUMENTOSPROC_INI",39, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 111: // ARGUMENTOSPROC ::= COMA Exp0 ARGUMENTOSPROC 
            {
              ArrayDeque<Expresion> RESULT =null;
		Expresion e = (Expresion)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-1)).value;
		ArrayDeque<Expresion> arg = (ArrayDeque<Expresion>)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.peek()).value;
		 arg.addFirst(e); RESULT = arg; 
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("ARGUMENTOSPROC",40, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 112: // ARGUMENTOSPROC ::= 
            {
              ArrayDeque<Expresion> RESULT =null;
		 RESULT = new ArrayDeque<Expresion>(); 
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("ARGUMENTOSPROC",40, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 113: // INST_RETURN ::= RETURN Exp0 
            {
              InstruccionReturn RESULT =null;
		Expresion e = (Expresion)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.peek()).value;
		 RESULT = new InstruccionReturn(e); 
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("INST_RETURN",30, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 114: // INST_CALL_PROC ::= Ident PARAPERTURA ARGUMENTOSPROC_INI PARCIERRE 
            {
              InstruccionLlamadaFuncion RESULT =null;
		Id id = (Id)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-3)).value;
		ArrayDeque<Expresion> arg = (ArrayDeque<Expresion>)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-1)).value;
		 RESULT = new InstruccionLlamadaFuncion(id, arg); 
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("INST_CALL_PROC",29, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 115: // INST_TYPEDEF ::= TYPEDEF Tip Ident 
            {
              InstruccionTypedef RESULT =null;
		Tipo tipo = (Tipo)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-1)).value;
		Id id = (Id)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.peek()).value;
		 RESULT = new InstruccionTypedef(tipo, id); 
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("INST_TYPEDEF",31, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 116: // INST_MEM ::= NEW PARAPERTURA Ident COMA NUM PARCIERRE 
            {
              InstruccionReservaMemoria RESULT =null;
		Id id = (Id)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-3)).value;
		String tam = (String)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-1)).value;
		 RESULT = new InstruccionReservaMemoria(id, tam); 
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("INST_MEM",32, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 117: // INST_STRUCT ::= STRUCT Ident LLAVEAPERTURA CAMPOS_STRUCT LLAVECIERRE 
            {
              InstruccionDeclStruct RESULT =null;
		Object struct = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-4)).value;
		Id nombre = (Id)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-3)).value;
		ArrayDeque<Instruccion> lista = (ArrayDeque<Instruccion>)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-1)).value;
		 RESULT = new InstruccionDeclStruct(nombre, lista); 
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("INST_STRUCT",27, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 118: // CAMPOS_STRUCT ::= INST_DECL PUNTOCOMA CAMPOS_STRUCT 
            {
              ArrayDeque<Instruccion> RESULT =null;
		InstruccionDeclaracion decl = (InstruccionDeclaracion)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-2)).value;
		ArrayDeque<Instruccion> lista = (ArrayDeque<Instruccion>)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.peek()).value;
		lista.add(decl); RESULT = lista;
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("CAMPOS_STRUCT",43, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 119: // CAMPOS_STRUCT ::= INST_DECL_VECTOR PUNTOCOMA CAMPOS_STRUCT 
            {
              ArrayDeque<Instruccion> RESULT =null;
		InstruccionDeclVector decl = (InstruccionDeclVector)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-2)).value;
		ArrayDeque<Instruccion> lista = (ArrayDeque<Instruccion>)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.peek()).value;
		lista.add(decl); RESULT = lista;
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("CAMPOS_STRUCT",43, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 120: // CAMPOS_STRUCT ::= 
            {
              ArrayDeque<Instruccion> RESULT =null;
		RESULT = new ArrayDeque<Instruccion>();
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("CAMPOS_STRUCT",43, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 121: // Ident ::= IDEN 
            {
              Id RESULT =null;
		String id = (String)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.peek()).value;
		 RESULT = new Id(id); 
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("Ident",14, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 122: // EXPR_LLAM_FUN ::= Ident PARAPERTURA ARGUMENTOSPROC_INI PARCIERRE 
            {
              ExpresionLlamadaFuncion RESULT =null;
		Id id = (Id)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-3)).value;
		ArrayDeque<Expresion> arg = (ArrayDeque<Expresion>)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-1)).value;
		 RESULT = new ExpresionLlamadaFuncion(id, arg); 
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("EXPR_LLAM_FUN",33, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 123: // EXPR_ACC_VECT ::= Ident CORCHAPERTURA Exp0 CORCHCIERRE 
            {
              ListIndex RESULT =null;
		Id id = (Id)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-3)).value;
		Expresion idx = (Expresion)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-1)).value;
		 RESULT = new ListIndex(id, idx); 
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("EXPR_ACC_VECT",34, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 124: // Tip ::= INTEGER 
            {
              Tipo RESULT =null;
		 RESULT = new Tipo(Tipos.INTEGER); 
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("Tip",35, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 125: // Tip ::= BOOLEAN 
            {
              Tipo RESULT =null;
		 RESULT = new Tipo(Tipos.BOOLEAN); 
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("Tip",35, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 126: // Tip_vect ::= LIST MENOR Tip COMA NUM MAYOR 
            {
              TipoLista RESULT =null;
		Tipo t = (Tipo)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-3)).value;
		String n = (String)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-1)).value;
		 RESULT = new TipoLista(t, n); 
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("Tip_vect",36, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 127: // Tip_vect ::= LIST MENOR Tip_vect COMA NUM MAYOR 
            {
              TipoLista RESULT =null;
		TipoLista t = (TipoLista)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-3)).value;
		String n = (String)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-1)).value;
		 RESULT = new TipoLista(t, n); 
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("Tip_vect",36, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 128: // Tip ::= Ident 
            {
              Tipo RESULT =null;
		Id nombreStruct = (Id)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.peek()).value;
		 RESULT = new TipoStruct(nombreStruct.getS()); 
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("Tip",35, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$AnalizadorSintacticoTiny$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$AnalizadorSintacticoTiny$do_action(
    int                        CUP$AnalizadorSintacticoTiny$act_num,
    java_cup.runtime.lr_parser CUP$AnalizadorSintacticoTiny$parser,
    java.util.Stack            CUP$AnalizadorSintacticoTiny$stack,
    int                        CUP$AnalizadorSintacticoTiny$top)
    throws java.lang.Exception
    {
              return CUP$AnalizadorSintacticoTiny$do_action_part00000000(
                               CUP$AnalizadorSintacticoTiny$act_num,
                               CUP$AnalizadorSintacticoTiny$parser,
                               CUP$AnalizadorSintacticoTiny$stack,
                               CUP$AnalizadorSintacticoTiny$top);
    }
}

