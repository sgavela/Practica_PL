
//----------------------------------------------------
// The following code was generated by CUP v0.11b beta 20140220
// Mon May 24 15:53:01 CEST 2021
//----------------------------------------------------

package asint;

import java_cup.runtime.*;
import alex.AnalizadorLexicoTiny;
import alex.UnidadLexica;
import errors.GestionErrores;
import ast.*;
import ast.e.*;
import ast.i.*;
import ast.t.*;
import java.util.ArrayDeque;
import java_cup.runtime.ComplexSymbolFactory.Location;

/** CUP v0.11b beta 20140220 generated parser.
  * @version Mon May 24 15:53:01 CEST 2021
  */
public class AnalizadorSintacticoTiny extends java_cup.runtime.lr_parser {

  /** Default constructor. */
  public AnalizadorSintacticoTiny() {super();}

  /** Constructor which sets the default scanner. */
  public AnalizadorSintacticoTiny(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public AnalizadorSintacticoTiny(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\204\000\002\002\007\000\002\002\004\000\002\003" +
    "\004\000\002\003\005\000\002\003\005\000\002\003\005" +
    "\000\002\003\005\000\002\003\005\000\002\003\005\000" +
    "\002\003\005\000\002\003\005\000\002\003\005\000\002" +
    "\003\002\000\002\004\005\000\002\004\005\000\002\004" +
    "\005\000\002\004\005\000\002\004\005\000\002\004\005" +
    "\000\002\004\005\000\002\004\004\000\002\004\004\000" +
    "\002\004\004\000\002\004\004\000\002\004\005\000\002" +
    "\004\005\000\002\004\002\000\002\007\005\000\002\007" +
    "\003\000\002\010\005\000\002\010\003\000\002\011\004" +
    "\000\002\011\003\000\002\012\005\000\002\012\005\000" +
    "\002\012\003\000\002\013\005\000\002\013\005\000\002" +
    "\013\005\000\002\013\005\000\002\013\003\000\002\014" +
    "\005\000\002\014\005\000\002\014\003\000\002\015\005" +
    "\000\002\015\005\000\002\015\005\000\002\015\003\000" +
    "\002\016\003\000\002\016\003\000\002\016\003\000\002" +
    "\016\003\000\002\016\003\000\002\016\003\000\002\016" +
    "\003\000\002\005\005\000\002\005\005\000\002\005\005" +
    "\000\002\005\005\000\002\005\005\000\002\005\005\000" +
    "\002\005\005\000\002\005\004\000\002\005\004\000\002" +
    "\005\004\000\002\005\004\000\002\005\005\000\002\005" +
    "\005\000\002\005\002\000\002\022\011\000\002\023\015" +
    "\000\002\024\011\000\002\026\015\000\002\026\015\000" +
    "\002\033\006\000\002\027\005\000\002\030\004\000\002" +
    "\034\004\000\002\031\006\000\002\034\006\000\002\032" +
    "\005\000\002\051\005\000\002\051\006\000\002\051\005" +
    "\000\002\051\006\000\002\051\002\000\002\052\006\000" +
    "\002\052\007\000\002\052\006\000\002\052\007\000\002" +
    "\052\002\000\002\006\005\000\002\006\005\000\002\006" +
    "\005\000\002\006\005\000\002\006\005\000\002\006\005" +
    "\000\002\006\005\000\002\006\004\000\002\006\004\000" +
    "\002\006\004\000\002\006\004\000\002\006\005\000\002" +
    "\006\005\000\002\006\002\000\002\036\016\000\002\036" +
    "\016\000\002\036\013\000\002\053\004\000\002\053\002" +
    "\000\002\054\005\000\002\054\002\000\002\040\004\000" +
    "\002\043\004\000\002\037\006\000\002\041\005\000\002" +
    "\042\010\000\002\035\007\000\002\061\005\000\002\061" +
    "\005\000\002\061\002\000\002\020\003\000\002\044\006" +
    "\000\002\046\006\000\002\045\005\000\002\057\003\000" +
    "\002\057\005\000\002\047\003\000\002\047\003\000\002" +
    "\050\010\000\002\050\010\000\002\047\003" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\u0165\000\024\005\012\006\023\007\005\010\013\013" +
    "\024\014\ufff5\027\017\030\027\031\006\001\002\000\004" +
    "\064\u0166\001\002\000\004\005\012\001\002\000\004\044" +
    "\u0151\001\002\000\004\005\012\001\002\000\004\002\u014d" +
    "\001\002\000\024\005\012\006\023\007\005\010\013\013" +
    "\024\014\ufff5\027\017\030\027\031\006\001\002\000\064" +
    "\005\uff88\036\uff88\037\uff88\040\uff88\041\uff88\042\uff88\043" +
    "\uff88\044\uff88\045\uff88\046\uff88\047\uff88\050\uff88\051\uff88" +
    "\052\uff88\053\uff88\055\uff88\056\uff88\057\uff88\060\uff88\061" +
    "\uff88\062\uff88\063\uff88\064\uff88\070\uff88\072\uff88\001\002" +
    "\000\014\005\012\012\364\027\017\030\027\031\006\001" +
    "\002\000\004\014\167\001\002\000\004\064\165\001\002" +
    "\000\004\064\163\001\002\000\012\005\uff81\063\uff81\070" +
    "\uff81\072\uff81\001\002\000\004\064\161\001\002\000\004" +
    "\064\157\001\002\000\004\064\155\001\002\000\010\005" +
    "\012\027\017\030\027\001\002\000\004\055\145\001\002" +
    "\000\010\005\uff7e\047\141\072\uff7e\001\002\000\006\005" +
    "\012\072\042\001\002\000\012\005\uff82\063\uff82\070\uff82" +
    "\072\uff82\001\002\000\004\064\037\001\002\000\004\064" +
    "\035\001\002\000\004\064\033\001\002\000\024\005\012" +
    "\006\023\007\005\010\013\013\024\014\ufff5\027\017\030" +
    "\027\031\006\001\002\000\004\014\ufffc\001\002\000\024" +
    "\005\012\006\023\007\005\010\013\013\024\014\ufff5\027" +
    "\017\030\027\031\006\001\002\000\004\014\ufffa\001\002" +
    "\000\024\005\012\006\023\007\005\010\013\013\024\014" +
    "\ufff5\027\017\030\027\031\006\001\002\000\004\014\ufff6" +
    "\001\002\000\006\047\044\064\uffb5\001\002\000\004\005" +
    "\012\001\002\000\004\064\uffb1\001\002\000\016\004\050" +
    "\005\012\033\047\034\060\054\046\057\055\001\002\000" +
    "\046\036\uffcc\037\uffcc\040\uffcc\041\uffcc\042\uffcc\043\uffcc" +
    "\044\uffcc\045\uffcc\046\uffcc\050\uffcc\051\uffcc\052\uffcc\053" +
    "\uffcc\056\uffcc\060\uffcc\062\uffcc\063\uffcc\064\uffcc\001\002" +
    "\000\016\004\050\005\012\033\047\034\060\054\046\057" +
    "\055\001\002\000\046\036\uffd0\037\uffd0\040\uffd0\041\uffd0" +
    "\042\uffd0\043\uffd0\044\uffd0\045\uffd0\046\uffd0\050\uffd0\051" +
    "\uffd0\052\uffd0\053\uffd0\056\uffd0\060\uffd0\062\uffd0\063\uffd0" +
    "\064\uffd0\001\002\000\046\036\uffd1\037\uffd1\040\uffd1\041" +
    "\uffd1\042\uffd1\043\uffd1\044\uffd1\045\uffd1\046\uffd1\050\uffd1" +
    "\051\uffd1\052\uffd1\053\uffd1\056\uffd1\060\uffd1\062\uffd1\063" +
    "\uffd1\064\uffd1\001\002\000\046\036\uffcb\037\uffcb\040\uffcb" +
    "\041\uffcb\042\uffcb\043\uffcb\044\uffcb\045\uffcb\046\uffcb\050" +
    "\uffcb\051\uffcb\052\uffcb\053\uffcb\056\uffcb\060\uffcb\062\uffcb" +
    "\063\uffcb\064\uffcb\001\002\000\046\036\uffd2\037\uffd2\040" +
    "\uffd2\041\uffd2\042\uffd2\043\uffd2\044\uffd2\045\uffd2\046\uffd2" +
    "\050\uffd2\051\uffd2\052\uffd2\053\uffd2\056\uffd2\060\uffd2\062" +
    "\uffd2\063\uffd2\064\uffd2\001\002\000\046\036\uffd6\037\uffd6" +
    "\040\121\041\122\042\120\043\uffd6\044\uffd6\045\uffd6\046" +
    "\uffd6\050\uffd6\051\uffd6\052\uffd6\053\uffd6\056\uffd6\060\uffd6" +
    "\062\uffd6\063\uffd6\064\uffd6\001\002\000\040\036\115\037" +
    "\116\043\uffd9\044\uffd9\045\uffd9\046\uffd9\050\uffd9\051\uffd9" +
    "\052\uffd9\053\uffd9\056\uffd9\060\uffd9\062\uffd9\063\uffd9\064" +
    "\uffd9\001\002\000\016\004\050\005\012\033\047\034\060" +
    "\054\046\057\055\001\002\000\034\043\113\044\112\045" +
    "\111\046\110\050\uffde\051\uffde\052\uffde\053\uffde\056\uffde" +
    "\060\uffde\062\uffde\063\uffde\064\uffde\001\002\000\024\050" +
    "\105\051\106\052\uffe1\053\uffe1\056\uffe1\060\uffe1\062\uffe1" +
    "\063\uffe1\064\uffe1\001\002\000\046\036\uffcf\037\uffcf\040" +
    "\uffcf\041\uffcf\042\uffcf\043\uffcf\044\uffcf\045\uffcf\046\uffcf" +
    "\050\uffcf\051\uffcf\052\uffcf\053\uffcf\056\uffcf\060\uffcf\062" +
    "\uffcf\063\uffcf\064\uffcf\001\002\000\020\052\uffe3\053\uffe3" +
    "\056\uffe3\060\uffe3\062\uffe3\063\uffe3\064\uffe3\001\002\000" +
    "\020\052\074\053\uffe5\056\uffe5\060\uffe5\062\uffe5\063\uffe5" +
    "\064\uffe5\001\002\000\006\053\071\064\uffb3\001\002\000" +
    "\046\036\uffcd\037\uffcd\040\uffcd\041\uffcd\042\uffcd\043\uffcd" +
    "\044\uffcd\045\uffcd\046\uffcd\050\uffcd\051\uffcd\052\uffcd\053" +
    "\uffcd\056\uffcd\060\uffcd\062\uffcd\063\uffcd\064\uffcd\001\002" +
    "\000\052\036\uffce\037\uffce\040\uffce\041\uffce\042\uffce\043" +
    "\uffce\044\uffce\045\uffce\046\uffce\050\uffce\051\uffce\052\uffce" +
    "\053\uffce\055\066\056\uffce\060\uffce\061\067\062\uffce\063" +
    "\uffce\064\uffce\001\002\000\020\004\050\005\012\033\047" +
    "\034\060\054\046\056\uff94\057\055\001\002\000\016\004" +
    "\050\005\012\033\047\034\060\054\046\057\055\001\002" +
    "\000\006\053\071\062\072\001\002\000\016\004\050\005" +
    "\012\033\047\034\060\054\046\057\055\001\002\000\046" +
    "\036\uff86\037\uff86\040\uff86\041\uff86\042\uff86\043\uff86\044" +
    "\uff86\045\uff86\046\uff86\050\uff86\051\uff86\052\uff86\053\uff86" +
    "\056\uff86\060\uff86\062\uff86\063\uff86\064\uff86\001\002\000" +
    "\020\052\074\053\uffe6\056\uffe6\060\uffe6\062\uffe6\063\uffe6" +
    "\064\uffe6\001\002\000\016\004\050\005\012\033\047\034" +
    "\060\054\046\057\055\001\002\000\020\052\uffe4\053\uffe4" +
    "\056\uffe4\060\uffe4\062\uffe4\063\uffe4\064\uffe4\001\002\000" +
    "\004\056\104\001\002\000\010\053\071\056\uff92\063\100" +
    "\001\002\000\016\004\050\005\012\033\047\034\060\054" +
    "\046\057\055\001\002\000\004\056\uff95\001\002\000\010" +
    "\053\071\056\uff92\063\100\001\002\000\004\056\uff93\001" +
    "\002\000\046\036\uff87\037\uff87\040\uff87\041\uff87\042\uff87" +
    "\043\uff87\044\uff87\045\uff87\046\uff87\050\uff87\051\uff87\052" +
    "\uff87\053\uff87\056\uff87\060\uff87\062\uff87\063\uff87\064\uff87" +
    "\001\002\000\014\004\050\005\012\033\047\034\060\057" +
    "\055\001\002\000\014\004\050\005\012\033\047\034\060" +
    "\057\055\001\002\000\034\043\113\044\112\045\111\046" +
    "\110\050\uffdf\051\uffdf\052\uffdf\053\uffdf\056\uffdf\060\uffdf" +
    "\062\uffdf\063\uffdf\064\uffdf\001\002\000\014\004\050\005" +
    "\012\033\047\034\060\057\055\001\002\000\014\004\050" +
    "\005\012\033\047\034\060\057\055\001\002\000\014\004" +
    "\050\005\012\033\047\034\060\057\055\001\002\000\014" +
    "\004\050\005\012\033\047\034\060\057\055\001\002\000" +
    "\040\036\115\037\116\043\uffdc\044\uffdc\045\uffdc\046\uffdc" +
    "\050\uffdc\051\uffdc\052\uffdc\053\uffdc\056\uffdc\060\uffdc\062" +
    "\uffdc\063\uffdc\064\uffdc\001\002\000\014\004\050\005\012" +
    "\033\047\034\060\057\055\001\002\000\014\004\050\005" +
    "\012\033\047\034\060\057\055\001\002\000\046\036\uffd7" +
    "\037\uffd7\040\121\041\122\042\120\043\uffd7\044\uffd7\045" +
    "\uffd7\046\uffd7\050\uffd7\051\uffd7\052\uffd7\053\uffd7\056\uffd7" +
    "\060\uffd7\062\uffd7\063\uffd7\064\uffd7\001\002\000\014\004" +
    "\050\005\012\033\047\034\060\057\055\001\002\000\014" +
    "\004\050\005\012\033\047\034\060\057\055\001\002\000" +
    "\014\004\050\005\012\033\047\034\060\057\055\001\002" +
    "\000\046\036\uffd4\037\uffd4\040\uffd4\041\uffd4\042\uffd4\043" +
    "\uffd4\044\uffd4\045\uffd4\046\uffd4\050\uffd4\051\uffd4\052\uffd4" +
    "\053\uffd4\056\uffd4\060\uffd4\062\uffd4\063\uffd4\064\uffd4\001" +
    "\002\000\046\036\uffd5\037\uffd5\040\uffd5\041\uffd5\042\uffd5" +
    "\043\uffd5\044\uffd5\045\uffd5\046\uffd5\050\uffd5\051\uffd5\052" +
    "\uffd5\053\uffd5\056\uffd5\060\uffd5\062\uffd5\063\uffd5\064\uffd5" +
    "\001\002\000\046\036\uffd3\037\uffd3\040\uffd3\041\uffd3\042" +
    "\uffd3\043\uffd3\044\uffd3\045\uffd3\046\uffd3\050\uffd3\051\uffd3" +
    "\052\uffd3\053\uffd3\056\uffd3\060\uffd3\062\uffd3\063\uffd3\064" +
    "\uffd3\001\002\000\046\036\uffd8\037\uffd8\040\121\041\122" +
    "\042\120\043\uffd8\044\uffd8\045\uffd8\046\uffd8\050\uffd8\051" +
    "\uffd8\052\uffd8\053\uffd8\056\uffd8\060\uffd8\062\uffd8\063\uffd8" +
    "\064\uffd8\001\002\000\040\036\115\037\116\043\uffdd\044" +
    "\uffdd\045\uffdd\046\uffdd\050\uffdd\051\uffdd\052\uffdd\053\uffdd" +
    "\056\uffdd\060\uffdd\062\uffdd\063\uffdd\064\uffdd\001\002\000" +
    "\040\036\115\037\116\043\uffdb\044\uffdb\045\uffdb\046\uffdb" +
    "\050\uffdb\051\uffdb\052\uffdb\053\uffdb\056\uffdb\060\uffdb\062" +
    "\uffdb\063\uffdb\064\uffdb\001\002\000\040\036\115\037\116" +
    "\043\uffda\044\uffda\045\uffda\046\uffda\050\uffda\051\uffda\052" +
    "\uffda\053\uffda\056\uffda\060\uffda\062\uffda\063\uffda\064\uffda" +
    "\001\002\000\034\043\113\044\112\045\111\046\110\050" +
    "\uffe0\051\uffe0\052\uffe0\053\uffe0\056\uffe0\060\uffe0\062\uffe0" +
    "\063\uffe0\064\uffe0\001\002\000\006\060\135\063\136\001" +
    "\002\000\010\053\071\060\uff84\063\uff84\001\002\000\046" +
    "\036\uff85\037\uff85\040\uff85\041\uff85\042\uff85\043\uff85\044" +
    "\uff85\045\uff85\046\uff85\050\uff85\051\uff85\052\uff85\053\uff85" +
    "\056\uff85\060\uff85\062\uff85\063\uff85\064\uff85\001\002\000" +
    "\016\004\050\005\012\033\047\034\060\054\046\057\055" +
    "\001\002\000\010\053\071\060\uff83\063\uff83\001\002\000" +
    "\020\052\uffe2\053\uffe2\056\uffe2\060\uffe2\062\uffe2\063\uffe2" +
    "\064\uffe2\001\002\000\016\004\050\005\012\033\047\034" +
    "\060\054\046\057\142\001\002\000\016\004\050\005\012" +
    "\033\047\034\060\054\046\057\055\001\002\000\010\053" +
    "\071\056\uffb6\064\uffb6\001\002\000\042\036\uffcb\037\uffcb" +
    "\040\uffcb\041\uffcb\042\uffcb\043\uffcb\044\uffcb\045\uffcb\046" +
    "\uffcb\050\uffcb\051\uffcb\052\uffcb\053\uffcb\060\uffcb\063\uffcb" +
    "\064\uffb7\001\002\000\004\005\012\001\002\000\004\063" +
    "\147\001\002\000\004\004\150\001\002\000\004\056\151" +
    "\001\002\000\004\064\uff8d\001\002\000\010\005\uff7e\063" +
    "\uff7e\070\uff7e\001\002\000\004\005\012\001\002\000\004" +
    "\064\uff8e\001\002\000\024\005\012\006\023\007\005\010" +
    "\013\013\024\014\ufff5\027\017\030\027\031\006\001\002" +
    "\000\004\014\ufff7\001\002\000\024\005\012\006\023\007" +
    "\005\010\013\013\024\014\ufff5\027\017\030\027\031\006" +
    "\001\002\000\004\014\ufff9\001\002\000\024\005\012\006" +
    "\023\007\005\010\013\013\024\014\ufff5\027\017\030\027" +
    "\031\006\001\002\000\004\014\ufffd\001\002\000\024\005" +
    "\012\006\023\007\005\010\013\013\024\014\ufff5\027\017" +
    "\030\027\031\006\001\002\000\004\014\ufff8\001\002\000" +
    "\024\005\012\006\023\007\005\010\013\013\024\014\ufff5" +
    "\027\017\030\027\031\006\001\002\000\004\014\ufffb\001" +
    "\002\000\004\057\170\001\002\000\026\005\012\013\024" +
    "\015\206\016\177\020\172\021\210\027\017\030\027\031" +
    "\006\060\uffe7\001\002\000\004\064\360\001\002\000\004" +
    "\055\352\001\002\000\004\064\350\001\002\000\004\060" +
    "\347\001\002\000\026\005\012\013\024\015\206\016\177" +
    "\020\172\021\210\027\017\030\027\031\006\060\uffe7\001" +
    "\002\000\026\005\012\013\024\015\206\016\177\020\172" +
    "\021\210\027\017\030\027\031\006\060\uffe7\001\002\000" +
    "\004\055\333\001\002\000\004\064\331\001\002\000\004" +
    "\064\327\001\002\000\004\064\325\001\002\000\004\064" +
    "\323\001\002\000\026\005\012\013\024\015\206\016\177" +
    "\020\172\021\210\027\017\030\027\031\006\060\uffe7\001" +
    "\002\000\026\005\012\013\024\015\206\016\177\020\172" +
    "\021\210\027\017\030\027\031\006\060\uffe7\001\002\000" +
    "\016\004\050\005\012\033\047\034\060\054\046\057\055" +
    "\001\002\000\012\005\uff7e\047\141\055\315\072\uff7e\001" +
    "\002\000\004\055\222\001\002\000\004\064\220\001\002" +
    "\000\004\064\216\001\002\000\004\064\214\001\002\000" +
    "\026\005\012\013\024\015\206\016\177\020\172\021\210" +
    "\027\017\030\027\031\006\060\uffe7\001\002\000\004\060" +
    "\ufff2\001\002\000\026\005\012\013\024\015\206\016\177" +
    "\020\172\021\210\027\017\030\027\031\006\060\uffe7\001" +
    "\002\000\004\060\ufff0\001\002\000\026\005\012\013\024" +
    "\015\206\016\177\020\172\021\210\027\017\030\027\031" +
    "\006\060\uffe7\001\002\000\004\060\uffe9\001\002\000\010" +
    "\005\012\027\017\030\027\001\002\000\004\064\305\001" +
    "\002\000\006\005\uff7e\047\304\001\002\000\004\064\230" +
    "\001\002\000\004\005\012\001\002\000\004\047\044\001" +
    "\002\000\016\004\050\005\012\033\047\034\060\054\046" +
    "\057\055\001\002\000\006\053\071\064\232\001\002\000" +
    "\004\005\012\001\002\000\004\047\304\001\002\000\004" +
    "\056\235\001\002\000\004\057\236\001\002\000\026\005" +
    "\012\013\024\015\206\016\177\020\172\021\210\027\017" +
    "\030\027\031\006\060\uffbd\001\002\000\004\064\302\001" +
    "\002\000\004\064\300\001\002\000\026\005\012\013\024" +
    "\015\206\016\177\020\172\021\210\027\017\030\027\031" +
    "\006\060\uffbd\001\002\000\026\005\012\013\024\015\206" +
    "\016\177\020\172\021\210\027\017\030\027\031\006\060" +
    "\uffbd\001\002\000\004\064\274\001\002\000\004\064\272" +
    "\001\002\000\004\064\270\001\002\000\004\064\266\001" +
    "\002\000\026\005\012\013\024\015\206\016\177\020\172" +
    "\021\210\027\017\030\027\031\006\060\uffbd\001\002\000" +
    "\026\005\012\013\024\015\206\016\177\020\172\021\210" +
    "\027\017\030\027\031\006\060\uffbd\001\002\000\004\060" +
    "\263\001\002\000\004\064\261\001\002\000\004\064\257" +
    "\001\002\000\004\064\255\001\002\000\026\005\012\013" +
    "\024\015\206\016\177\020\172\021\210\027\017\030\027" +
    "\031\006\060\uffbd\001\002\000\004\060\uffc8\001\002\000" +
    "\026\005\012\013\024\015\206\016\177\020\172\021\210" +
    "\027\017\030\027\031\006\060\uffbd\001\002\000\004\060" +
    "\uffc6\001\002\000\026\005\012\013\024\015\206\016\177" +
    "\020\172\021\210\027\017\030\027\031\006\060\uffbd\001" +
    "\002\000\004\060\uffbf\001\002\000\030\005\uffb9\011\uffb9" +
    "\013\uffb9\015\uffb9\016\uffb9\020\uffb9\021\uffb9\027\uffb9\030" +
    "\uffb9\031\uffb9\060\uffb9\001\002\000\004\060\uffc0\001\002" +
    "\000\004\060\uffc1\001\002\000\026\005\012\013\024\015" +
    "\206\016\177\020\172\021\210\027\017\030\027\031\006" +
    "\060\uffbd\001\002\000\004\060\uffc5\001\002\000\026\005" +
    "\012\013\024\015\206\016\177\020\172\021\210\027\017" +
    "\030\027\031\006\060\uffbd\001\002\000\004\060\uffc9\001" +
    "\002\000\026\005\012\013\024\015\206\016\177\020\172" +
    "\021\210\027\017\030\027\031\006\060\uffbd\001\002\000" +
    "\004\060\uffc4\001\002\000\026\005\012\013\024\015\206" +
    "\016\177\020\172\021\210\027\017\030\027\031\006\060" +
    "\uffbd\001\002\000\004\060\uffc7\001\002\000\004\060\uffc3" +
    "\001\002\000\004\060\uffc2\001\002\000\026\005\012\013" +
    "\024\015\206\016\177\020\172\021\210\027\017\030\027" +
    "\031\006\060\uffbd\001\002\000\004\060\uffbe\001\002\000" +
    "\026\005\012\013\024\015\206\016\177\020\172\021\210" +
    "\027\017\030\027\031\006\060\uffbd\001\002\000\004\060" +
    "\uffca\001\002\000\016\004\050\005\012\033\047\034\060" +
    "\054\046\057\055\001\002\000\016\004\050\005\012\033" +
    "\047\034\060\054\046\057\055\001\002\000\006\053\071" +
    "\064\307\001\002\000\004\005\012\001\002\000\004\056" +
    "\311\001\002\000\004\057\312\001\002\000\026\005\012" +
    "\013\024\015\206\016\177\020\172\021\210\027\017\030" +
    "\027\031\006\060\uffbd\001\002\000\004\060\314\001\002" +
    "\000\030\005\uffb8\011\uffb8\013\uffb8\015\uffb8\016\uffb8\020" +
    "\uffb8\021\uffb8\027\uffb8\030\uffb8\031\uffb8\060\uffb8\001\002" +
    "\000\020\004\050\005\012\033\047\034\060\054\046\056" +
    "\uff94\057\055\001\002\000\004\056\317\001\002\000\004" +
    "\064\uff8f\001\002\000\006\053\071\064\uff90\001\002\000" +
    "\004\060\uffea\001\002\000\004\060\uffeb\001\002\000\026" +
    "\005\012\013\024\015\206\016\177\020\172\021\210\027" +
    "\017\030\027\031\006\060\uffe7\001\002\000\004\060\uffef" +
    "\001\002\000\026\005\012\013\024\015\206\016\177\020" +
    "\172\021\210\027\017\030\027\031\006\060\uffe7\001\002" +
    "\000\004\060\ufff3\001\002\000\026\005\012\013\024\015" +
    "\206\016\177\020\172\021\210\027\017\030\027\031\006" +
    "\060\uffe7\001\002\000\004\060\uffee\001\002\000\026\005" +
    "\012\013\024\015\206\016\177\020\172\021\210\027\017" +
    "\030\027\031\006\060\uffe7\001\002\000\004\060\ufff1\001" +
    "\002\000\016\004\050\005\012\033\047\034\060\054\046" +
    "\057\055\001\002\000\006\053\071\056\335\001\002\000" +
    "\004\057\336\001\002\000\026\005\012\013\024\015\206" +
    "\016\177\020\172\021\210\027\017\030\027\031\006\060" +
    "\uffbd\001\002\000\004\060\340\001\002\000\032\005\uffbc" +
    "\011\uffbc\013\uffbc\015\uffbc\016\uffbc\017\341\020\uffbc\021" +
    "\uffbc\027\uffbc\030\uffbc\031\uffbc\060\uffbc\001\002\000\004" +
    "\057\342\001\002\000\026\005\012\013\024\015\206\016" +
    "\177\020\172\021\210\027\017\030\027\031\006\060\uffbd" +
    "\001\002\000\004\060\344\001\002\000\030\005\uffbb\011" +
    "\uffbb\013\uffbb\015\uffbb\016\uffbb\020\uffbb\021\uffbb\027\uffbb" +
    "\030\uffbb\031\uffbb\060\uffbb\001\002\000\004\060\uffed\001" +
    "\002\000\004\060\uffec\001\002\000\004\002\001\001\002" +
    "\000\026\005\012\013\024\015\206\016\177\020\172\021" +
    "\210\027\017\030\027\031\006\060\uffe7\001\002\000\004" +
    "\060\uffe8\001\002\000\016\004\050\005\012\033\047\034" +
    "\060\054\046\057\055\001\002\000\006\053\071\056\354" +
    "\001\002\000\004\057\355\001\002\000\026\005\012\013" +
    "\024\015\206\016\177\020\172\021\210\027\017\030\027" +
    "\031\006\060\uffbd\001\002\000\004\060\357\001\002\000" +
    "\030\005\uffba\011\uffba\013\uffba\015\uffba\016\uffba\020\uffba" +
    "\021\uffba\027\uffba\030\uffba\031\uffba\060\uffba\001\002\000" +
    "\026\005\012\013\024\015\206\016\177\020\172\021\210" +
    "\027\017\030\027\031\006\060\uffe7\001\002\000\004\060" +
    "\ufff4\001\002\000\004\005\012\001\002\000\004\005\012" +
    "\001\002\000\004\005\012\001\002\000\004\055\366\001" +
    "\002\000\014\005\012\027\017\030\027\031\006\056\uffac" +
    "\001\002\000\004\056\u0111\001\002\000\006\005\012\070" +
    "\u010c\001\002\000\006\005\012\070\372\001\002\000\004" +
    "\005\012\001\002\000\006\056\uffa7\063\374\001\002\000" +
    "\012\005\012\027\017\030\027\031\006\001\002\000\004" +
    "\056\uffae\001\002\000\006\005\012\070\u0105\001\002\000" +
    "\006\005\012\070\u0100\001\002\000\004\005\012\001\002" +
    "\000\006\056\uffa7\063\374\001\002\000\004\056\uffa9\001" +
    "\002\000\006\056\uffa7\063\374\001\002\000\004\056\uffa8" +
    "\001\002\000\004\005\012\001\002\000\006\056\uffa7\063" +
    "\374\001\002\000\004\056\uffab\001\002\000\006\056\uffa7" +
    "\063\374\001\002\000\004\056\uffaa\001\002\000\006\056" +
    "\uffa7\063\374\001\002\000\004\056\uffad\001\002\000\004" +
    "\005\012\001\002\000\006\056\uffa7\063\374\001\002\000" +
    "\004\056\uffb0\001\002\000\006\056\uffa7\063\374\001\002" +
    "\000\004\056\uffaf\001\002\000\004\057\u0112\001\002\000" +
    "\026\005\012\013\024\015\206\016\177\020\172\021\210" +
    "\027\017\030\027\031\006\060\uffbd\001\002\000\004\060" +
    "\u0114\001\002\000\024\005\uff96\006\uff96\007\uff96\010\uff96" +
    "\013\uff96\014\uff96\027\uff96\030\uff96\031\uff96\001\002\000" +
    "\004\055\u0116\001\002\000\014\005\012\027\017\030\027" +
    "\031\006\056\uffac\001\002\000\004\056\u0118\001\002\000" +
    "\004\057\u0119\001\002\000\026\005\012\011\uff99\013\024" +
    "\015\206\016\177\020\172\021\210\027\017\030\027\031" +
    "\006\001\002\000\004\064\u0140\001\002\000\004\064\u013e" +
    "\001\002\000\026\005\012\011\uff99\013\024\015\206\016" +
    "\177\020\172\021\210\027\017\030\027\031\006\001\002" +
    "\000\026\005\012\011\uff99\013\024\015\206\016\177\020" +
    "\172\021\210\027\017\030\027\031\006\001\002\000\004" +
    "\064\u013a\001\002\000\004\064\u0138\001\002\000\004\064" +
    "\u0136\001\002\000\004\064\u0134\001\002\000\026\005\012" +
    "\011\uff99\013\024\015\206\016\177\020\172\021\210\027" +
    "\017\030\027\031\006\001\002\000\026\005\012\011\uff99" +
    "\013\024\015\206\016\177\020\172\021\210\027\017\030" +
    "\027\031\006\001\002\000\004\064\u0130\001\002\000\004" +
    "\064\u012e\001\002\000\004\064\u012c\001\002\000\004\011" +
    "\u0128\001\002\000\016\004\050\005\012\033\047\034\060" +
    "\054\046\057\055\001\002\000\006\053\071\064\u012a\001" +
    "\002\000\004\060\u012b\001\002\000\024\005\uff97\006\uff97" +
    "\007\uff97\010\uff97\013\uff97\014\uff97\027\uff97\030\uff97\031" +
    "\uff97\001\002\000\026\005\012\011\uff99\013\024\015\206" +
    "\016\177\020\172\021\210\027\017\030\027\031\006\001" +
    "\002\000\004\011\uffa4\001\002\000\026\005\012\011\uff99" +
    "\013\024\015\206\016\177\020\172\021\210\027\017\030" +
    "\027\031\006\001\002\000\004\011\uffa2\001\002\000\026" +
    "\005\012\011\uff99\013\024\015\206\016\177\020\172\021" +
    "\210\027\017\030\027\031\006\001\002\000\004\011\uff9b" +
    "\001\002\000\004\011\uff9c\001\002\000\004\011\uff9d\001" +
    "\002\000\026\005\012\011\uff99\013\024\015\206\016\177" +
    "\020\172\021\210\027\017\030\027\031\006\001\002\000" +
    "\004\011\uffa1\001\002\000\026\005\012\011\uff99\013\024" +
    "\015\206\016\177\020\172\021\210\027\017\030\027\031" +
    "\006\001\002\000\004\011\uffa5\001\002\000\026\005\012" +
    "\011\uff99\013\024\015\206\016\177\020\172\021\210\027" +
    "\017\030\027\031\006\001\002\000\004\011\uffa0\001\002" +
    "\000\026\005\012\011\uff99\013\024\015\206\016\177\020" +
    "\172\021\210\027\017\030\027\031\006\001\002\000\004" +
    "\011\uffa3\001\002\000\004\011\uff9f\001\002\000\004\011" +
    "\uff9e\001\002\000\026\005\012\011\uff99\013\024\015\206" +
    "\016\177\020\172\021\210\027\017\030\027\031\006\001" +
    "\002\000\004\011\uff9a\001\002\000\026\005\012\011\uff99" +
    "\013\024\015\206\016\177\020\172\021\210\027\017\030" +
    "\027\031\006\001\002\000\004\011\uffa6\001\002\000\004" +
    "\055\u0143\001\002\000\014\005\012\027\017\030\027\031" +
    "\006\056\uffac\001\002\000\004\056\u0145\001\002\000\004" +
    "\057\u0146\001\002\000\026\005\012\011\uff99\013\024\015" +
    "\206\016\177\020\172\021\210\027\017\030\027\031\006" +
    "\001\002\000\004\011\u0148\001\002\000\016\004\050\005" +
    "\012\033\047\034\060\054\046\057\055\001\002\000\006" +
    "\053\071\064\u014a\001\002\000\004\060\u014b\001\002\000" +
    "\024\005\uff98\006\uff98\007\uff98\010\uff98\013\uff98\014\uff98" +
    "\027\uff98\030\uff98\031\uff98\001\002\000\004\014\uffff\001" +
    "\002\000\004\002\000\001\002\000\006\047\u014f\064\uffb4" +
    "\001\002\000\004\057\055\001\002\000\004\064\uffb2\001" +
    "\002\000\012\005\012\027\017\030\027\031\006\001\002" +
    "\000\004\063\u0157\001\002\000\004\063\u0154\001\002\000" +
    "\004\004\u0155\001\002\000\004\043\u0156\001\002\000\010" +
    "\005\uff7f\063\uff7f\070\uff7f\001\002\000\004\004\u0158\001" +
    "\002\000\004\043\u0159\001\002\000\010\005\uff80\063\uff80" +
    "\070\uff80\001\002\000\004\057\u015b\001\002\000\014\005" +
    "\012\027\017\030\027\031\006\060\uff89\001\002\000\004" +
    "\060\u0165\001\002\000\004\064\u0163\001\002\000\004\064" +
    "\u0161\001\002\000\004\005\012\001\002\000\004\064\uffb5" +
    "\001\002\000\014\005\012\027\017\030\027\031\006\060" +
    "\uff89\001\002\000\004\060\uff8b\001\002\000\014\005\012" +
    "\027\017\030\027\031\006\060\uff89\001\002\000\004\060" +
    "\uff8a\001\002\000\004\064\uff8c\001\002\000\024\005\012" +
    "\006\023\007\005\010\013\013\024\014\ufff5\027\017\030" +
    "\027\031\006\001\002\000\004\014\ufffe\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\u0165\000\040\002\007\003\013\020\024\027\030\030" +
    "\017\031\003\032\014\033\020\034\031\035\021\036\010" +
    "\041\015\042\027\047\025\050\006\001\001\000\002\001" +
    "\001\000\004\020\u0159\001\001\000\002\001\001\000\004" +
    "\020\u014d\001\001\000\002\001\001\000\036\003\u014b\020" +
    "\024\027\030\030\017\031\003\032\014\033\020\034\031" +
    "\035\021\036\010\041\015\042\027\047\025\050\006\001" +
    "\001\000\002\001\001\000\010\020\151\047\361\050\362" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\006\020\151\047\152\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\020\040\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\036\003\033\020\024\027\030\030\017" +
    "\031\003\032\014\033\020\034\031\035\021\036\010\041" +
    "\015\042\027\047\025\050\006\001\001\000\002\001\001" +
    "\000\036\003\035\020\024\027\030\030\017\031\003\032" +
    "\014\033\020\034\031\035\021\036\010\041\015\042\027" +
    "\047\025\050\006\001\001\000\002\001\001\000\036\003" +
    "\037\020\024\027\030\030\017\031\003\032\014\033\020" +
    "\034\031\035\021\036\010\041\015\042\027\047\025\050" +
    "\006\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\020\042\001\001\000\002\001\001\000\032\007\062\010" +
    "\061\011\060\012\056\013\055\014\053\015\052\016\051" +
    "\020\064\044\063\045\050\046\044\001\001\000\002\001" +
    "\001\000\026\011\137\012\056\013\055\014\053\015\052" +
    "\016\051\020\064\044\063\045\050\046\044\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\034\007" +
    "\133\010\061\011\060\012\056\013\055\014\053\015\052" +
    "\016\051\020\064\044\063\045\050\046\044\057\132\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\034\007\076\010\061" +
    "\011\060\012\056\013\055\014\053\015\052\016\051\020" +
    "\064\044\063\045\050\046\044\053\075\001\001\000\032" +
    "\007\067\010\061\011\060\012\056\013\055\014\053\015" +
    "\052\016\051\020\064\044\063\045\050\046\044\001\001" +
    "\000\002\001\001\000\030\010\072\011\060\012\056\013" +
    "\055\014\053\015\052\016\051\020\064\044\063\045\050" +
    "\046\044\001\001\000\002\001\001\000\002\001\001\000" +
    "\026\011\074\012\056\013\055\014\053\015\052\016\051" +
    "\020\064\044\063\045\050\046\044\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\054\100\001\001\000\032" +
    "\007\101\010\061\011\060\012\056\013\055\014\053\015" +
    "\052\016\051\020\064\044\063\045\050\046\044\001\001" +
    "\000\002\001\001\000\004\054\102\001\001\000\002\001" +
    "\001\000\002\001\001\000\022\013\131\014\053\015\052" +
    "\016\051\020\064\044\063\045\050\046\044\001\001\000" +
    "\022\013\106\014\053\015\052\016\051\020\064\044\063" +
    "\045\050\046\044\001\001\000\002\001\001\000\020\014" +
    "\130\015\052\016\051\020\064\044\063\045\050\046\044" +
    "\001\001\000\020\014\127\015\052\016\051\020\064\044" +
    "\063\045\050\046\044\001\001\000\020\014\126\015\052" +
    "\016\051\020\064\044\063\045\050\046\044\001\001\000" +
    "\020\014\113\015\052\016\051\020\064\044\063\045\050" +
    "\046\044\001\001\000\002\001\001\000\016\015\125\016" +
    "\051\020\064\044\063\045\050\046\044\001\001\000\016" +
    "\015\116\016\051\020\064\044\063\045\050\046\044\001" +
    "\001\000\002\001\001\000\014\016\124\020\064\044\063" +
    "\045\050\046\044\001\001\000\014\016\123\020\064\044" +
    "\063\045\050\046\044\001\001\000\014\016\122\020\064" +
    "\044\063\045\050\046\044\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\032\007\136\010\061\011\060\012\056\013\055\014" +
    "\053\015\052\016\051\020\064\044\063\045\050\046\044" +
    "\001\001\000\002\001\001\000\002\001\001\000\032\007" +
    "\142\010\061\011\060\012\056\013\055\014\053\015\052" +
    "\016\051\020\064\044\063\045\050\046\044\001\001\000" +
    "\034\007\133\010\061\011\060\012\056\013\055\014\053" +
    "\015\052\016\051\020\064\044\063\045\143\046\044\057" +
    "\132\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\020\145\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\020\153\001\001\000\002\001\001\000\036\003\155\020" +
    "\024\027\030\030\017\031\003\032\014\033\020\034\031" +
    "\035\021\036\010\041\015\042\027\047\025\050\006\001" +
    "\001\000\002\001\001\000\036\003\157\020\024\027\030" +
    "\030\017\031\003\032\014\033\020\034\031\035\021\036" +
    "\010\041\015\042\027\047\025\050\006\001\001\000\002" +
    "\001\001\000\036\003\161\020\024\027\030\030\017\031" +
    "\003\032\014\033\020\034\031\035\021\036\010\041\015" +
    "\042\027\047\025\050\006\001\001\000\002\001\001\000" +
    "\036\003\163\020\024\027\030\030\017\031\003\032\014" +
    "\033\020\034\031\035\021\036\010\041\015\042\027\047" +
    "\025\050\006\001\001\000\002\001\001\000\036\003\165" +
    "\020\024\027\030\030\017\031\003\032\014\033\020\034" +
    "\031\035\021\036\010\041\015\042\027\047\025\050\006" +
    "\001\001\000\002\001\001\000\002\001\001\000\044\004" +
    "\173\020\206\022\174\023\203\024\204\026\175\027\211" +
    "\030\201\031\170\032\177\033\202\034\212\037\200\042" +
    "\210\043\172\047\025\050\006\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\044\004\345\020\206\022\174\023\203\024\204\026\175" +
    "\027\211\030\201\031\170\032\177\033\202\034\212\037" +
    "\200\042\210\043\172\047\025\050\006\001\001\000\044" +
    "\004\344\020\206\022\174\023\203\024\204\026\175\027" +
    "\211\030\201\031\170\032\177\033\202\034\212\037\200" +
    "\042\210\043\172\047\025\050\006\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\044\004\321\020\206\022\174\023" +
    "\203\024\204\026\175\027\211\030\201\031\170\032\177" +
    "\033\202\034\212\037\200\042\210\043\172\047\025\050" +
    "\006\001\001\000\044\004\320\020\206\022\174\023\203" +
    "\024\204\026\175\027\211\030\201\031\170\032\177\033" +
    "\202\034\212\037\200\042\210\043\172\047\025\050\006" +
    "\001\001\000\032\007\317\010\061\011\060\012\056\013" +
    "\055\014\053\015\052\016\051\020\064\044\063\045\050" +
    "\046\044\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\044" +
    "\004\214\020\206\022\174\023\203\024\204\026\175\027" +
    "\211\030\201\031\170\032\177\033\202\034\212\037\200" +
    "\042\210\043\172\047\025\050\006\001\001\000\002\001" +
    "\001\000\044\004\216\020\206\022\174\023\203\024\204" +
    "\026\175\027\211\030\201\031\170\032\177\033\202\034" +
    "\212\037\200\042\210\043\172\047\025\050\006\001\001" +
    "\000\002\001\001\000\044\004\220\020\206\022\174\023" +
    "\203\024\204\026\175\027\211\030\201\031\170\032\177" +
    "\033\202\034\212\037\200\042\210\043\172\047\025\050" +
    "\006\001\001\000\002\001\001\000\012\020\223\027\224" +
    "\031\222\047\225\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\020\226\001\001\000\002" +
    "\001\001\000\032\007\230\010\061\011\060\012\056\013" +
    "\055\014\053\015\052\016\051\020\064\044\063\045\050" +
    "\046\044\001\001\000\002\001\001\000\006\020\232\027" +
    "\233\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\044\005\250\020\206\022\240\023\246\024" +
    "\247\026\241\027\252\030\244\031\236\032\242\033\245" +
    "\034\253\037\243\042\251\043\237\047\025\050\006\001" +
    "\001\000\002\001\001\000\002\001\001\000\044\005\276" +
    "\020\206\022\240\023\246\024\247\026\241\027\252\030" +
    "\244\031\236\032\242\033\245\034\253\037\243\042\251" +
    "\043\237\047\025\050\006\001\001\000\044\005\275\020" +
    "\206\022\240\023\246\024\247\026\241\027\252\030\244" +
    "\031\236\032\242\033\245\034\253\037\243\042\251\043" +
    "\237\047\025\050\006\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\044\005" +
    "\264\020\206\022\240\023\246\024\247\026\241\027\252" +
    "\030\244\031\236\032\242\033\245\034\253\037\243\042" +
    "\251\043\237\047\025\050\006\001\001\000\044\005\263" +
    "\020\206\022\240\023\246\024\247\026\241\027\252\030" +
    "\244\031\236\032\242\033\245\034\253\037\243\042\251" +
    "\043\237\047\025\050\006\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\044" +
    "\005\255\020\206\022\240\023\246\024\247\026\241\027" +
    "\252\030\244\031\236\032\242\033\245\034\253\037\243" +
    "\042\251\043\237\047\025\050\006\001\001\000\002\001" +
    "\001\000\044\005\257\020\206\022\240\023\246\024\247" +
    "\026\241\027\252\030\244\031\236\032\242\033\245\034" +
    "\253\037\243\042\251\043\237\047\025\050\006\001\001" +
    "\000\002\001\001\000\044\005\261\020\206\022\240\023" +
    "\246\024\247\026\241\027\252\030\244\031\236\032\242" +
    "\033\245\034\253\037\243\042\251\043\237\047\025\050" +
    "\006\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\044\005\266\020\206\022" +
    "\240\023\246\024\247\026\241\027\252\030\244\031\236" +
    "\032\242\033\245\034\253\037\243\042\251\043\237\047" +
    "\025\050\006\001\001\000\002\001\001\000\044\005\270" +
    "\020\206\022\240\023\246\024\247\026\241\027\252\030" +
    "\244\031\236\032\242\033\245\034\253\037\243\042\251" +
    "\043\237\047\025\050\006\001\001\000\002\001\001\000" +
    "\044\005\272\020\206\022\240\023\246\024\247\026\241" +
    "\027\252\030\244\031\236\032\242\033\245\034\253\037" +
    "\243\042\251\043\237\047\025\050\006\001\001\000\002" +
    "\001\001\000\044\005\274\020\206\022\240\023\246\024" +
    "\247\026\241\027\252\030\244\031\236\032\242\033\245" +
    "\034\253\037\243\042\251\043\237\047\025\050\006\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\044\005\300\020\206\022\240\023\246\024\247\026" +
    "\241\027\252\030\244\031\236\032\242\033\245\034\253" +
    "\037\243\042\251\043\237\047\025\050\006\001\001\000" +
    "\002\001\001\000\044\005\302\020\206\022\240\023\246" +
    "\024\247\026\241\027\252\030\244\031\236\032\242\033" +
    "\245\034\253\037\243\042\251\043\237\047\025\050\006" +
    "\001\001\000\002\001\001\000\032\007\142\010\061\011" +
    "\060\012\056\013\055\014\053\015\052\016\051\020\064" +
    "\044\063\045\050\046\044\001\001\000\032\007\305\010" +
    "\061\011\060\012\056\013\055\014\053\015\052\016\051" +
    "\020\064\044\063\045\050\046\044\001\001\000\002\001" +
    "\001\000\006\020\232\027\307\001\001\000\002\001\001" +
    "\000\002\001\001\000\044\005\312\020\206\022\240\023" +
    "\246\024\247\026\241\027\252\030\244\031\236\032\242" +
    "\033\245\034\253\037\243\042\251\043\237\047\025\050" +
    "\006\001\001\000\002\001\001\000\002\001\001\000\034" +
    "\007\076\010\061\011\060\012\056\013\055\014\053\015" +
    "\052\016\051\020\064\044\063\045\050\046\044\053\315" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\044\004\323" +
    "\020\206\022\174\023\203\024\204\026\175\027\211\030" +
    "\201\031\170\032\177\033\202\034\212\037\200\042\210" +
    "\043\172\047\025\050\006\001\001\000\002\001\001\000" +
    "\044\004\325\020\206\022\174\023\203\024\204\026\175" +
    "\027\211\030\201\031\170\032\177\033\202\034\212\037" +
    "\200\042\210\043\172\047\025\050\006\001\001\000\002" +
    "\001\001\000\044\004\327\020\206\022\174\023\203\024" +
    "\204\026\175\027\211\030\201\031\170\032\177\033\202" +
    "\034\212\037\200\042\210\043\172\047\025\050\006\001" +
    "\001\000\002\001\001\000\044\004\331\020\206\022\174" +
    "\023\203\024\204\026\175\027\211\030\201\031\170\032" +
    "\177\033\202\034\212\037\200\042\210\043\172\047\025" +
    "\050\006\001\001\000\002\001\001\000\032\007\333\010" +
    "\061\011\060\012\056\013\055\014\053\015\052\016\051" +
    "\020\064\044\063\045\050\046\044\001\001\000\002\001" +
    "\001\000\002\001\001\000\044\005\336\020\206\022\240" +
    "\023\246\024\247\026\241\027\252\030\244\031\236\032" +
    "\242\033\245\034\253\037\243\042\251\043\237\047\025" +
    "\050\006\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\044\005\342\020\206\022\240\023\246" +
    "\024\247\026\241\027\252\030\244\031\236\032\242\033" +
    "\245\034\253\037\243\042\251\043\237\047\025\050\006" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\044\004\350" +
    "\020\206\022\174\023\203\024\204\026\175\027\211\030" +
    "\201\031\170\032\177\033\202\034\212\037\200\042\210" +
    "\043\172\047\025\050\006\001\001\000\002\001\001\000" +
    "\032\007\352\010\061\011\060\012\056\013\055\014\053" +
    "\015\052\016\051\020\064\044\063\045\050\046\044\001" +
    "\001\000\002\001\001\000\002\001\001\000\044\005\355" +
    "\020\206\022\240\023\246\024\247\026\241\027\252\030" +
    "\244\031\236\032\242\033\245\034\253\037\243\042\251" +
    "\043\237\047\025\050\006\001\001\000\002\001\001\000" +
    "\002\001\001\000\044\004\360\020\206\022\174\023\203" +
    "\024\204\026\175\027\211\030\201\031\170\032\177\033" +
    "\202\034\212\037\200\042\210\043\172\047\025\050\006" +
    "\001\001\000\002\001\001\000\004\020\u0141\001\001\000" +
    "\004\020\u0114\001\001\000\004\020\364\001\001\000\002" +
    "\001\001\000\012\020\151\047\367\050\370\051\366\001" +
    "\001\000\002\001\001\000\004\020\u010c\001\001\000\004" +
    "\020\372\001\001\000\004\020\u0109\001\001\000\004\052" +
    "\374\001\001\000\010\020\151\047\375\050\376\001\001" +
    "\000\002\001\001\000\004\020\u0105\001\001\000\004\020" +
    "\u0100\001\001\000\004\020\u0102\001\001\000\004\052\u0101" +
    "\001\001\000\002\001\001\000\004\052\u0103\001\001\000" +
    "\002\001\001\000\004\020\u0107\001\001\000\004\052\u0106" +
    "\001\001\000\002\001\001\000\004\052\u0108\001\001\000" +
    "\002\001\001\000\004\052\u010a\001\001\000\002\001\001" +
    "\000\004\020\u010e\001\001\000\004\052\u010d\001\001\000" +
    "\002\001\001\000\004\052\u010f\001\001\000\002\001\001" +
    "\000\002\001\001\000\044\005\u0112\020\206\022\240\023" +
    "\246\024\247\026\241\027\252\030\244\031\236\032\242" +
    "\033\245\034\253\037\243\042\251\043\237\047\025\050" +
    "\006\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\012\020\151\047\367\050\370\051\u0116\001" +
    "\001\000\002\001\001\000\002\001\001\000\044\006\u0126" +
    "\020\206\022\u011b\023\u0121\024\u0122\026\u011c\027\u0124\030" +
    "\u011f\031\u0119\032\u011d\033\u0120\034\u0125\037\u011e\042\u0123" +
    "\043\u011a\047\025\050\006\001\001\000\002\001\001\000" +
    "\002\001\001\000\044\006\u013c\020\206\022\u011b\023\u0121" +
    "\024\u0122\026\u011c\027\u0124\030\u011f\031\u0119\032\u011d\033" +
    "\u0120\034\u0125\037\u011e\042\u0123\043\u011a\047\025\050\006" +
    "\001\001\000\044\006\u013b\020\206\022\u011b\023\u0121\024" +
    "\u0122\026\u011c\027\u0124\030\u011f\031\u0119\032\u011d\033\u0120" +
    "\034\u0125\037\u011e\042\u0123\043\u011a\047\025\050\006\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\044\006\u0132\020\206\022\u011b\023" +
    "\u0121\024\u0122\026\u011c\027\u0124\030\u011f\031\u0119\032\u011d" +
    "\033\u0120\034\u0125\037\u011e\042\u0123\043\u011a\047\025\050" +
    "\006\001\001\000\044\006\u0131\020\206\022\u011b\023\u0121" +
    "\024\u0122\026\u011c\027\u0124\030\u011f\031\u0119\032\u011d\033" +
    "\u0120\034\u0125\037\u011e\042\u0123\043\u011a\047\025\050\006" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\032\007\u0128\010\061\011\060" +
    "\012\056\013\055\014\053\015\052\016\051\020\064\044" +
    "\063\045\050\046\044\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\044\006\u012c\020\206\022" +
    "\u011b\023\u0121\024\u0122\026\u011c\027\u0124\030\u011f\031\u0119" +
    "\032\u011d\033\u0120\034\u0125\037\u011e\042\u0123\043\u011a\047" +
    "\025\050\006\001\001\000\002\001\001\000\044\006\u012e" +
    "\020\206\022\u011b\023\u0121\024\u0122\026\u011c\027\u0124\030" +
    "\u011f\031\u0119\032\u011d\033\u0120\034\u0125\037\u011e\042\u0123" +
    "\043\u011a\047\025\050\006\001\001\000\002\001\001\000" +
    "\044\006\u0130\020\206\022\u011b\023\u0121\024\u0122\026\u011c" +
    "\027\u0124\030\u011f\031\u0119\032\u011d\033\u0120\034\u0125\037" +
    "\u011e\042\u0123\043\u011a\047\025\050\006\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\044\006" +
    "\u0134\020\206\022\u011b\023\u0121\024\u0122\026\u011c\027\u0124" +
    "\030\u011f\031\u0119\032\u011d\033\u0120\034\u0125\037\u011e\042" +
    "\u0123\043\u011a\047\025\050\006\001\001\000\002\001\001" +
    "\000\044\006\u0136\020\206\022\u011b\023\u0121\024\u0122\026" +
    "\u011c\027\u0124\030\u011f\031\u0119\032\u011d\033\u0120\034\u0125" +
    "\037\u011e\042\u0123\043\u011a\047\025\050\006\001\001\000" +
    "\002\001\001\000\044\006\u0138\020\206\022\u011b\023\u0121" +
    "\024\u0122\026\u011c\027\u0124\030\u011f\031\u0119\032\u011d\033" +
    "\u0120\034\u0125\037\u011e\042\u0123\043\u011a\047\025\050\006" +
    "\001\001\000\002\001\001\000\044\006\u013a\020\206\022" +
    "\u011b\023\u0121\024\u0122\026\u011c\027\u0124\030\u011f\031\u0119" +
    "\032\u011d\033\u0120\034\u0125\037\u011e\042\u0123\043\u011a\047" +
    "\025\050\006\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\044\006\u013e\020\206\022\u011b\023" +
    "\u0121\024\u0122\026\u011c\027\u0124\030\u011f\031\u0119\032\u011d" +
    "\033\u0120\034\u0125\037\u011e\042\u0123\043\u011a\047\025\050" +
    "\006\001\001\000\002\001\001\000\044\006\u0140\020\206" +
    "\022\u011b\023\u0121\024\u0122\026\u011c\027\u0124\030\u011f\031" +
    "\u0119\032\u011d\033\u0120\034\u0125\037\u011e\042\u0123\043\u011a" +
    "\047\025\050\006\001\001\000\002\001\001\000\002\001" +
    "\001\000\012\020\151\047\367\050\370\051\u0143\001\001" +
    "\000\002\001\001\000\002\001\001\000\044\006\u0146\020" +
    "\206\022\u011b\023\u0121\024\u0122\026\u011c\027\u0124\030\u011f" +
    "\031\u0119\032\u011d\033\u0120\034\u0125\037\u011e\042\u0123\043" +
    "\u011a\047\025\050\006\001\001\000\002\001\001\000\032" +
    "\007\u0148\010\061\011\060\012\056\013\055\014\053\015" +
    "\052\016\051\020\064\044\063\045\050\046\044\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\045\u014f\001\001\000\002\001\001\000\010\020\151\047" +
    "\u0151\050\u0152\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\016\020\151\030\u015d\034\u015c\047\u015e\050" +
    "\006\061\u015b\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\020\u015f\001\001\000\002\001" +
    "\001\000\016\020\151\030\u015d\034\u015c\047\u015e\050\006" +
    "\061\u0161\001\001\000\002\001\001\000\016\020\151\030" +
    "\u015d\034\u015c\047\u015e\050\006\061\u0163\001\001\000\002" +
    "\001\001\000\002\001\001\000\036\003\u0166\020\024\027" +
    "\030\030\017\031\003\032\014\033\020\034\031\035\021" +
    "\036\010\041\015\042\027\047\025\050\006\001\001\000" +
    "\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$AnalizadorSintacticoTiny$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$AnalizadorSintacticoTiny$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$AnalizadorSintacticoTiny$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 1;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}


  /** User initialization code. */
  public void user_init() throws java.lang.Exception
    {
 
   errores = new GestionErrores();
   AnalizadorLexicoTiny alex = (AnalizadorLexicoTiny)getScanner();
   alex.fijaGestionErrores(errores);

    }

  /** Scan to get the next Symbol. */
  public java_cup.runtime.Symbol scan()
    throws java.lang.Exception
    {
 return getScanner().next_token(); 
    }

 
   private GestionErrores errores;
   public void syntax_error(Symbol unidadLexica) {
     errores.errorSintactico((UnidadLexica)unidadLexica);
   }

}

/** Cup generated class to encapsulate user supplied action code.*/
class CUP$AnalizadorSintacticoTiny$actions {


   private ASExpresion as = new ASExpresion();

  private final AnalizadorSintacticoTiny parser;

  /** Constructor */
  CUP$AnalizadorSintacticoTiny$actions(AnalizadorSintacticoTiny parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$AnalizadorSintacticoTiny$do_action_part00000000(
    int                        CUP$AnalizadorSintacticoTiny$act_num,
    java_cup.runtime.lr_parser CUP$AnalizadorSintacticoTiny$parser,
    java.util.Stack            CUP$AnalizadorSintacticoTiny$stack,
    int                        CUP$AnalizadorSintacticoTiny$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$AnalizadorSintacticoTiny$result;

      /* select the action based on the action number */
      switch (CUP$AnalizadorSintacticoTiny$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // PROG_COMP ::= CABECERA MAIN LLAVEAPERTURA CUERPO_MAIN LLAVECIERRE 
            {
              ProgramaCompleto RESULT =null;
		Cabecera cab = (Cabecera)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-4)).value;
		CuerpoMain c_main = (CuerpoMain)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-1)).value;
		 RESULT = new ProgramaCompleto(cab, c_main); 
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("PROG_COMP",0, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // $START ::= PROG_COMP EOF 
            {
              Object RESULT =null;
		ProgramaCompleto start_val = (ProgramaCompleto)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-1)).value;
		RESULT = start_val;
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("$START",0, RESULT);
            }
          /* ACCEPT */
          CUP$AnalizadorSintacticoTiny$parser.done_parsing();
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // CABECERA ::= INST_DECL_FUN CABECERA 
            {
              Cabecera RESULT =null;
		InstruccionDeclFuncion inst = (InstruccionDeclFuncion)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-1)).value;
		Cabecera cab = (Cabecera)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.peek()).value;
		 cab.addInstr(inst); RESULT = cab; 
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("CABECERA",1, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // CABECERA ::= INST_DECLASIG PUNTOCOMA CABECERA 
            {
              Cabecera RESULT =null;
		InstruccionDeclaracion inst = (InstruccionDeclaracion)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-2)).value;
		Cabecera cab = (Cabecera)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.peek()).value;
		 cab.addInstr(inst); RESULT = cab; 
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("CABECERA",1, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // CABECERA ::= INST_DECL PUNTOCOMA CABECERA 
            {
              Cabecera RESULT =null;
		InstruccionDeclaracion inst = (InstruccionDeclaracion)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-2)).value;
		Cabecera cab = (Cabecera)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.peek()).value;
		 cab.addInstr(inst); RESULT = cab; 
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("CABECERA",1, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // CABECERA ::= INST_DECL_VECTOR PUNTOCOMA CABECERA 
            {
              Cabecera RESULT =null;
		InstruccionDeclVector inst = (InstruccionDeclVector)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-2)).value;
		Cabecera cab = (Cabecera)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.peek()).value;
		 cab.addInstr(inst); RESULT = cab; 
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("CABECERA",1, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // CABECERA ::= INST_DECL_PUNT PUNTOCOMA CABECERA 
            {
              Cabecera RESULT =null;
		InstruccionDeclaracion inst = (InstruccionDeclaracion)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-2)).value;
		Cabecera cab = (Cabecera)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.peek()).value;
		 cab.addInstr(inst); RESULT = cab; 
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("CABECERA",1, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // CABECERA ::= INST_ASIG PUNTOCOMA CABECERA 
            {
              Cabecera RESULT =null;
		InstruccionAsignacion inst = (InstruccionAsignacion)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-2)).value;
		Cabecera cab = (Cabecera)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.peek()).value;
		 cab.addInstr(inst); RESULT = cab; 
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("CABECERA",1, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // CABECERA ::= INST_ASIG_VECTOR PUNTOCOMA CABECERA 
            {
              Cabecera RESULT =null;
		InstruccionAsigVector inst = (InstruccionAsigVector)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-2)).value;
		Cabecera cab = (Cabecera)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.peek()).value;
		 cab.addInstr(inst); RESULT = cab; 
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("CABECERA",1, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // CABECERA ::= INST_TYPEDEF PUNTOCOMA CABECERA 
            {
              Cabecera RESULT =null;
		InstruccionTypedef inst = (InstruccionTypedef)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-2)).value;
		Cabecera cab = (Cabecera)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.peek()).value;
		 cab.addInstr(inst); RESULT = cab; 
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("CABECERA",1, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // CABECERA ::= INST_STRUCT PUNTOCOMA CABECERA 
            {
              Cabecera RESULT =null;
		InstruccionDeclStruct inst = (InstruccionDeclStruct)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-2)).value;
		Cabecera cab = (Cabecera)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.peek()).value;
		 cab.addInstr(inst); RESULT = cab; 
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("CABECERA",1, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // CABECERA ::= INST_MEM PUNTOCOMA CABECERA 
            {
              Cabecera RESULT =null;
		InstruccionReservaMemoria inst = (InstruccionReservaMemoria)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-2)).value;
		Cabecera cab = (Cabecera)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.peek()).value;
		 cab.addInstr(inst); RESULT = cab; 
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("CABECERA",1, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // CABECERA ::= 
            {
              Cabecera RESULT =null;
		 RESULT = new Cabecera(); 
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("CABECERA",1, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // CUERPO_MAIN ::= INST_DECLASIG PUNTOCOMA CUERPO_MAIN 
            {
              CuerpoMain RESULT =null;
		InstruccionDeclaracion inst = (InstruccionDeclaracion)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-2)).value;
		CuerpoMain c_main = (CuerpoMain)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.peek()).value;
		 c_main.addInstr(inst); RESULT = c_main; 
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("CUERPO_MAIN",2, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // CUERPO_MAIN ::= INST_DECL PUNTOCOMA CUERPO_MAIN 
            {
              CuerpoMain RESULT =null;
		InstruccionDeclaracion inst = (InstruccionDeclaracion)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-2)).value;
		CuerpoMain c_main = (CuerpoMain)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.peek()).value;
		 c_main.addInstr(inst); RESULT = c_main; 
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("CUERPO_MAIN",2, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // CUERPO_MAIN ::= INST_DECL_VECTOR PUNTOCOMA CUERPO_MAIN 
            {
              CuerpoMain RESULT =null;
		InstruccionDeclVector inst = (InstruccionDeclVector)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-2)).value;
		CuerpoMain c_main = (CuerpoMain)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.peek()).value;
		 c_main.addInstr(inst); RESULT = c_main; 
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("CUERPO_MAIN",2, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // CUERPO_MAIN ::= INST_DECL_PUNT PUNTOCOMA CUERPO_MAIN 
            {
              CuerpoMain RESULT =null;
		InstruccionDeclaracion inst = (InstruccionDeclaracion)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-2)).value;
		CuerpoMain c_main = (CuerpoMain)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.peek()).value;
		 c_main.addInstr(inst); RESULT = c_main; 
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("CUERPO_MAIN",2, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // CUERPO_MAIN ::= INST_ASIG PUNTOCOMA CUERPO_MAIN 
            {
              CuerpoMain RESULT =null;
		InstruccionAsignacion inst = (InstruccionAsignacion)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-2)).value;
		CuerpoMain c_main = (CuerpoMain)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.peek()).value;
		 c_main.addInstr(inst); RESULT = c_main; 
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("CUERPO_MAIN",2, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // CUERPO_MAIN ::= INST_ASIG_VECTOR PUNTOCOMA CUERPO_MAIN 
            {
              CuerpoMain RESULT =null;
		InstruccionAsigVector inst = (InstruccionAsigVector)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-2)).value;
		CuerpoMain c_main = (CuerpoMain)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.peek()).value;
		 c_main.addInstr(inst); RESULT = c_main; 
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("CUERPO_MAIN",2, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // CUERPO_MAIN ::= INST_CALL_PROC PUNTOCOMA CUERPO_MAIN 
            {
              CuerpoMain RESULT =null;
		InstruccionLlamadaFuncion inst = (InstruccionLlamadaFuncion)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-2)).value;
		CuerpoMain c_main = (CuerpoMain)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.peek()).value;
		 c_main.addInstr(inst); RESULT = c_main; 
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("CUERPO_MAIN",2, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // CUERPO_MAIN ::= INST_FOR CUERPO_MAIN 
            {
              CuerpoMain RESULT =null;
		InstruccionFor inst = (InstruccionFor)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-1)).value;
		CuerpoMain c_main = (CuerpoMain)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.peek()).value;
		 c_main.addInstr(inst); RESULT = c_main; 
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("CUERPO_MAIN",2, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // CUERPO_MAIN ::= INST_IF CUERPO_MAIN 
            {
              CuerpoMain RESULT =null;
		InstruccionIfElse inst = (InstruccionIfElse)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-1)).value;
		CuerpoMain c_main = (CuerpoMain)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.peek()).value;
		 c_main.addInstr(inst); RESULT = c_main; 
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("CUERPO_MAIN",2, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // CUERPO_MAIN ::= INST_IFELSE CUERPO_MAIN 
            {
              CuerpoMain RESULT =null;
		InstruccionIfElse inst = (InstruccionIfElse)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-1)).value;
		CuerpoMain c_main = (CuerpoMain)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.peek()).value;
		 c_main.addInstr(inst); RESULT = c_main; 
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("CUERPO_MAIN",2, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // CUERPO_MAIN ::= INST_WHILE CUERPO_MAIN 
            {
              CuerpoMain RESULT =null;
		InstruccionWhile inst = (InstruccionWhile)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-1)).value;
		CuerpoMain c_main = (CuerpoMain)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.peek()).value;
		 c_main.addInstr(inst); RESULT = c_main; 
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("CUERPO_MAIN",2, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // CUERPO_MAIN ::= INST_MEM PUNTOCOMA CUERPO_MAIN 
            {
              CuerpoMain RESULT =null;
		InstruccionReservaMemoria inst = (InstruccionReservaMemoria)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-2)).value;
		CuerpoMain c_main = (CuerpoMain)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.peek()).value;
		 c_main.addInstr(inst); RESULT = c_main; 
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("CUERPO_MAIN",2, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // CUERPO_MAIN ::= INST_PRINT PUNTOCOMA CUERPO_MAIN 
            {
              CuerpoMain RESULT =null;
		InstruccionPrint inst = (InstruccionPrint)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-2)).value;
		CuerpoMain c_main = (CuerpoMain)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.peek()).value;
		 c_main.addInstr(inst); RESULT = c_main; 
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("CUERPO_MAIN",2, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // CUERPO_MAIN ::= 
            {
              CuerpoMain RESULT =null;
		 RESULT = new CuerpoMain(); 
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("CUERPO_MAIN",2, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // Exp0 ::= Exp0 OR Exp1 
            {
              Expresion RESULT =null;
		Expresion exp1 = (Expresion)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-2)).value;
		Expresion exp2 = (Expresion)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.peek()).value;
		 RESULT = as.or(exp1, exp2); 
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("Exp0",5, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // Exp0 ::= Exp1 
            {
              Expresion RESULT =null;
		Expresion exp = (Expresion)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.peek()).value;
		 RESULT = exp; 
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("Exp0",5, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // Exp1 ::= Exp1 AND Exp2 
            {
              Expresion RESULT =null;
		Expresion exp1 = (Expresion)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-2)).value;
		Expresion exp2 = (Expresion)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.peek()).value;
		 RESULT = as.and(exp1, exp2); 
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("Exp1",6, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // Exp1 ::= Exp2 
            {
              Expresion RESULT =null;
		Expresion exp = (Expresion)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.peek()).value;
		 RESULT = exp; 
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("Exp1",6, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // Exp2 ::= NOT Exp2 
            {
              Expresion RESULT =null;
		Expresion exp2 = (Expresion)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.peek()).value;
		 RESULT = as.not(exp2); 
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("Exp2",7, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // Exp2 ::= Exp3 
            {
              Expresion RESULT =null;
		Expresion exp = (Expresion)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.peek()).value;
		 RESULT = exp; 
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("Exp2",7, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // Exp3 ::= Exp3 IGUALIGUAL Exp4 
            {
              Expresion RESULT =null;
		Expresion exp1 = (Expresion)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-2)).value;
		Expresion exp2 = (Expresion)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.peek()).value;
		 RESULT = as.equals(exp1, exp2); 
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("Exp3",8, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // Exp3 ::= Exp3 NOIGUAL Exp4 
            {
              Expresion RESULT =null;
		Expresion exp1 = (Expresion)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-2)).value;
		Expresion exp2 = (Expresion)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.peek()).value;
		 RESULT = as.nequals(exp1, exp2); 
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("Exp3",8, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // Exp3 ::= Exp4 
            {
              Expresion RESULT =null;
		Expresion exp = (Expresion)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.peek()).value;
		 RESULT = exp; 
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("Exp3",8, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // Exp4 ::= Exp4 MENOR Exp5 
            {
              Expresion RESULT =null;
		Expresion exp1 = (Expresion)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-2)).value;
		Expresion exp2 = (Expresion)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.peek()).value;
		 RESULT = as.lt(exp1, exp2); 
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("Exp4",9, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // Exp4 ::= Exp4 MAYOR Exp5 
            {
              Expresion RESULT =null;
		Expresion exp1 = (Expresion)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-2)).value;
		Expresion exp2 = (Expresion)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.peek()).value;
		 RESULT = as.gt(exp1, exp2); 
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("Exp4",9, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // Exp4 ::= Exp4 MENOROIGUAL Exp5 
            {
              Expresion RESULT =null;
		Expresion exp1 = (Expresion)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-2)).value;
		Expresion exp2 = (Expresion)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.peek()).value;
		 RESULT = as.leq(exp1, exp2); 
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("Exp4",9, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // Exp4 ::= Exp4 MAYOROIGUAL Exp5 
            {
              Expresion RESULT =null;
		Expresion exp1 = (Expresion)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-2)).value;
		Expresion exp2 = (Expresion)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.peek()).value;
		 RESULT = as.geq(exp1, exp2); 
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("Exp4",9, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // Exp4 ::= Exp5 
            {
              Expresion RESULT =null;
		Expresion exp = (Expresion)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.peek()).value;
		 RESULT = exp; 
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("Exp4",9, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // Exp5 ::= Exp5 SUM Exp6 
            {
              Expresion RESULT =null;
		Expresion exp1 = (Expresion)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-2)).value;
		Expresion exp2 = (Expresion)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.peek()).value;
		 RESULT = as.suma(exp1, exp2); 
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("Exp5",10, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // Exp5 ::= Exp5 SUB Exp6 
            {
              Expresion RESULT =null;
		Expresion exp1 = (Expresion)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-2)).value;
		Expresion exp2 = (Expresion)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.peek()).value;
		 RESULT = as.resta(exp1, exp2); 
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("Exp5",10, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // Exp5 ::= Exp6 
            {
              Expresion RESULT =null;
		Expresion exp = (Expresion)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.peek()).value;
		 RESULT = exp; 
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("Exp5",10, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // Exp6 ::= Exp6 MULT Exp7 
            {
              Expresion RESULT =null;
		Expresion exp1 = (Expresion)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-2)).value;
		Expresion exp2 = (Expresion)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.peek()).value;
		 RESULT = as.mul(exp1, exp2); 
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("Exp6",11, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // Exp6 ::= Exp6 DIV Exp7 
            {
              Expresion RESULT =null;
		Expresion exp1 = (Expresion)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-2)).value;
		Expresion exp2 = (Expresion)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.peek()).value;
		 RESULT = as.div(exp1, exp2); 
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("Exp6",11, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // Exp6 ::= Exp6 MOD Exp7 
            {
              Expresion RESULT =null;
		Expresion exp1 = (Expresion)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-2)).value;
		Expresion exp2 = (Expresion)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.peek()).value;
		 RESULT = as.mod(exp1, exp2); 
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("Exp6",11, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // Exp6 ::= Exp7 
            {
              Expresion RESULT =null;
		Expresion exp = (Expresion)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.peek()).value;
		 RESULT = exp; 
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("Exp6",11, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // Exp7 ::= NUM 
            {
              Expresion RESULT =null;
		String cadenaNum = (String)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.peek()).value;
		 RESULT = as.num(cadenaNum); 
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("Exp7",12, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // Exp7 ::= TRUE 
            {
              Expresion RESULT =null;
		 RESULT = as.bool_true(); 
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("Exp7",12, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // Exp7 ::= FALSE 
            {
              Expresion RESULT =null;
		 RESULT = as.bool_false(); 
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("Exp7",12, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // Exp7 ::= Ident 
            {
              Expresion RESULT =null;
		Id id = (Id)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.peek()).value;
		 RESULT = id; 
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("Exp7",12, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // Exp7 ::= EXPR_LLAM_FUN 
            {
              Expresion RESULT =null;
		ExpresionLlamadaFuncion llam_fun = (ExpresionLlamadaFuncion)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.peek()).value;
		 RESULT = llam_fun; 
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("Exp7",12, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // Exp7 ::= EXPR_ACC_VECT 
            {
              Expresion RESULT =null;
		ListIndex acc = (ListIndex)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.peek()).value;
		 RESULT = acc; 
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("Exp7",12, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // Exp7 ::= EXP_VECTOR 
            {
              Expresion RESULT =null;
		List v = (List)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.peek()).value;
		 RESULT = v; 
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("Exp7",12, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // CUER ::= INST_DECLASIG PUNTOCOMA CUER 
            {
              Cuerpo RESULT =null;
		InstruccionDeclaracion inst = (InstruccionDeclaracion)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-2)).value;
		Cuerpo c = (Cuerpo)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.peek()).value;
		 c.addInstr(inst); RESULT = c; 
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("CUER",3, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // CUER ::= INST_DECL PUNTOCOMA CUER 
            {
              Cuerpo RESULT =null;
		InstruccionDeclaracion inst = (InstruccionDeclaracion)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-2)).value;
		Cuerpo c = (Cuerpo)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.peek()).value;
		 c.addInstr(inst); RESULT = c; 
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("CUER",3, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // CUER ::= INST_DECL_VECTOR PUNTOCOMA CUER 
            {
              Cuerpo RESULT =null;
		InstruccionDeclVector inst = (InstruccionDeclVector)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-2)).value;
		Cuerpo c = (Cuerpo)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.peek()).value;
		 c.addInstr(inst); RESULT = c; 
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("CUER",3, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // CUER ::= INST_DECL_PUNT PUNTOCOMA CUER 
            {
              Cuerpo RESULT =null;
		InstruccionDeclaracion inst = (InstruccionDeclaracion)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-2)).value;
		Cuerpo c = (Cuerpo)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.peek()).value;
		 c.addInstr(inst); RESULT = c; 
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("CUER",3, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // CUER ::= INST_ASIG PUNTOCOMA CUER 
            {
              Cuerpo RESULT =null;
		InstruccionAsignacion inst = (InstruccionAsignacion)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-2)).value;
		Cuerpo c = (Cuerpo)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.peek()).value;
		 c.addInstr(inst); RESULT = c; 
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("CUER",3, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // CUER ::= INST_ASIG_VECTOR PUNTOCOMA CUER 
            {
              Cuerpo RESULT =null;
		InstruccionAsigVector inst = (InstruccionAsigVector)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-2)).value;
		Cuerpo c = (Cuerpo)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.peek()).value;
		 c.addInstr(inst); RESULT = c; 
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("CUER",3, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // CUER ::= INST_CALL_PROC PUNTOCOMA CUER 
            {
              Cuerpo RESULT =null;
		InstruccionLlamadaFuncion inst = (InstruccionLlamadaFuncion)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-2)).value;
		Cuerpo c = (Cuerpo)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.peek()).value;
		 c.addInstr(inst); RESULT = c; 
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("CUER",3, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // CUER ::= INST_FOR CUER 
            {
              Cuerpo RESULT =null;
		InstruccionFor inst = (InstruccionFor)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-1)).value;
		Cuerpo c = (Cuerpo)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.peek()).value;
		 c.addInstr(inst); RESULT = c; 
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("CUER",3, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // CUER ::= INST_IF CUER 
            {
              Cuerpo RESULT =null;
		InstruccionIfElse inst = (InstruccionIfElse)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-1)).value;
		Cuerpo c = (Cuerpo)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.peek()).value;
		 c.addInstr(inst); RESULT = c; 
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("CUER",3, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // CUER ::= INST_IFELSE CUER 
            {
              Cuerpo RESULT =null;
		InstruccionIfElse inst = (InstruccionIfElse)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-1)).value;
		Cuerpo c = (Cuerpo)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.peek()).value;
		 c.addInstr(inst); RESULT = c; 
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("CUER",3, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // CUER ::= INST_WHILE CUER 
            {
              Cuerpo RESULT =null;
		InstruccionWhile inst = (InstruccionWhile)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-1)).value;
		Cuerpo c = (Cuerpo)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.peek()).value;
		 c.addInstr(inst); RESULT = c; 
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("CUER",3, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // CUER ::= INST_MEM PUNTOCOMA CUER 
            {
              Cuerpo RESULT =null;
		InstruccionReservaMemoria inst = (InstruccionReservaMemoria)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-2)).value;
		Cuerpo c = (Cuerpo)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.peek()).value;
		 c.addInstr(inst); RESULT = c; 
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("CUER",3, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // CUER ::= INST_PRINT PUNTOCOMA CUER 
            {
              Cuerpo RESULT =null;
		InstruccionPrint inst = (InstruccionPrint)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-2)).value;
		Cuerpo c = (Cuerpo)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.peek()).value;
		 c.addInstr(inst); RESULT = c; 
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("CUER",3, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // CUER ::= 
            {
              Cuerpo RESULT =null;
		 RESULT = new Cuerpo(); 
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("CUER",3, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // INST_IF ::= IF PARAPERTURA Exp0 PARCIERRE LLAVEAPERTURA CUER LLAVECIERRE 
            {
              InstruccionIfElse RESULT =null;
		Expresion cond = (Expresion)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-4)).value;
		Cuerpo cif = (Cuerpo)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-1)).value;
		 RESULT = new InstruccionIfElse(cond, cif); 
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("INST_IF",16, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // INST_IFELSE ::= IF PARAPERTURA Exp0 PARCIERRE LLAVEAPERTURA CUER LLAVECIERRE ELSE LLAVEAPERTURA CUER LLAVECIERRE 
            {
              InstruccionIfElse RESULT =null;
		Expresion cond = (Expresion)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-8)).value;
		Cuerpo cif = (Cuerpo)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-5)).value;
		Cuerpo celse = (Cuerpo)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-1)).value;
		 RESULT = new InstruccionIfElse(cond, cif, celse); 
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("INST_IFELSE",17, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // INST_WHILE ::= WHILE PARAPERTURA Exp0 PARCIERRE LLAVEAPERTURA CUER LLAVECIERRE 
            {
              InstruccionWhile RESULT =null;
		Expresion cond = (Expresion)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-4)).value;
		Cuerpo cwhile = (Cuerpo)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-1)).value;
		 RESULT = new InstruccionWhile(cond, cwhile); 
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("INST_WHILE",18, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // INST_FOR ::= FOR PARAPERTURA INST_ASIG PUNTOCOMA Exp0 PUNTOCOMA INST_ASIG PARCIERRE LLAVEAPERTURA CUER LLAVECIERRE 
            {
              InstruccionFor RESULT =null;
		InstruccionAsignacion ini = (InstruccionAsignacion)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-8)).value;
		Expresion cond = (Expresion)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-6)).value;
		InstruccionAsignacion paso = (InstruccionAsignacion)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-4)).value;
		Cuerpo cfor = (Cuerpo)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-1)).value;
		 RESULT = new InstruccionFor(ini.getId(), ini.getValor(), cond, paso.getValor(), cfor); 
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("INST_FOR",20, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // INST_FOR ::= FOR PARAPERTURA INST_DECLASIG PUNTOCOMA Exp0 PUNTOCOMA INST_ASIG PARCIERRE LLAVEAPERTURA CUER LLAVECIERRE 
            {
              InstruccionFor RESULT =null;
		InstruccionDeclaracion ini = (InstruccionDeclaracion)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-8)).value;
		Expresion cond = (Expresion)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-6)).value;
		InstruccionAsignacion paso = (InstruccionAsignacion)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-4)).value;
		Cuerpo cfor = (Cuerpo)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-1)).value;
		 RESULT = new InstruccionFor(ini.getId(), ini.getValor(), cond, paso.getValor(), cfor); 
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("INST_FOR",20, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // INST_ASIG_VECTOR ::= Ident IGUAL LLAVEAPERTURA EXP_VECTOR 
            {
              InstruccionAsigVector RESULT =null;
		Id id = (Id)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-3)).value;
		List v = (List)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.peek()).value;
		 RESULT = new InstruccionAsigVector(id,v.valores());
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("INST_ASIG_VECTOR",25, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // INST_ASIG ::= Ident IGUAL Exp0 
            {
              InstruccionAsignacion RESULT =null;
		Id id = (Id)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-2)).value;
		Expresion exp = (Expresion)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.peek()).value;
		 RESULT = new InstruccionAsignacion(id, exp); 
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("INST_ASIG",21, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // INST_DECL ::= Tip Ident 
            {
              InstruccionDeclaracion RESULT =null;
		Tipo t = (Tipo)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-1)).value;
		Id id = (Id)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.peek()).value;
		 RESULT = new InstruccionDeclaracion(t,id); 
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("INST_DECL",22, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // INST_DECL_VECTOR ::= Tip_vect Ident 
            {
              InstruccionDeclVector RESULT =null;
		TipoLista t = (TipoLista)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-1)).value;
		Id id = (Id)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.peek()).value;
		 RESULT = new InstruccionDeclVector(t.getTipoDeLaLista(),id,t.length()); 
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("INST_DECL_VECTOR",26, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // INST_DECLASIG ::= Tip Ident IGUAL Exp0 
            {
              InstruccionDeclaracion RESULT =null;
		Tipo t = (Tipo)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-3)).value;
		Id id = (Id)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-2)).value;
		Expresion exp = (Expresion)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.peek()).value;
		 RESULT = new InstruccionDeclaracion(t,id,exp); 
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("INST_DECLASIG",23, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // INST_DECL_VECTOR ::= Tip_vect Ident IGUAL EXP_VECTOR 
            {
              InstruccionDeclVector RESULT =null;
		TipoLista t = (TipoLista)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-3)).value;
		Id id = (Id)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-2)).value;
		List v = (List)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.peek()).value;
		 RESULT = new InstruccionDeclVector(t.getTipoDeLaLista(),id,t.length(),v.valores());
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("INST_DECL_VECTOR",26, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // INST_DECL_PUNT ::= Tip DOLLAR Ident 
            {
              InstruccionDeclaracion RESULT =null;
		Tipo t = (Tipo)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-2)).value;
		Id id = (Id)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.peek()).value;
		 RESULT = new InstruccionDeclaracion(new TipoPuntero(t),id); 
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("INST_DECL_PUNT",24, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // ARGUMENTOS_INI ::= Tip Ident ARGUMENTOS 
            {
              ArrayDeque<Tipo_Id> RESULT =null;
		Tipo t = (Tipo)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-2)).value;
		Id id = (Id)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-1)).value;
		ArrayDeque<Tipo_Id> arg = (ArrayDeque<Tipo_Id>)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.peek()).value;
		 arg.addFirst(new Tipo_Id(t, id)); RESULT = arg; 
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("ARGUMENTOS_INI",39, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // ARGUMENTOS_INI ::= Tip AMPERSAND Ident ARGUMENTOS 
            {
              ArrayDeque<Tipo_Id> RESULT =null;
		Tipo t = (Tipo)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-3)).value;
		Id id = (Id)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-1)).value;
		ArrayDeque<Tipo_Id> arg = (ArrayDeque<Tipo_Id>)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.peek()).value;
		 arg.addFirst(new Tipo_Id(t, id)); RESULT = arg; 
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("ARGUMENTOS_INI",39, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // ARGUMENTOS_INI ::= Tip_vect Ident ARGUMENTOS 
            {
              ArrayDeque<Tipo_Id> RESULT =null;
		TipoLista t = (TipoLista)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-2)).value;
		Id id = (Id)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-1)).value;
		ArrayDeque<Tipo_Id> arg = (ArrayDeque<Tipo_Id>)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.peek()).value;
		 arg.addFirst(new Tipo_Id(t, id)); RESULT = arg; 
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("ARGUMENTOS_INI",39, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // ARGUMENTOS_INI ::= Tip_vect AMPERSAND Ident ARGUMENTOS 
            {
              ArrayDeque<Tipo_Id> RESULT =null;
		TipoLista t = (TipoLista)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-3)).value;
		Id id = (Id)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-1)).value;
		ArrayDeque<Tipo_Id> arg = (ArrayDeque<Tipo_Id>)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.peek()).value;
		 arg.addFirst(new Tipo_Id(t, id)); RESULT = arg; 
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("ARGUMENTOS_INI",39, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 85: // ARGUMENTOS_INI ::= 
            {
              ArrayDeque<Tipo_Id> RESULT =null;
		 RESULT = new ArrayDeque<Tipo_Id>(); 
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("ARGUMENTOS_INI",39, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 86: // ARGUMENTOS ::= COMA Tip Ident ARGUMENTOS 
            {
              ArrayDeque<Tipo_Id> RESULT =null;
		Tipo t = (Tipo)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-2)).value;
		Id id = (Id)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-1)).value;
		ArrayDeque<Tipo_Id> arg = (ArrayDeque<Tipo_Id>)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.peek()).value;
		 arg.addFirst(new Tipo_Id(t, id)); RESULT = arg; 
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("ARGUMENTOS",40, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 87: // ARGUMENTOS ::= COMA Tip AMPERSAND Ident ARGUMENTOS 
            {
              ArrayDeque<Tipo_Id> RESULT =null;
		Tipo t = (Tipo)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-3)).value;
		Id id = (Id)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-1)).value;
		ArrayDeque<Tipo_Id> arg = (ArrayDeque<Tipo_Id>)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.peek()).value;
		 arg.addFirst(new Tipo_Id(t, id)); RESULT = arg; 
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("ARGUMENTOS",40, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 88: // ARGUMENTOS ::= COMA Tip_vect Ident ARGUMENTOS 
            {
              ArrayDeque<Tipo_Id> RESULT =null;
		TipoLista t = (TipoLista)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-2)).value;
		Id id = (Id)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-1)).value;
		ArrayDeque<Tipo_Id> arg = (ArrayDeque<Tipo_Id>)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.peek()).value;
		 arg.addFirst(new Tipo_Id(t, id)); RESULT = arg; 
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("ARGUMENTOS",40, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 89: // ARGUMENTOS ::= COMA Tip_vect AMPERSAND Ident ARGUMENTOS 
            {
              ArrayDeque<Tipo_Id> RESULT =null;
		TipoLista t = (TipoLista)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-3)).value;
		Id id = (Id)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-1)).value;
		ArrayDeque<Tipo_Id> arg = (ArrayDeque<Tipo_Id>)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.peek()).value;
		 arg.addFirst(new Tipo_Id(t, id)); RESULT = arg; 
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("ARGUMENTOS",40, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 90: // ARGUMENTOS ::= 
            {
              ArrayDeque<Tipo_Id> RESULT =null;
		 RESULT = new ArrayDeque<Tipo_Id>(); 
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("ARGUMENTOS",40, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 91: // CUER_FUN ::= INST_DECLASIG PUNTOCOMA CUER_FUN 
            {
              Cuerpo RESULT =null;
		InstruccionDeclaracion inst = (InstruccionDeclaracion)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-2)).value;
		Cuerpo c = (Cuerpo)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.peek()).value;
		 c.addInstr(inst); RESULT = c; 
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("CUER_FUN",4, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 92: // CUER_FUN ::= INST_DECL PUNTOCOMA CUER_FUN 
            {
              Cuerpo RESULT =null;
		InstruccionDeclaracion inst = (InstruccionDeclaracion)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-2)).value;
		Cuerpo c = (Cuerpo)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.peek()).value;
		 c.addInstr(inst); RESULT = c; 
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("CUER_FUN",4, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 93: // CUER_FUN ::= INST_DECL_VECTOR PUNTOCOMA CUER_FUN 
            {
              Cuerpo RESULT =null;
		InstruccionDeclVector inst = (InstruccionDeclVector)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-2)).value;
		Cuerpo c = (Cuerpo)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.peek()).value;
		 c.addInstr(inst); RESULT = c; 
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("CUER_FUN",4, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 94: // CUER_FUN ::= INST_DECL_PUNT PUNTOCOMA CUER_FUN 
            {
              Cuerpo RESULT =null;
		InstruccionDeclaracion inst = (InstruccionDeclaracion)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-2)).value;
		Cuerpo c = (Cuerpo)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.peek()).value;
		 c.addInstr(inst); RESULT = c; 
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("CUER_FUN",4, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 95: // CUER_FUN ::= INST_ASIG PUNTOCOMA CUER_FUN 
            {
              Cuerpo RESULT =null;
		InstruccionAsignacion inst = (InstruccionAsignacion)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-2)).value;
		Cuerpo c = (Cuerpo)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.peek()).value;
		 c.addInstr(inst); RESULT = c; 
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("CUER_FUN",4, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 96: // CUER_FUN ::= INST_ASIG_VECTOR PUNTOCOMA CUER_FUN 
            {
              Cuerpo RESULT =null;
		InstruccionAsigVector inst = (InstruccionAsigVector)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-2)).value;
		Cuerpo c = (Cuerpo)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.peek()).value;
		 c.addInstr(inst); RESULT = c; 
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("CUER_FUN",4, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 97: // CUER_FUN ::= INST_CALL_PROC PUNTOCOMA CUER_FUN 
            {
              Cuerpo RESULT =null;
		InstruccionLlamadaFuncion inst = (InstruccionLlamadaFuncion)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-2)).value;
		Cuerpo c = (Cuerpo)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.peek()).value;
		 c.addInstr(inst); RESULT = c; 
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("CUER_FUN",4, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 98: // CUER_FUN ::= INST_FOR CUER_FUN 
            {
              Cuerpo RESULT =null;
		InstruccionFor inst = (InstruccionFor)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-1)).value;
		Cuerpo c = (Cuerpo)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.peek()).value;
		 c.addInstr(inst); RESULT = c; 
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("CUER_FUN",4, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 99: // CUER_FUN ::= INST_IF CUER_FUN 
            {
              Cuerpo RESULT =null;
		InstruccionIfElse inst = (InstruccionIfElse)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-1)).value;
		Cuerpo c = (Cuerpo)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.peek()).value;
		 c.addInstr(inst); RESULT = c; 
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("CUER_FUN",4, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 100: // CUER_FUN ::= INST_IFELSE CUER_FUN 
            {
              Cuerpo RESULT =null;
		InstruccionIfElse inst = (InstruccionIfElse)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-1)).value;
		Cuerpo c = (Cuerpo)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.peek()).value;
		 c.addInstr(inst); RESULT = c; 
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("CUER_FUN",4, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 101: // CUER_FUN ::= INST_WHILE CUER_FUN 
            {
              Cuerpo RESULT =null;
		InstruccionWhile inst = (InstruccionWhile)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-1)).value;
		Cuerpo c = (Cuerpo)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.peek()).value;
		 c.addInstr(inst); RESULT = c; 
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("CUER_FUN",4, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 102: // CUER_FUN ::= INST_MEM PUNTOCOMA CUER_FUN 
            {
              Cuerpo RESULT =null;
		InstruccionReservaMemoria inst = (InstruccionReservaMemoria)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-2)).value;
		Cuerpo c = (Cuerpo)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.peek()).value;
		 c.addInstr(inst); RESULT = c; 
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("CUER_FUN",4, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 103: // CUER_FUN ::= INST_PRINT PUNTOCOMA CUER_FUN 
            {
              Cuerpo RESULT =null;
		InstruccionPrint inst = (InstruccionPrint)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-2)).value;
		Cuerpo c = (Cuerpo)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.peek()).value;
		 c.addInstr(inst); RESULT = c; 
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("CUER_FUN",4, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 104: // CUER_FUN ::= 
            {
              Cuerpo RESULT =null;
		 RESULT = new Cuerpo(); 
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("CUER_FUN",4, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 105: // INST_DECL_FUN ::= FUNCTION Tip Ident PARAPERTURA ARGUMENTOS_INI PARCIERRE LLAVEAPERTURA CUER_FUN RETURN Exp0 PUNTOCOMA LLAVECIERRE 
            {
              InstruccionDeclFuncion RESULT =null;
		Tipo tipo_dev = (Tipo)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-10)).value;
		Id id = (Id)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-9)).value;
		ArrayDeque<Tipo_Id> arg = (ArrayDeque<Tipo_Id>)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-7)).value;
		Cuerpo c = (Cuerpo)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-4)).value;
		Expresion e = (Expresion)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-2)).value;
		 RESULT = new InstruccionDeclFuncion(tipo_dev, id, arg, c, e); 
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("INST_DECL_FUN",28, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 106: // INST_DECL_FUN ::= FUNCTION Tip_vect Ident PARAPERTURA ARGUMENTOS_INI PARCIERRE LLAVEAPERTURA CUER_FUN RETURN Exp0 PUNTOCOMA LLAVECIERRE 
            {
              InstruccionDeclFuncion RESULT =null;
		TipoLista tipo_dev = (TipoLista)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-10)).value;
		Id id = (Id)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-9)).value;
		ArrayDeque<Tipo_Id> arg = (ArrayDeque<Tipo_Id>)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-7)).value;
		Cuerpo c = (Cuerpo)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-4)).value;
		Expresion e = (Expresion)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-2)).value;
		 RESULT = new InstruccionDeclFuncion(tipo_dev, id, arg, c, e); 
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("INST_DECL_FUN",28, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 107: // INST_DECL_FUN ::= FUNCTION VOID Ident PARAPERTURA ARGUMENTOS_INI PARCIERRE LLAVEAPERTURA CUER LLAVECIERRE 
            {
              InstruccionDeclFuncion RESULT =null;
		Id id = (Id)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-6)).value;
		ArrayDeque<Tipo_Id> arg = (ArrayDeque<Tipo_Id>)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-4)).value;
		Cuerpo c = (Cuerpo)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-1)).value;
		 RESULT = new InstruccionDeclFuncion(null, id, arg, c, null); 
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("INST_DECL_FUN",28, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 108: // ARGUMENTOSPROC_INI ::= Exp0 ARGUMENTOSPROC 
            {
              ArrayDeque<Expresion> RESULT =null;
		Expresion e = (Expresion)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-1)).value;
		ArrayDeque<Expresion> arg = (ArrayDeque<Expresion>)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.peek()).value;
		 arg.addFirst(e); RESULT = arg; 
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("ARGUMENTOSPROC_INI",41, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 109: // ARGUMENTOSPROC_INI ::= 
            {
              ArrayDeque<Expresion> RESULT =null;
		 RESULT = new ArrayDeque<Expresion>(); 
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("ARGUMENTOSPROC_INI",41, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 110: // ARGUMENTOSPROC ::= COMA Exp0 ARGUMENTOSPROC 
            {
              ArrayDeque<Expresion> RESULT =null;
		Expresion e = (Expresion)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-1)).value;
		ArrayDeque<Expresion> arg = (ArrayDeque<Expresion>)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.peek()).value;
		 arg.addFirst(e); RESULT = arg; 
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("ARGUMENTOSPROC",42, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 111: // ARGUMENTOSPROC ::= 
            {
              ArrayDeque<Expresion> RESULT =null;
		 RESULT = new ArrayDeque<Expresion>(); 
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("ARGUMENTOSPROC",42, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 112: // INST_RETURN ::= RETURN Exp0 
            {
              InstruccionReturn RESULT =null;
		Expresion e = (Expresion)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.peek()).value;
		 RESULT = new InstruccionReturn(e); 
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("INST_RETURN",30, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 113: // INST_PRINT ::= PRINT Exp0 
            {
              InstruccionPrint RESULT =null;
		Expresion e = (Expresion)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.peek()).value;
		 RESULT = new InstruccionPrint(e); 
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("INST_PRINT",33, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 114: // INST_CALL_PROC ::= Ident PARAPERTURA ARGUMENTOSPROC_INI PARCIERRE 
            {
              InstruccionLlamadaFuncion RESULT =null;
		Id id = (Id)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-3)).value;
		ArrayDeque<Expresion> arg = (ArrayDeque<Expresion>)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-1)).value;
		 RESULT = new InstruccionLlamadaFuncion(id, arg); 
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("INST_CALL_PROC",29, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 115: // INST_TYPEDEF ::= TYPEDEF Tip Ident 
            {
              InstruccionTypedef RESULT =null;
		Tipo tipo = (Tipo)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-1)).value;
		Id id = (Id)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.peek()).value;
		 RESULT = new InstruccionTypedef(tipo, id); 
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("INST_TYPEDEF",31, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 116: // INST_MEM ::= NEW PARAPERTURA Ident COMA NUM PARCIERRE 
            {
              InstruccionReservaMemoria RESULT =null;
		Id id = (Id)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-3)).value;
		String tam = (String)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-1)).value;
		 RESULT = new InstruccionReservaMemoria(id, tam); 
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("INST_MEM",32, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 117: // INST_STRUCT ::= STRUCT Ident LLAVEAPERTURA CAMPOS_STRUCT LLAVECIERRE 
            {
              InstruccionDeclStruct RESULT =null;
		Object struct = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-4)).value;
		Id nombre = (Id)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-3)).value;
		ArrayDeque<Instruccion> lista = (ArrayDeque<Instruccion>)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-1)).value;
		 RESULT = new InstruccionDeclStruct(nombre, lista); 
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("INST_STRUCT",27, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 118: // CAMPOS_STRUCT ::= INST_DECL PUNTOCOMA CAMPOS_STRUCT 
            {
              ArrayDeque<Instruccion> RESULT =null;
		InstruccionDeclaracion decl = (InstruccionDeclaracion)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-2)).value;
		ArrayDeque<Instruccion> lista = (ArrayDeque<Instruccion>)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.peek()).value;
		lista.add(decl); RESULT = lista;
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("CAMPOS_STRUCT",47, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 119: // CAMPOS_STRUCT ::= INST_DECL_VECTOR PUNTOCOMA CAMPOS_STRUCT 
            {
              ArrayDeque<Instruccion> RESULT =null;
		InstruccionDeclVector decl = (InstruccionDeclVector)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-2)).value;
		ArrayDeque<Instruccion> lista = (ArrayDeque<Instruccion>)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.peek()).value;
		lista.add(decl); RESULT = lista;
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("CAMPOS_STRUCT",47, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 120: // CAMPOS_STRUCT ::= 
            {
              ArrayDeque<Instruccion> RESULT =null;
		RESULT = new ArrayDeque<Instruccion>();
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("CAMPOS_STRUCT",47, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 121: // Ident ::= IDEN 
            {
              Id RESULT =null;
		String id = (String)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.peek()).value;
		 RESULT = new Id(id); 
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("Ident",14, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 122: // EXPR_LLAM_FUN ::= Ident PARAPERTURA ARGUMENTOSPROC_INI PARCIERRE 
            {
              ExpresionLlamadaFuncion RESULT =null;
		Id id = (Id)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-3)).value;
		ArrayDeque<Expresion> arg = (ArrayDeque<Expresion>)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-1)).value;
		 RESULT = new ExpresionLlamadaFuncion(id, arg); 
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("EXPR_LLAM_FUN",34, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 123: // EXPR_ACC_VECT ::= Ident CORCHAPERTURA Exp0 CORCHCIERRE 
            {
              ListIndex RESULT =null;
		Id id = (Id)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-3)).value;
		Expresion idx = (Expresion)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-1)).value;
		 RESULT = new ListIndex(id, idx); 
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("EXPR_ACC_VECT",36, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 124: // EXP_VECTOR ::= LLAVEAPERTURA LIST_VAL3 LLAVECIERRE 
            {
              List RESULT =null;
		ArrayDeque<Expresion> list = (ArrayDeque<Expresion>)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-1)).value;
		 RESULT = new List(list);
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("EXP_VECTOR",35, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 125: // LIST_VAL3 ::= Exp0 
            {
              ArrayDeque<Expresion> RESULT =null;
		Expresion val = (Expresion)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.peek()).value;
		ArrayDeque<Expresion> list = new ArrayDeque<Expresion>(); list.add(val); RESULT = list;
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("LIST_VAL3",45, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 126: // LIST_VAL3 ::= LIST_VAL3 COMA Exp0 
            {
              ArrayDeque<Expresion> RESULT =null;
		ArrayDeque<Expresion> list = (ArrayDeque<Expresion>)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-2)).value;
		Expresion val = (Expresion)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.peek()).value;
		list.add(val); RESULT = list;
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("LIST_VAL3",45, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 127: // Tip ::= INTEGER 
            {
              Tipo RESULT =null;
		 RESULT = new Tipo(Tipos.INTEGER); 
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("Tip",37, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 128: // Tip ::= BOOLEAN 
            {
              Tipo RESULT =null;
		 RESULT = new Tipo(Tipos.BOOLEAN); 
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("Tip",37, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 129: // Tip_vect ::= LIST MENOR Tip COMA NUM MAYOR 
            {
              TipoLista RESULT =null;
		Tipo t = (Tipo)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-3)).value;
		String n = (String)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-1)).value;
		 RESULT = new TipoLista(t, n); 
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("Tip_vect",38, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 130: // Tip_vect ::= LIST MENOR Tip_vect COMA NUM MAYOR 
            {
              TipoLista RESULT =null;
		TipoLista t = (TipoLista)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-3)).value;
		String n = (String)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-1)).value;
		 RESULT = new TipoLista(t, n); 
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("Tip_vect",38, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 131: // Tip ::= Ident 
            {
              Tipo RESULT =null;
		Id nombreStruct = (Id)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.peek()).value;
		 RESULT = new TipoStruct(nombreStruct.getS()); 
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("Tip",37, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$AnalizadorSintacticoTiny$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$AnalizadorSintacticoTiny$do_action(
    int                        CUP$AnalizadorSintacticoTiny$act_num,
    java_cup.runtime.lr_parser CUP$AnalizadorSintacticoTiny$parser,
    java.util.Stack            CUP$AnalizadorSintacticoTiny$stack,
    int                        CUP$AnalizadorSintacticoTiny$top)
    throws java.lang.Exception
    {
              return CUP$AnalizadorSintacticoTiny$do_action_part00000000(
                               CUP$AnalizadorSintacticoTiny$act_num,
                               CUP$AnalizadorSintacticoTiny$parser,
                               CUP$AnalizadorSintacticoTiny$stack,
                               CUP$AnalizadorSintacticoTiny$top);
    }
}

