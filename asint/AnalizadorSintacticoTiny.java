
//----------------------------------------------------
// The following code was generated by CUP v0.11b beta 20140220
// Fri Apr 23 12:23:46 CEST 2021
//----------------------------------------------------

package asint;

import java_cup.runtime.*;
import alex.AnalizadorLexicoTiny;
import alex.UnidadLexica;
import errors.GestionErrores;
import ast.*;
import ast.e.*;
import ast.i.*;
import ast.t.*;
import java.util.ArrayDeque;
import java_cup.runtime.ComplexSymbolFactory.Location;

/** CUP v0.11b beta 20140220 generated parser.
  * @version Fri Apr 23 12:23:46 CEST 2021
  */
public class AnalizadorSintacticoTiny extends java_cup.runtime.lr_parser {

  /** Default constructor. */
  public AnalizadorSintacticoTiny() {super();}

  /** Constructor which sets the default scanner. */
  public AnalizadorSintacticoTiny(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public AnalizadorSintacticoTiny(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\161\000\002\002\007\000\002\002\004\000\002\003" +
    "\004\000\002\003\005\000\002\003\005\000\002\003\005" +
    "\000\002\003\005\000\002\003\005\000\002\003\005\000" +
    "\002\003\005\000\002\003\002\000\002\004\005\000\002" +
    "\004\005\000\002\004\005\000\002\004\005\000\002\004" +
    "\005\000\002\004\005\000\002\004\004\000\002\004\004" +
    "\000\002\004\004\000\002\004\004\000\002\004\002\000" +
    "\002\007\005\000\002\007\003\000\002\010\005\000\002" +
    "\010\003\000\002\011\004\000\002\011\003\000\002\012" +
    "\005\000\002\012\005\000\002\012\003\000\002\013\005" +
    "\000\002\013\005\000\002\013\005\000\002\013\005\000" +
    "\002\013\003\000\002\014\005\000\002\014\005\000\002" +
    "\014\003\000\002\015\005\000\002\015\005\000\002\015" +
    "\005\000\002\015\003\000\002\016\003\000\002\016\003" +
    "\000\002\016\003\000\002\016\003\000\002\016\003\000" +
    "\002\016\003\000\002\005\005\000\002\005\005\000\002" +
    "\005\005\000\002\005\005\000\002\005\005\000\002\005" +
    "\005\000\002\005\004\000\002\005\004\000\002\005\004" +
    "\000\002\005\004\000\002\005\002\000\002\022\011\000" +
    "\002\023\015\000\002\024\011\000\002\026\015\000\002" +
    "\026\015\000\002\027\005\000\002\030\007\000\002\052" +
    "\003\000\002\052\005\000\002\031\004\000\002\033\004" +
    "\000\002\032\006\000\002\033\010\000\002\051\003\000" +
    "\002\051\005\000\002\045\005\000\002\045\006\000\002" +
    "\045\002\000\002\046\006\000\002\046\007\000\002\046" +
    "\002\000\002\006\005\000\002\006\005\000\002\006\005" +
    "\000\002\006\005\000\002\006\004\000\002\006\004\000" +
    "\002\006\004\000\002\006\004\000\002\006\005\000\002" +
    "\006\002\000\002\035\013\000\002\035\013\000\002\047" +
    "\004\000\002\047\002\000\002\050\005\000\002\050\002" +
    "\000\002\037\004\000\002\036\006\000\002\040\005\000" +
    "\002\034\007\000\002\053\005\000\002\053\005\000\002" +
    "\053\002\000\002\020\003\000\002\041\006\000\002\042" +
    "\006\000\002\043\003\000\002\043\003\000\002\044\010" +
    "\000\002\044\010\000\002\043\004\000\002\043\003" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\u0123\000\022\005\012\006\022\007\005\010\013\014" +
    "\ufff7\026\017\027\025\030\006\001\002\000\004\063\u0124" +
    "\001\002\000\004\005\012\001\002\000\004\043\u010f\001" +
    "\002\000\004\005\012\001\002\000\004\002\u0106\001\002" +
    "\000\022\005\012\006\022\007\005\010\013\014\ufff7\026" +
    "\017\027\025\030\006\001\002\000\064\005\uff99\035\uff99" +
    "\036\uff99\037\uff99\040\uff99\041\uff99\042\uff99\043\uff99\044" +
    "\uff99\045\uff99\046\uff99\047\uff99\050\uff99\051\uff99\052\uff99" +
    "\054\uff99\055\uff99\056\uff99\057\uff99\060\uff99\061\uff99\062" +
    "\uff99\063\uff99\066\uff99\067\uff99\001\002\000\012\005\012" +
    "\012\317\026\017\027\025\001\002\000\004\014\147\001" +
    "\002\000\004\063\145\001\002\000\004\063\143\001\002" +
    "\000\012\005\uff95\062\uff95\066\uff95\067\uff95\001\002\000" +
    "\004\063\141\001\002\000\004\063\137\001\002\000\010" +
    "\005\012\026\017\027\025\001\002\000\010\005\uff91\046" +
    "\124\066\uff91\001\002\000\006\005\012\066\034\001\002" +
    "\000\012\005\uff96\062\uff96\066\uff96\067\uff96\001\002\000" +
    "\004\063\032\001\002\000\004\063\030\001\002\000\022" +
    "\005\012\006\022\007\005\010\013\014\ufff7\026\017\027" +
    "\025\030\006\001\002\000\004\014\ufffc\001\002\000\022" +
    "\005\012\006\022\007\005\010\013\014\ufff7\026\017\027" +
    "\025\030\006\001\002\000\004\014\ufffb\001\002\000\012" +
    "\005\uff92\062\uff92\066\uff92\067\uff92\001\002\000\006\046" +
    "\036\063\uffbc\001\002\000\014\004\040\005\012\032\042" +
    "\033\044\053\050\001\002\000\006\052\112\063\uffba\001" +
    "\002\000\046\035\uffd6\036\uffd6\037\uffd6\040\uffd6\041\uffd6" +
    "\042\uffd6\043\uffd6\044\uffd6\045\uffd6\047\uffd6\050\uffd6\051" +
    "\uffd6\052\uffd6\055\uffd6\057\uffd6\061\uffd6\062\uffd6\063\uffd6" +
    "\001\002\000\052\035\uffd3\036\uffd3\037\uffd3\040\uffd3\041" +
    "\uffd3\042\uffd3\043\uffd3\044\uffd3\045\uffd3\047\uffd3\050\uffd3" +
    "\051\uffd3\052\uffd3\054\107\055\uffd3\057\uffd3\060\110\061" +
    "\uffd3\062\uffd3\063\uffd3\001\002\000\046\035\uffd5\036\uffd5" +
    "\037\uffd5\040\uffd5\041\uffd5\042\uffd5\043\uffd5\044\uffd5\045" +
    "\uffd5\047\uffd5\050\uffd5\051\uffd5\052\uffd5\055\uffd5\057\uffd5" +
    "\061\uffd5\062\uffd5\063\uffd5\001\002\000\046\035\uffd2\036" +
    "\uffd2\037\uffd2\040\uffd2\041\uffd2\042\uffd2\043\uffd2\044\uffd2" +
    "\045\uffd2\047\uffd2\050\uffd2\051\uffd2\052\uffd2\055\uffd2\057" +
    "\uffd2\061\uffd2\062\uffd2\063\uffd2\001\002\000\046\035\uffd4" +
    "\036\uffd4\037\uffd4\040\uffd4\041\uffd4\042\uffd4\043\uffd4\044" +
    "\uffd4\045\uffd4\047\uffd4\050\uffd4\051\uffd4\052\uffd4\055\uffd4" +
    "\057\uffd4\061\uffd4\062\uffd4\063\uffd4\001\002\000\046\035" +
    "\uffd7\036\uffd7\037\uffd7\040\uffd7\041\uffd7\042\uffd7\043\uffd7" +
    "\044\uffd7\045\uffd7\047\uffd7\050\uffd7\051\uffd7\052\uffd7\055" +
    "\uffd7\057\uffd7\061\uffd7\062\uffd7\063\uffd7\001\002\000\046" +
    "\035\uffd1\036\uffd1\037\uffd1\040\uffd1\041\uffd1\042\uffd1\043" +
    "\uffd1\044\uffd1\045\uffd1\047\uffd1\050\uffd1\051\uffd1\052\uffd1" +
    "\055\uffd1\057\uffd1\061\uffd1\062\uffd1\063\uffd1\001\002\000" +
    "\046\035\uffdb\036\uffdb\037\074\040\075\041\073\042\uffdb" +
    "\043\uffdb\044\uffdb\045\uffdb\047\uffdb\050\uffdb\051\uffdb\052" +
    "\uffdb\055\uffdb\057\uffdb\061\uffdb\062\uffdb\063\uffdb\001\002" +
    "\000\014\004\040\005\012\032\042\033\044\053\050\001" +
    "\002\000\040\035\070\036\071\042\uffde\043\uffde\044\uffde" +
    "\045\uffde\047\uffde\050\uffde\051\uffde\052\uffde\055\uffde\057" +
    "\uffde\061\uffde\062\uffde\063\uffde\001\002\000\034\042\066" +
    "\043\065\044\063\045\064\047\uffe3\050\uffe3\051\uffe3\052" +
    "\uffe3\055\uffe3\057\uffe3\061\uffe3\062\uffe3\063\uffe3\001\002" +
    "\000\024\047\060\050\061\051\uffe6\052\uffe6\055\uffe6\057" +
    "\uffe6\061\uffe6\062\uffe6\063\uffe6\001\002\000\020\051\uffe8" +
    "\052\uffe8\055\uffe8\057\uffe8\061\uffe8\062\uffe8\063\uffe8\001" +
    "\002\000\020\051\056\052\uffea\055\uffea\057\uffea\061\uffea" +
    "\062\uffea\063\uffea\001\002\000\014\004\040\005\012\032" +
    "\042\033\044\053\050\001\002\000\020\051\uffe9\052\uffe9" +
    "\055\uffe9\057\uffe9\061\uffe9\062\uffe9\063\uffe9\001\002\000" +
    "\012\004\040\005\012\032\042\033\044\001\002\000\012" +
    "\004\040\005\012\032\042\033\044\001\002\000\034\042" +
    "\066\043\065\044\063\045\064\047\uffe4\050\uffe4\051\uffe4" +
    "\052\uffe4\055\uffe4\057\uffe4\061\uffe4\062\uffe4\063\uffe4\001" +
    "\002\000\012\004\040\005\012\032\042\033\044\001\002" +
    "\000\012\004\040\005\012\032\042\033\044\001\002\000" +
    "\012\004\040\005\012\032\042\033\044\001\002\000\012" +
    "\004\040\005\012\032\042\033\044\001\002\000\040\035" +
    "\070\036\071\042\uffe1\043\uffe1\044\uffe1\045\uffe1\047\uffe1" +
    "\050\uffe1\051\uffe1\052\uffe1\055\uffe1\057\uffe1\061\uffe1\062" +
    "\uffe1\063\uffe1\001\002\000\012\004\040\005\012\032\042" +
    "\033\044\001\002\000\012\004\040\005\012\032\042\033" +
    "\044\001\002\000\046\035\uffdc\036\uffdc\037\074\040\075" +
    "\041\073\042\uffdc\043\uffdc\044\uffdc\045\uffdc\047\uffdc\050" +
    "\uffdc\051\uffdc\052\uffdc\055\uffdc\057\uffdc\061\uffdc\062\uffdc" +
    "\063\uffdc\001\002\000\012\004\040\005\012\032\042\033" +
    "\044\001\002\000\012\004\040\005\012\032\042\033\044" +
    "\001\002\000\012\004\040\005\012\032\042\033\044\001" +
    "\002\000\046\035\uffd9\036\uffd9\037\uffd9\040\uffd9\041\uffd9" +
    "\042\uffd9\043\uffd9\044\uffd9\045\uffd9\047\uffd9\050\uffd9\051" +
    "\uffd9\052\uffd9\055\uffd9\057\uffd9\061\uffd9\062\uffd9\063\uffd9" +
    "\001\002\000\046\035\uffda\036\uffda\037\uffda\040\uffda\041" +
    "\uffda\042\uffda\043\uffda\044\uffda\045\uffda\047\uffda\050\uffda" +
    "\051\uffda\052\uffda\055\uffda\057\uffda\061\uffda\062\uffda\063" +
    "\uffda\001\002\000\046\035\uffd8\036\uffd8\037\uffd8\040\uffd8" +
    "\041\uffd8\042\uffd8\043\uffd8\044\uffd8\045\uffd8\047\uffd8\050" +
    "\uffd8\051\uffd8\052\uffd8\055\uffd8\057\uffd8\061\uffd8\062\uffd8" +
    "\063\uffd8\001\002\000\046\035\uffdd\036\uffdd\037\074\040" +
    "\075\041\073\042\uffdd\043\uffdd\044\uffdd\045\uffdd\047\uffdd" +
    "\050\uffdd\051\uffdd\052\uffdd\055\uffdd\057\uffdd\061\uffdd\062" +
    "\uffdd\063\uffdd\001\002\000\040\035\070\036\071\042\uffe2" +
    "\043\uffe2\044\uffe2\045\uffe2\047\uffe2\050\uffe2\051\uffe2\052" +
    "\uffe2\055\uffe2\057\uffe2\061\uffe2\062\uffe2\063\uffe2\001\002" +
    "\000\040\035\070\036\071\042\uffdf\043\uffdf\044\uffdf\045" +
    "\uffdf\047\uffdf\050\uffdf\051\uffdf\052\uffdf\055\uffdf\057\uffdf" +
    "\061\uffdf\062\uffdf\063\uffdf\001\002\000\040\035\070\036" +
    "\071\042\uffe0\043\uffe0\044\uffe0\045\uffe0\047\uffe0\050\uffe0" +
    "\051\uffe0\052\uffe0\055\uffe0\057\uffe0\061\uffe0\062\uffe0\063" +
    "\uffe0\001\002\000\034\042\066\043\065\044\063\045\064" +
    "\047\uffe5\050\uffe5\051\uffe5\052\uffe5\055\uffe5\057\uffe5\061" +
    "\uffe5\062\uffe5\063\uffe5\001\002\000\020\051\uffe7\052\uffe7" +
    "\055\uffe7\057\uffe7\061\uffe7\062\uffe7\063\uffe7\001\002\000" +
    "\016\004\040\005\012\032\042\033\044\053\050\055\uffa3" +
    "\001\002\000\014\004\040\005\012\032\042\033\044\053" +
    "\050\001\002\000\006\052\112\061\113\001\002\000\014" +
    "\004\040\005\012\032\042\033\044\053\050\001\002\000" +
    "\046\035\uff97\036\uff97\037\uff97\040\uff97\041\uff97\042\uff97" +
    "\043\uff97\044\uff97\045\uff97\047\uff97\050\uff97\051\uff97\052" +
    "\uff97\055\uff97\057\uff97\061\uff97\062\uff97\063\uff97\001\002" +
    "\000\020\051\056\052\uffeb\055\uffeb\057\uffeb\061\uffeb\062" +
    "\uffeb\063\uffeb\001\002\000\010\052\112\055\uffa1\062\120" +
    "\001\002\000\004\055\117\001\002\000\046\035\uff98\036" +
    "\uff98\037\uff98\040\uff98\041\uff98\042\uff98\043\uff98\044\uff98" +
    "\045\uff98\047\uff98\050\uff98\051\uff98\052\uff98\055\uff98\057" +
    "\uff98\061\uff98\062\uff98\063\uff98\001\002\000\014\004\040" +
    "\005\012\032\042\033\044\053\050\001\002\000\004\055" +
    "\uffa4\001\002\000\010\052\112\055\uffa1\062\120\001\002" +
    "\000\004\055\uffa2\001\002\000\016\004\040\005\012\032" +
    "\042\033\044\053\050\056\126\001\002\000\010\052\112" +
    "\055\uffc0\063\uffc0\001\002\000\014\004\040\005\012\032" +
    "\042\033\044\053\050\001\002\000\010\052\112\057\uffbe" +
    "\062\uffbe\001\002\000\006\057\131\062\132\001\002\000" +
    "\004\063\uffbf\001\002\000\014\004\040\005\012\032\042" +
    "\033\044\053\050\001\002\000\010\052\112\057\uffbd\062" +
    "\uffbd\001\002\000\012\005\uff91\062\uff91\066\uff91\067\uff91" +
    "\001\002\000\006\005\012\066\034\001\002\000\004\063" +
    "\uff9e\001\002\000\022\005\012\006\022\007\005\010\013" +
    "\014\ufff7\026\017\027\025\030\006\001\002\000\004\014" +
    "\ufff8\001\002\000\022\005\012\006\022\007\005\010\013" +
    "\014\ufff7\026\017\027\025\030\006\001\002\000\004\014" +
    "\ufffa\001\002\000\022\005\012\006\022\007\005\010\013" +
    "\014\ufff7\026\017\027\025\030\006\001\002\000\004\014" +
    "\ufffd\001\002\000\022\005\012\006\022\007\005\010\013" +
    "\014\ufff7\026\017\027\025\030\006\001\002\000\004\014" +
    "\ufff9\001\002\000\004\056\150\001\002\000\022\005\012" +
    "\015\156\017\152\020\165\026\017\027\025\030\006\057" +
    "\uffec\001\002\000\004\063\314\001\002\000\004\054\306" +
    "\001\002\000\004\057\305\001\002\000\022\005\012\015" +
    "\156\017\152\020\165\026\017\027\025\030\006\057\uffec" +
    "\001\002\000\022\005\012\015\156\017\152\020\165\026" +
    "\017\027\025\030\006\057\uffec\001\002\000\004\054\271" +
    "\001\002\000\004\063\267\001\002\000\004\063\265\001" +
    "\002\000\004\063\263\001\002\000\022\005\012\015\156" +
    "\017\152\020\165\026\017\027\025\030\006\057\uffec\001" +
    "\002\000\022\005\012\015\156\017\152\020\165\026\017" +
    "\027\025\030\006\057\uffec\001\002\000\012\005\uff91\046" +
    "\124\054\256\066\uff91\001\002\000\004\054\174\001\002" +
    "\000\004\063\172\001\002\000\004\063\170\001\002\000" +
    "\022\005\012\015\156\017\152\020\165\026\017\027\025" +
    "\030\006\057\uffec\001\002\000\004\057\ufff4\001\002\000" +
    "\022\005\012\015\156\017\152\020\165\026\017\027\025" +
    "\030\006\057\uffec\001\002\000\004\057\ufff3\001\002\000" +
    "\010\005\012\026\017\027\025\001\002\000\004\063\246" +
    "\001\002\000\010\005\uff91\046\245\066\uff91\001\002\000" +
    "\004\063\202\001\002\000\006\005\012\066\034\001\002" +
    "\000\004\046\036\001\002\000\014\004\040\005\012\032" +
    "\042\033\044\053\050\001\002\000\006\052\112\063\204" +
    "\001\002\000\004\005\012\001\002\000\004\046\245\001" +
    "\002\000\004\055\207\001\002\000\004\056\210\001\002" +
    "\000\022\005\012\015\156\017\152\020\165\026\017\027" +
    "\025\030\006\057\uffc6\001\002\000\004\063\243\001\002" +
    "\000\022\005\012\015\156\017\152\020\165\026\017\027" +
    "\025\030\006\057\uffc6\001\002\000\022\005\012\015\156" +
    "\017\152\020\165\026\017\027\025\030\006\057\uffc6\001" +
    "\002\000\004\063\237\001\002\000\004\063\235\001\002" +
    "\000\004\063\233\001\002\000\022\005\012\015\156\017" +
    "\152\020\165\026\017\027\025\030\006\057\uffc6\001\002" +
    "\000\022\005\012\015\156\017\152\020\165\026\017\027" +
    "\025\030\006\057\uffc6\001\002\000\004\057\230\001\002" +
    "\000\004\063\226\001\002\000\004\063\224\001\002\000" +
    "\022\005\012\015\156\017\152\020\165\026\017\027\025" +
    "\030\006\057\uffc6\001\002\000\004\057\uffce\001\002\000" +
    "\022\005\012\015\156\017\152\020\165\026\017\027\025" +
    "\030\006\057\uffc6\001\002\000\004\057\uffcd\001\002\000" +
    "\024\005\uffc2\011\uffc2\015\uffc2\017\uffc2\020\uffc2\026\uffc2" +
    "\027\uffc2\030\uffc2\057\uffc2\001\002\000\004\057\uffc7\001" +
    "\002\000\004\057\uffc8\001\002\000\022\005\012\015\156" +
    "\017\152\020\165\026\017\027\025\030\006\057\uffc6\001" +
    "\002\000\004\057\uffcc\001\002\000\022\005\012\015\156" +
    "\017\152\020\165\026\017\027\025\030\006\057\uffc6\001" +
    "\002\000\004\057\uffcf\001\002\000\022\005\012\015\156" +
    "\017\152\020\165\026\017\027\025\030\006\057\uffc6\001" +
    "\002\000\004\057\uffcb\001\002\000\004\057\uffc9\001\002" +
    "\000\004\057\uffca\001\002\000\022\005\012\015\156\017" +
    "\152\020\165\026\017\027\025\030\006\057\uffc6\001\002" +
    "\000\004\057\uffd0\001\002\000\014\004\040\005\012\032" +
    "\042\033\044\053\050\001\002\000\014\004\040\005\012" +
    "\032\042\033\044\053\050\001\002\000\006\052\112\063" +
    "\250\001\002\000\004\005\012\001\002\000\004\055\252" +
    "\001\002\000\004\056\253\001\002\000\022\005\012\015" +
    "\156\017\152\020\165\026\017\027\025\030\006\057\uffc6" +
    "\001\002\000\004\057\255\001\002\000\024\005\uffc1\011" +
    "\uffc1\015\uffc1\017\uffc1\020\uffc1\026\uffc1\027\uffc1\030\uffc1" +
    "\057\uffc1\001\002\000\016\004\040\005\012\032\042\033" +
    "\044\053\050\055\uffa3\001\002\000\004\055\260\001\002" +
    "\000\004\063\uff9f\001\002\000\004\057\uffed\001\002\000" +
    "\004\057\uffee\001\002\000\022\005\012\015\156\017\152" +
    "\020\165\026\017\027\025\030\006\057\uffec\001\002\000" +
    "\004\057\ufff2\001\002\000\022\005\012\015\156\017\152" +
    "\020\165\026\017\027\025\030\006\057\uffec\001\002\000" +
    "\004\057\ufff5\001\002\000\022\005\012\015\156\017\152" +
    "\020\165\026\017\027\025\030\006\057\uffec\001\002\000" +
    "\004\057\ufff1\001\002\000\014\004\040\005\012\032\042" +
    "\033\044\053\050\001\002\000\006\052\112\055\273\001" +
    "\002\000\004\056\274\001\002\000\022\005\012\015\156" +
    "\017\152\020\165\026\017\027\025\030\006\057\uffc6\001" +
    "\002\000\004\057\276\001\002\000\026\005\uffc5\011\uffc5" +
    "\015\uffc5\016\277\017\uffc5\020\uffc5\026\uffc5\027\uffc5\030" +
    "\uffc5\057\uffc5\001\002\000\004\056\300\001\002\000\022" +
    "\005\012\015\156\017\152\020\165\026\017\027\025\030" +
    "\006\057\uffc6\001\002\000\004\057\302\001\002\000\024" +
    "\005\uffc4\011\uffc4\015\uffc4\017\uffc4\020\uffc4\026\uffc4\027" +
    "\uffc4\030\uffc4\057\uffc4\001\002\000\004\057\uffef\001\002" +
    "\000\004\057\ufff0\001\002\000\004\002\001\001\002\000" +
    "\014\004\040\005\012\032\042\033\044\053\050\001\002" +
    "\000\006\052\112\055\310\001\002\000\004\056\311\001" +
    "\002\000\022\005\012\015\156\017\152\020\165\026\017" +
    "\027\025\030\006\057\uffc6\001\002\000\004\057\313\001" +
    "\002\000\024\005\uffc3\011\uffc3\015\uffc3\017\uffc3\020\uffc3" +
    "\026\uffc3\027\uffc3\030\uffc3\057\uffc3\001\002\000\022\005" +
    "\012\015\156\017\152\020\165\026\017\027\025\030\006" +
    "\057\uffec\001\002\000\004\057\ufff6\001\002\000\006\005" +
    "\012\066\034\001\002\000\004\005\012\001\002\000\004" +
    "\054\321\001\002\000\012\005\012\026\017\027\025\055" +
    "\uffb4\001\002\000\004\055\340\001\002\000\010\005\012" +
    "\066\034\067\324\001\002\000\004\005\012\001\002\000" +
    "\006\055\uffb1\062\326\001\002\000\010\005\012\026\017" +
    "\027\025\001\002\000\004\055\uffb6\001\002\000\010\005" +
    "\012\066\034\067\331\001\002\000\004\005\012\001\002" +
    "\000\006\055\uffb1\062\326\001\002\000\004\055\uffb3\001" +
    "\002\000\006\055\uffb1\062\326\001\002\000\004\055\uffb2" +
    "\001\002\000\006\055\uffb1\062\326\001\002\000\004\055" +
    "\uffb5\001\002\000\004\056\341\001\002\000\022\005\012" +
    "\015\156\017\152\020\165\026\017\027\025\030\006\057" +
    "\uffc6\001\002\000\004\057\343\001\002\000\022\005\uffa5" +
    "\006\uffa5\007\uffa5\010\uffa5\014\uffa5\026\uffa5\027\uffa5\030" +
    "\uffa5\001\002\000\004\054\345\001\002\000\012\005\012" +
    "\026\017\027\025\055\uffb4\001\002\000\004\055\347\001" +
    "\002\000\004\056\350\001\002\000\022\005\012\011\352" +
    "\015\156\017\152\020\165\026\017\027\025\057\uffa7\001" +
    "\002\000\004\063\u0103\001\002\000\014\004\040\005\012" +
    "\032\042\033\044\053\050\001\002\000\022\005\012\011" +
    "\352\015\156\017\152\020\165\026\017\027\025\057\uffa7" +
    "\001\002\000\022\005\012\011\352\015\156\017\152\020" +
    "\165\026\017\027\025\057\uffa7\001\002\000\004\063\376" +
    "\001\002\000\004\063\374\001\002\000\022\005\012\011" +
    "\352\015\156\017\152\020\165\026\017\027\025\057\uffa7" +
    "\001\002\000\022\005\012\011\352\015\156\017\152\020" +
    "\165\026\017\027\025\057\uffa7\001\002\000\004\063\370" +
    "\001\002\000\012\005\uff91\046\245\054\256\066\uff91\001" +
    "\002\000\004\063\366\001\002\000\004\057\365\001\002" +
    "\000\022\005\uffa6\006\uffa6\007\uffa6\010\uffa6\014\uffa6\026" +
    "\uffa6\027\uffa6\030\uffa6\001\002\000\022\005\012\011\352" +
    "\015\156\017\152\020\165\026\017\027\025\057\uffa7\001" +
    "\002\000\004\057\uffae\001\002\000\022\005\012\011\352" +
    "\015\156\017\152\020\165\026\017\027\025\057\uffa7\001" +
    "\002\000\004\057\uffa8\001\002\000\004\057\uffa9\001\002" +
    "\000\004\057\uffaa\001\002\000\022\005\012\011\352\015" +
    "\156\017\152\020\165\026\017\027\025\057\uffa7\001\002" +
    "\000\004\057\uffaf\001\002\000\022\005\012\011\352\015" +
    "\156\017\152\020\165\026\017\027\025\057\uffa7\001\002" +
    "\000\004\057\uffad\001\002\000\004\057\uffab\001\002\000" +
    "\004\057\uffac\001\002\000\006\052\112\063\uffa0\001\002" +
    "\000\022\005\012\011\352\015\156\017\152\020\165\026" +
    "\017\027\025\057\uffa7\001\002\000\004\057\uffb0\001\002" +
    "\000\004\014\uffff\001\002\000\004\002\000\001\002\000" +
    "\006\046\u0108\063\uffbb\001\002\000\004\056\u0109\001\002" +
    "\000\014\004\040\005\012\032\042\033\044\053\050\001" +
    "\002\000\010\052\112\057\uffb8\062\uffb8\001\002\000\006" +
    "\057\u010d\062\u010c\001\002\000\014\004\040\005\012\032" +
    "\042\033\044\053\050\001\002\000\004\063\uffb9\001\002" +
    "\000\010\052\112\057\uffb7\062\uffb7\001\002\000\012\005" +
    "\012\026\017\027\025\030\006\001\002\000\006\062\u0115" +
    "\066\034\001\002\000\004\062\u0112\001\002\000\004\004" +
    "\u0113\001\002\000\004\042\u0114\001\002\000\006\005\uff93" +
    "\062\uff93\001\002\000\004\004\u0116\001\002\000\004\042" +
    "\u0117\001\002\000\006\005\uff94\062\uff94\001\002\000\004" +
    "\056\u0119\001\002\000\014\005\012\026\017\027\025\030" +
    "\006\057\uff9a\001\002\000\004\057\u0123\001\002\000\004" +
    "\063\u0121\001\002\000\004\063\u011f\001\002\000\006\005" +
    "\012\066\034\001\002\000\004\063\uffbc\001\002\000\014" +
    "\005\012\026\017\027\025\030\006\057\uff9a\001\002\000" +
    "\004\057\uff9c\001\002\000\014\005\012\026\017\027\025" +
    "\030\006\057\uff9a\001\002\000\004\057\uff9b\001\002\000" +
    "\004\063\uff9d\001\002\000\022\005\012\006\022\007\005" +
    "\010\013\014\ufff7\026\017\027\025\030\006\001\002\000" +
    "\004\014\ufffe\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\u0123\000\034\002\007\003\013\020\022\027\025\030" +
    "\017\031\015\032\003\033\026\034\020\035\010\040\014" +
    "\043\023\044\006\001\001\000\002\001\001\000\004\020" +
    "\u0117\001\001\000\002\001\001\000\004\020\u0106\001\001" +
    "\000\002\001\001\000\032\003\u0104\020\022\027\025\030" +
    "\017\031\015\032\003\033\026\034\020\035\010\040\014" +
    "\043\023\044\006\001\001\000\002\001\001\000\006\020" +
    "\133\043\315\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\006\020\133\043\134\001\001\000\002" +
    "\001\001\000\004\020\034\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\032\003\030\020\022" +
    "\027\025\030\017\031\015\032\003\033\026\034\020\035" +
    "\010\040\014\043\023\044\006\001\001\000\002\001\001" +
    "\000\032\003\032\020\022\027\025\030\017\031\015\032" +
    "\003\033\026\034\020\035\010\040\014\043\023\044\006" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\030\007\036\010\054\011\053\012\052\013\051" +
    "\014\050\015\046\016\044\020\040\041\042\042\045\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\024" +
    "\011\105\012\052\013\051\014\050\015\046\016\044\020" +
    "\040\041\042\042\045\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\024\011\056\012\052\013\051\014\050\015\046" +
    "\016\044\020\040\041\042\042\045\001\001\000\002\001" +
    "\001\000\020\013\104\014\050\015\046\016\044\020\040" +
    "\041\042\042\045\001\001\000\020\013\061\014\050\015" +
    "\046\016\044\020\040\041\042\042\045\001\001\000\002" +
    "\001\001\000\016\014\103\015\046\016\044\020\040\041" +
    "\042\042\045\001\001\000\016\014\102\015\046\016\044" +
    "\020\040\041\042\042\045\001\001\000\016\014\101\015" +
    "\046\016\044\020\040\041\042\042\045\001\001\000\016" +
    "\014\066\015\046\016\044\020\040\041\042\042\045\001" +
    "\001\000\002\001\001\000\014\015\100\016\044\020\040" +
    "\041\042\042\045\001\001\000\014\015\071\016\044\020" +
    "\040\041\042\042\045\001\001\000\002\001\001\000\012" +
    "\016\077\020\040\041\042\042\045\001\001\000\012\016" +
    "\076\020\040\041\042\042\045\001\001\000\012\016\075" +
    "\020\040\041\042\042\045\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\032\007\114\010\054\011\053" +
    "\012\052\013\051\014\050\015\046\016\044\020\040\041" +
    "\042\042\045\047\115\001\001\000\030\007\110\010\054" +
    "\011\053\012\052\013\051\014\050\015\046\016\044\020" +
    "\040\041\042\042\045\001\001\000\002\001\001\000\026" +
    "\010\113\011\053\012\052\013\051\014\050\015\046\016" +
    "\044\020\040\041\042\042\045\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\050\120\001\001\000\002\001" +
    "\001\000\002\001\001\000\030\007\121\010\054\011\053" +
    "\012\052\013\051\014\050\015\046\016\044\020\040\041" +
    "\042\042\045\001\001\000\002\001\001\000\004\050\122" +
    "\001\001\000\002\001\001\000\030\007\124\010\054\011" +
    "\053\012\052\013\051\014\050\015\046\016\044\020\040" +
    "\041\042\042\045\001\001\000\002\001\001\000\032\007" +
    "\126\010\054\011\053\012\052\013\051\014\050\015\046" +
    "\016\044\020\040\041\042\042\045\052\127\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\030" +
    "\007\132\010\054\011\053\012\052\013\051\014\050\015" +
    "\046\016\044\020\040\041\042\042\045\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\020\135\001\001\000" +
    "\002\001\001\000\032\003\137\020\022\027\025\030\017" +
    "\031\015\032\003\033\026\034\020\035\010\040\014\043" +
    "\023\044\006\001\001\000\002\001\001\000\032\003\141" +
    "\020\022\027\025\030\017\031\015\032\003\033\026\034" +
    "\020\035\010\040\014\043\023\044\006\001\001\000\002" +
    "\001\001\000\032\003\143\020\022\027\025\030\017\031" +
    "\015\032\003\033\026\034\020\035\010\040\014\043\023" +
    "\044\006\001\001\000\002\001\001\000\032\003\145\020" +
    "\022\027\025\030\017\031\015\032\003\033\026\034\020" +
    "\035\010\040\014\043\023\044\006\001\001\000\002\001" +
    "\001\000\002\001\001\000\036\004\152\020\163\022\154" +
    "\023\161\024\162\026\153\027\165\030\160\031\157\032" +
    "\150\033\166\036\156\043\023\044\006\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\036\004" +
    "\303\020\163\022\154\023\161\024\162\026\153\027\165" +
    "\030\160\031\157\032\150\033\166\036\156\043\023\044" +
    "\006\001\001\000\036\004\302\020\163\022\154\023\161" +
    "\024\162\026\153\027\165\030\160\031\157\032\150\033" +
    "\166\036\156\043\023\044\006\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\036\004\261\020\163\022\154\023\161\024\162\026\153" +
    "\027\165\030\160\031\157\032\150\033\166\036\156\043" +
    "\023\044\006\001\001\000\036\004\260\020\163\022\154" +
    "\023\161\024\162\026\153\027\165\030\160\031\157\032" +
    "\150\033\166\036\156\043\023\044\006\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\036\004\170\020\163\022\154\023\161\024\162" +
    "\026\153\027\165\030\160\031\157\032\150\033\166\036" +
    "\156\043\023\044\006\001\001\000\002\001\001\000\036" +
    "\004\172\020\163\022\154\023\161\024\162\026\153\027" +
    "\165\030\160\031\157\032\150\033\166\036\156\043\023" +
    "\044\006\001\001\000\002\001\001\000\012\020\175\027" +
    "\176\032\174\043\177\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\020\200\001\001\000" +
    "\002\001\001\000\030\007\202\010\054\011\053\012\052" +
    "\013\051\014\050\015\046\016\044\020\040\041\042\042" +
    "\045\001\001\000\002\001\001\000\006\020\204\027\205" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\036\005\220\020\163\022\212\023\216\024\217" +
    "\026\211\027\221\030\215\031\214\032\210\033\222\036" +
    "\213\043\023\044\006\001\001\000\002\001\001\000\036" +
    "\005\241\020\163\022\212\023\216\024\217\026\211\027" +
    "\221\030\215\031\214\032\210\033\222\036\213\043\023" +
    "\044\006\001\001\000\036\005\240\020\163\022\212\023" +
    "\216\024\217\026\211\027\221\030\215\031\214\032\210" +
    "\033\222\036\213\043\023\044\006\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\036\005\231" +
    "\020\163\022\212\023\216\024\217\026\211\027\221\030" +
    "\215\031\214\032\210\033\222\036\213\043\023\044\006" +
    "\001\001\000\036\005\230\020\163\022\212\023\216\024" +
    "\217\026\211\027\221\030\215\031\214\032\210\033\222" +
    "\036\213\043\023\044\006\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\036\005\224\020\163" +
    "\022\212\023\216\024\217\026\211\027\221\030\215\031" +
    "\214\032\210\033\222\036\213\043\023\044\006\001\001" +
    "\000\002\001\001\000\036\005\226\020\163\022\212\023" +
    "\216\024\217\026\211\027\221\030\215\031\214\032\210" +
    "\033\222\036\213\043\023\044\006\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\036\005\233\020\163\022\212\023\216\024\217\026" +
    "\211\027\221\030\215\031\214\032\210\033\222\036\213" +
    "\043\023\044\006\001\001\000\002\001\001\000\036\005" +
    "\235\020\163\022\212\023\216\024\217\026\211\027\221" +
    "\030\215\031\214\032\210\033\222\036\213\043\023\044" +
    "\006\001\001\000\002\001\001\000\036\005\237\020\163" +
    "\022\212\023\216\024\217\026\211\027\221\030\215\031" +
    "\214\032\210\033\222\036\213\043\023\044\006\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\036\005\243\020\163\022\212\023\216\024\217\026\211" +
    "\027\221\030\215\031\214\032\210\033\222\036\213\043" +
    "\023\044\006\001\001\000\002\001\001\000\030\007\124" +
    "\010\054\011\053\012\052\013\051\014\050\015\046\016" +
    "\044\020\040\041\042\042\045\001\001\000\030\007\246" +
    "\010\054\011\053\012\052\013\051\014\050\015\046\016" +
    "\044\020\040\041\042\042\045\001\001\000\002\001\001" +
    "\000\006\020\204\027\250\001\001\000\002\001\001\000" +
    "\002\001\001\000\036\005\253\020\163\022\212\023\216" +
    "\024\217\026\211\027\221\030\215\031\214\032\210\033" +
    "\222\036\213\043\023\044\006\001\001\000\002\001\001" +
    "\000\002\001\001\000\032\007\114\010\054\011\053\012" +
    "\052\013\051\014\050\015\046\016\044\020\040\041\042" +
    "\042\045\047\256\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\036\004\263" +
    "\020\163\022\154\023\161\024\162\026\153\027\165\030" +
    "\160\031\157\032\150\033\166\036\156\043\023\044\006" +
    "\001\001\000\002\001\001\000\036\004\265\020\163\022" +
    "\154\023\161\024\162\026\153\027\165\030\160\031\157" +
    "\032\150\033\166\036\156\043\023\044\006\001\001\000" +
    "\002\001\001\000\036\004\267\020\163\022\154\023\161" +
    "\024\162\026\153\027\165\030\160\031\157\032\150\033" +
    "\166\036\156\043\023\044\006\001\001\000\002\001\001" +
    "\000\030\007\271\010\054\011\053\012\052\013\051\014" +
    "\050\015\046\016\044\020\040\041\042\042\045\001\001" +
    "\000\002\001\001\000\002\001\001\000\036\005\274\020" +
    "\163\022\212\023\216\024\217\026\211\027\221\030\215" +
    "\031\214\032\210\033\222\036\213\043\023\044\006\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\036\005\300\020\163\022\212\023\216\024\217\026" +
    "\211\027\221\030\215\031\214\032\210\033\222\036\213" +
    "\043\023\044\006\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\030\007\306\010\054\011\053\012\052\013\051\014" +
    "\050\015\046\016\044\020\040\041\042\042\045\001\001" +
    "\000\002\001\001\000\002\001\001\000\036\005\311\020" +
    "\163\022\212\023\216\024\217\026\211\027\221\030\215" +
    "\031\214\032\210\033\222\036\213\043\023\044\006\001" +
    "\001\000\002\001\001\000\002\001\001\000\036\004\314" +
    "\020\163\022\154\023\161\024\162\026\153\027\165\030" +
    "\160\031\157\032\150\033\166\036\156\043\023\044\006" +
    "\001\001\000\002\001\001\000\004\020\343\001\001\000" +
    "\004\020\317\001\001\000\002\001\001\000\010\020\133" +
    "\043\322\045\321\001\001\000\002\001\001\000\004\020" +
    "\324\001\001\000\004\020\335\001\001\000\004\046\326" +
    "\001\001\000\006\020\133\043\327\001\001\000\002\001" +
    "\001\000\004\020\331\001\001\000\004\020\333\001\001" +
    "\000\004\046\332\001\001\000\002\001\001\000\004\046" +
    "\334\001\001\000\002\001\001\000\004\046\336\001\001" +
    "\000\002\001\001\000\002\001\001\000\036\005\341\020" +
    "\163\022\212\023\216\024\217\026\211\027\221\030\215" +
    "\031\214\032\210\033\222\036\213\043\023\044\006\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\010\020\133\043\322\045\345\001\001\000\002\001" +
    "\001\000\002\001\001\000\032\006\363\020\361\022\353" +
    "\023\356\024\357\026\352\027\362\031\355\032\350\036" +
    "\354\037\360\043\023\001\001\000\002\001\001\000\030" +
    "\007\u0101\010\054\011\053\012\052\013\051\014\050\015" +
    "\046\016\044\020\040\041\042\042\045\001\001\000\032" +
    "\006\u0100\020\361\022\353\023\356\024\357\026\352\027" +
    "\362\031\355\032\350\036\354\037\360\043\023\001\001" +
    "\000\032\006\377\020\361\022\353\023\356\024\357\026" +
    "\352\027\362\031\355\032\350\036\354\037\360\043\023" +
    "\001\001\000\002\001\001\000\002\001\001\000\032\006" +
    "\372\020\361\022\353\023\356\024\357\026\352\027\362" +
    "\031\355\032\350\036\354\037\360\043\023\001\001\000" +
    "\032\006\371\020\361\022\353\023\356\024\357\026\352" +
    "\027\362\031\355\032\350\036\354\037\360\043\023\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\032\006\366\020" +
    "\361\022\353\023\356\024\357\026\352\027\362\031\355" +
    "\032\350\036\354\037\360\043\023\001\001\000\002\001" +
    "\001\000\032\006\370\020\361\022\353\023\356\024\357" +
    "\026\352\027\362\031\355\032\350\036\354\037\360\043" +
    "\023\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\032\006\374\020\361\022\353\023\356\024" +
    "\357\026\352\027\362\031\355\032\350\036\354\037\360" +
    "\043\023\001\001\000\002\001\001\000\032\006\376\020" +
    "\361\022\353\023\356\024\357\026\352\027\362\031\355" +
    "\032\350\036\354\037\360\043\023\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\032\006\u0103\020\361\022\353\023\356\024\357\026" +
    "\352\027\362\031\355\032\350\036\354\037\360\043\023" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\032\007\u0109" +
    "\010\054\011\053\012\052\013\051\014\050\015\046\016" +
    "\044\020\040\041\042\042\045\051\u010a\001\001\000\002" +
    "\001\001\000\002\001\001\000\030\007\u010d\010\054\011" +
    "\053\012\052\013\051\014\050\015\046\016\044\020\040" +
    "\041\042\042\045\001\001\000\002\001\001\000\002\001" +
    "\001\000\010\020\133\043\u010f\044\u0110\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\016\020\133\031" +
    "\u011b\033\u011a\043\u011c\044\006\053\u0119\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\020" +
    "\u011d\001\001\000\002\001\001\000\016\020\133\031\u011b" +
    "\033\u011a\043\u011c\044\006\053\u011f\001\001\000\002\001" +
    "\001\000\016\020\133\031\u011b\033\u011a\043\u011c\044\006" +
    "\053\u0121\001\001\000\002\001\001\000\002\001\001\000" +
    "\032\003\u0124\020\022\027\025\030\017\031\015\032\003" +
    "\033\026\034\020\035\010\040\014\043\023\044\006\001" +
    "\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$AnalizadorSintacticoTiny$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$AnalizadorSintacticoTiny$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$AnalizadorSintacticoTiny$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 1;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}


  /** User initialization code. */
  public void user_init() throws java.lang.Exception
    {
 
   errores = new GestionErrores();
   AnalizadorLexicoTiny alex = (AnalizadorLexicoTiny)getScanner();
   alex.fijaGestionErrores(errores);

    }

  /** Scan to get the next Symbol. */
  public java_cup.runtime.Symbol scan()
    throws java.lang.Exception
    {
 return getScanner().next_token(); 
    }

 
   private GestionErrores errores;
   public void syntax_error(Symbol unidadLexica) {
     errores.errorSintactico((UnidadLexica)unidadLexica);
   }

}

/** Cup generated class to encapsulate user supplied action code.*/
class CUP$AnalizadorSintacticoTiny$actions {


   private ASExpresion as = new ASExpresion();

  private final AnalizadorSintacticoTiny parser;

  /** Constructor */
  CUP$AnalizadorSintacticoTiny$actions(AnalizadorSintacticoTiny parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$AnalizadorSintacticoTiny$do_action_part00000000(
    int                        CUP$AnalizadorSintacticoTiny$act_num,
    java_cup.runtime.lr_parser CUP$AnalizadorSintacticoTiny$parser,
    java.util.Stack            CUP$AnalizadorSintacticoTiny$stack,
    int                        CUP$AnalizadorSintacticoTiny$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$AnalizadorSintacticoTiny$result;

      /* select the action based on the action number */
      switch (CUP$AnalizadorSintacticoTiny$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // PROG_COMP ::= CABECERA MAIN LLAVEAPERTURA CUERPO_MAIN LLAVECIERRE 
            {
              ProgramaCompleto RESULT =null;
		Cabecera cab = (Cabecera)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-4)).value;
		CuerpoMain c_main = (CuerpoMain)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-1)).value;
		 RESULT = new ProgramaCompleto(cab, c_main); 
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("PROG_COMP",0, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // $START ::= PROG_COMP EOF 
            {
              Object RESULT =null;
		ProgramaCompleto start_val = (ProgramaCompleto)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-1)).value;
		RESULT = start_val;
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("$START",0, RESULT);
            }
          /* ACCEPT */
          CUP$AnalizadorSintacticoTiny$parser.done_parsing();
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // CABECERA ::= INST_DECL_FUN CABECERA 
            {
              Cabecera RESULT =null;
		InstruccionDeclFuncion inst = (InstruccionDeclFuncion)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-1)).value;
		Cabecera cab = (Cabecera)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.peek()).value;
		 cab.addInstr(inst); RESULT = cab; 
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("CABECERA",1, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // CABECERA ::= INST_DECLASIG PUNTOCOMA CABECERA 
            {
              Cabecera RESULT =null;
		InstruccionDeclaracion inst = (InstruccionDeclaracion)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-2)).value;
		Cabecera cab = (Cabecera)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.peek()).value;
		 cab.addInstr(inst); RESULT = cab; 
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("CABECERA",1, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // CABECERA ::= INST_DECL PUNTOCOMA CABECERA 
            {
              Cabecera RESULT =null;
		InstruccionDeclaracion inst = (InstruccionDeclaracion)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-2)).value;
		Cabecera cab = (Cabecera)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.peek()).value;
		 cab.addInstr(inst); RESULT = cab; 
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("CABECERA",1, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // CABECERA ::= INST_DECL_VECTOR PUNTOCOMA CABECERA 
            {
              Cabecera RESULT =null;
		InstruccionDeclVector inst = (InstruccionDeclVector)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-2)).value;
		Cabecera cab = (Cabecera)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.peek()).value;
		 cab.addInstr(inst); RESULT = cab; 
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("CABECERA",1, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // CABECERA ::= INST_ASIG PUNTOCOMA CABECERA 
            {
              Cabecera RESULT =null;
		InstruccionAsignacion inst = (InstruccionAsignacion)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-2)).value;
		Cabecera cab = (Cabecera)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.peek()).value;
		 cab.addInstr(inst); RESULT = cab; 
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("CABECERA",1, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // CABECERA ::= INST_ASIG_VECTOR PUNTOCOMA CABECERA 
            {
              Cabecera RESULT =null;
		InstruccionAsigVector inst = (InstruccionAsigVector)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-2)).value;
		Cabecera cab = (Cabecera)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.peek()).value;
		 cab.addInstr(inst); RESULT = cab; 
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("CABECERA",1, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // CABECERA ::= INST_TYPEDEF PUNTOCOMA CABECERA 
            {
              Cabecera RESULT =null;
		InstruccionTypedef inst = (InstruccionTypedef)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-2)).value;
		Cabecera cab = (Cabecera)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.peek()).value;
		 cab.addInstr(inst); RESULT = cab; 
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("CABECERA",1, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // CABECERA ::= INST_STRUCT PUNTOCOMA CABECERA 
            {
              Cabecera RESULT =null;
		InstruccionDeclStruct inst = (InstruccionDeclStruct)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-2)).value;
		Cabecera cab = (Cabecera)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.peek()).value;
		 cab.addInstr(inst); RESULT = cab; 
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("CABECERA",1, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // CABECERA ::= 
            {
              Cabecera RESULT =null;
		 RESULT = new Cabecera(); 
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("CABECERA",1, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // CUERPO_MAIN ::= INST_DECLASIG PUNTOCOMA CUERPO_MAIN 
            {
              CuerpoMain RESULT =null;
		InstruccionDeclaracion inst = (InstruccionDeclaracion)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-2)).value;
		CuerpoMain c_main = (CuerpoMain)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.peek()).value;
		 c_main.addInstr(inst); RESULT = c_main; 
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("CUERPO_MAIN",2, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // CUERPO_MAIN ::= INST_DECL PUNTOCOMA CUERPO_MAIN 
            {
              CuerpoMain RESULT =null;
		InstruccionDeclaracion inst = (InstruccionDeclaracion)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-2)).value;
		CuerpoMain c_main = (CuerpoMain)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.peek()).value;
		 c_main.addInstr(inst); RESULT = c_main; 
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("CUERPO_MAIN",2, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // CUERPO_MAIN ::= INST_DECL_VECTOR PUNTOCOMA CUERPO_MAIN 
            {
              CuerpoMain RESULT =null;
		InstruccionDeclVector inst = (InstruccionDeclVector)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-2)).value;
		CuerpoMain c_main = (CuerpoMain)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.peek()).value;
		 c_main.addInstr(inst); RESULT = c_main; 
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("CUERPO_MAIN",2, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // CUERPO_MAIN ::= INST_ASIG PUNTOCOMA CUERPO_MAIN 
            {
              CuerpoMain RESULT =null;
		InstruccionAsignacion inst = (InstruccionAsignacion)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-2)).value;
		CuerpoMain c_main = (CuerpoMain)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.peek()).value;
		 c_main.addInstr(inst); RESULT = c_main; 
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("CUERPO_MAIN",2, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // CUERPO_MAIN ::= INST_ASIG_VECTOR PUNTOCOMA CUERPO_MAIN 
            {
              CuerpoMain RESULT =null;
		InstruccionAsigVector inst = (InstruccionAsigVector)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-2)).value;
		CuerpoMain c_main = (CuerpoMain)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.peek()).value;
		 c_main.addInstr(inst); RESULT = c_main; 
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("CUERPO_MAIN",2, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // CUERPO_MAIN ::= INST_CALL_PROC PUNTOCOMA CUERPO_MAIN 
            {
              CuerpoMain RESULT =null;
		InstruccionLlamadaFuncion inst = (InstruccionLlamadaFuncion)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-2)).value;
		CuerpoMain c_main = (CuerpoMain)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.peek()).value;
		 c_main.addInstr(inst); RESULT = c_main; 
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("CUERPO_MAIN",2, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // CUERPO_MAIN ::= INST_FOR CUERPO_MAIN 
            {
              CuerpoMain RESULT =null;
		InstruccionFor inst = (InstruccionFor)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-1)).value;
		CuerpoMain c_main = (CuerpoMain)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.peek()).value;
		 c_main.addInstr(inst); RESULT = c_main; 
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("CUERPO_MAIN",2, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // CUERPO_MAIN ::= INST_IF CUERPO_MAIN 
            {
              CuerpoMain RESULT =null;
		InstruccionIfElse inst = (InstruccionIfElse)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-1)).value;
		CuerpoMain c_main = (CuerpoMain)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.peek()).value;
		 c_main.addInstr(inst); RESULT = c_main; 
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("CUERPO_MAIN",2, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // CUERPO_MAIN ::= INST_IFELSE CUERPO_MAIN 
            {
              CuerpoMain RESULT =null;
		InstruccionIfElse inst = (InstruccionIfElse)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-1)).value;
		CuerpoMain c_main = (CuerpoMain)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.peek()).value;
		 c_main.addInstr(inst); RESULT = c_main; 
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("CUERPO_MAIN",2, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // CUERPO_MAIN ::= INST_WHILE CUERPO_MAIN 
            {
              CuerpoMain RESULT =null;
		InstruccionWhile inst = (InstruccionWhile)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-1)).value;
		CuerpoMain c_main = (CuerpoMain)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.peek()).value;
		 c_main.addInstr(inst); RESULT = c_main; 
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("CUERPO_MAIN",2, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // CUERPO_MAIN ::= 
            {
              CuerpoMain RESULT =null;
		 RESULT = new CuerpoMain(); 
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("CUERPO_MAIN",2, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // Exp0 ::= Exp0 OR Exp1 
            {
              Expresion RESULT =null;
		Expresion exp1 = (Expresion)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-2)).value;
		Expresion exp2 = (Expresion)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.peek()).value;
		 RESULT = as.or(exp1, exp2); 
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("Exp0",5, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // Exp0 ::= Exp1 
            {
              Expresion RESULT =null;
		Expresion exp = (Expresion)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.peek()).value;
		 RESULT = exp; 
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("Exp0",5, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // Exp1 ::= Exp1 AND Exp2 
            {
              Expresion RESULT =null;
		Expresion exp1 = (Expresion)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-2)).value;
		Expresion exp2 = (Expresion)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.peek()).value;
		 RESULT = as.and(exp1, exp2); 
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("Exp1",6, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // Exp1 ::= Exp2 
            {
              Expresion RESULT =null;
		Expresion exp = (Expresion)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.peek()).value;
		 RESULT = exp; 
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("Exp1",6, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // Exp2 ::= NOT Exp2 
            {
              Expresion RESULT =null;
		Expresion exp2 = (Expresion)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.peek()).value;
		 RESULT = as.not(exp2); 
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("Exp2",7, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // Exp2 ::= Exp3 
            {
              Expresion RESULT =null;
		Expresion exp = (Expresion)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.peek()).value;
		 RESULT = exp; 
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("Exp2",7, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // Exp3 ::= Exp3 IGUALIGUAL Exp4 
            {
              Expresion RESULT =null;
		Expresion exp1 = (Expresion)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-2)).value;
		Expresion exp2 = (Expresion)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.peek()).value;
		 RESULT = as.equals(exp1, exp2); 
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("Exp3",8, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // Exp3 ::= Exp3 NOIGUAL Exp4 
            {
              Expresion RESULT =null;
		Expresion exp1 = (Expresion)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-2)).value;
		Expresion exp2 = (Expresion)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.peek()).value;
		 RESULT = as.nequals(exp1, exp2); 
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("Exp3",8, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // Exp3 ::= Exp4 
            {
              Expresion RESULT =null;
		Expresion exp = (Expresion)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.peek()).value;
		 RESULT = exp; 
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("Exp3",8, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // Exp4 ::= Exp4 MENOR Exp5 
            {
              Expresion RESULT =null;
		Expresion exp1 = (Expresion)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-2)).value;
		Expresion exp2 = (Expresion)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.peek()).value;
		 RESULT = as.lt(exp1, exp2); 
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("Exp4",9, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // Exp4 ::= Exp4 MAYOR Exp5 
            {
              Expresion RESULT =null;
		Expresion exp1 = (Expresion)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-2)).value;
		Expresion exp2 = (Expresion)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.peek()).value;
		 RESULT = as.gt(exp1, exp2); 
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("Exp4",9, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // Exp4 ::= Exp4 MENOROIGUAL Exp5 
            {
              Expresion RESULT =null;
		Expresion exp1 = (Expresion)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-2)).value;
		Expresion exp2 = (Expresion)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.peek()).value;
		 RESULT = as.leq(exp1, exp2); 
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("Exp4",9, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // Exp4 ::= Exp4 MAYOROIGUAL Exp5 
            {
              Expresion RESULT =null;
		Expresion exp1 = (Expresion)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-2)).value;
		Expresion exp2 = (Expresion)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.peek()).value;
		 RESULT = as.geq(exp1, exp2); 
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("Exp4",9, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // Exp4 ::= Exp5 
            {
              Expresion RESULT =null;
		Expresion exp = (Expresion)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.peek()).value;
		 RESULT = exp; 
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("Exp4",9, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // Exp5 ::= Exp5 SUM Exp6 
            {
              Expresion RESULT =null;
		Expresion exp1 = (Expresion)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-2)).value;
		Expresion exp2 = (Expresion)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.peek()).value;
		 RESULT = as.suma(exp1, exp2); 
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("Exp5",10, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // Exp5 ::= Exp5 SUB Exp6 
            {
              Expresion RESULT =null;
		Expresion exp1 = (Expresion)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-2)).value;
		Expresion exp2 = (Expresion)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.peek()).value;
		 RESULT = as.resta(exp1, exp2); 
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("Exp5",10, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // Exp5 ::= Exp6 
            {
              Expresion RESULT =null;
		Expresion exp = (Expresion)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.peek()).value;
		 RESULT = exp; 
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("Exp5",10, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // Exp6 ::= Exp6 MULT Exp7 
            {
              Expresion RESULT =null;
		Expresion exp1 = (Expresion)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-2)).value;
		Expresion exp2 = (Expresion)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.peek()).value;
		 RESULT = as.mul(exp1, exp2); 
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("Exp6",11, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // Exp6 ::= Exp6 DIV Exp7 
            {
              Expresion RESULT =null;
		Expresion exp1 = (Expresion)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-2)).value;
		Expresion exp2 = (Expresion)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.peek()).value;
		 RESULT = as.div(exp1, exp2); 
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("Exp6",11, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // Exp6 ::= Exp6 MOD Exp7 
            {
              Expresion RESULT =null;
		Expresion exp1 = (Expresion)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-2)).value;
		Expresion exp2 = (Expresion)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.peek()).value;
		 RESULT = as.mod(exp1, exp2); 
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("Exp6",11, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // Exp6 ::= Exp7 
            {
              Expresion RESULT =null;
		Expresion exp = (Expresion)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.peek()).value;
		 RESULT = exp; 
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("Exp6",11, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // Exp7 ::= NUM 
            {
              Expresion RESULT =null;
		String cadenaNum = (String)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.peek()).value;
		 RESULT = as.num(cadenaNum); 
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("Exp7",12, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // Exp7 ::= TRUE 
            {
              Expresion RESULT =null;
		 RESULT = as.bool_true(); 
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("Exp7",12, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // Exp7 ::= FALSE 
            {
              Expresion RESULT =null;
		 RESULT = as.bool_false(); 
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("Exp7",12, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // Exp7 ::= Ident 
            {
              Expresion RESULT =null;
		Id id = (Id)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.peek()).value;
		 RESULT = id; 
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("Exp7",12, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // Exp7 ::= EXPR_LLAM_FUN 
            {
              Expresion RESULT =null;
		ExpresionLlamadaFuncion llam_fun = (ExpresionLlamadaFuncion)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.peek()).value;
		 RESULT = llam_fun; 
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("Exp7",12, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // Exp7 ::= EXPR_ACC_VECT 
            {
              Expresion RESULT =null;
		ListIndex acc = (ListIndex)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.peek()).value;
		 RESULT = acc; 
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("Exp7",12, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // CUER ::= INST_DECLASIG PUNTOCOMA CUER 
            {
              Cuerpo RESULT =null;
		InstruccionDeclaracion inst = (InstruccionDeclaracion)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-2)).value;
		Cuerpo c = (Cuerpo)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.peek()).value;
		 c.addInstr(inst); RESULT = c; 
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("CUER",3, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // CUER ::= INST_DECL PUNTOCOMA CUER 
            {
              Cuerpo RESULT =null;
		InstruccionDeclaracion inst = (InstruccionDeclaracion)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-2)).value;
		Cuerpo c = (Cuerpo)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.peek()).value;
		 c.addInstr(inst); RESULT = c; 
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("CUER",3, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // CUER ::= INST_DECL_VECTOR PUNTOCOMA CUER 
            {
              Cuerpo RESULT =null;
		InstruccionDeclVector inst = (InstruccionDeclVector)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-2)).value;
		Cuerpo c = (Cuerpo)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.peek()).value;
		 c.addInstr(inst); RESULT = c; 
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("CUER",3, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // CUER ::= INST_ASIG PUNTOCOMA CUER 
            {
              Cuerpo RESULT =null;
		InstruccionAsignacion inst = (InstruccionAsignacion)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-2)).value;
		Cuerpo c = (Cuerpo)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.peek()).value;
		 c.addInstr(inst); RESULT = c; 
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("CUER",3, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // CUER ::= INST_ASIG_VECTOR PUNTOCOMA CUER 
            {
              Cuerpo RESULT =null;
		InstruccionAsigVector inst = (InstruccionAsigVector)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-2)).value;
		Cuerpo c = (Cuerpo)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.peek()).value;
		 c.addInstr(inst); RESULT = c; 
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("CUER",3, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // CUER ::= INST_CALL_PROC PUNTOCOMA CUER 
            {
              Cuerpo RESULT =null;
		InstruccionLlamadaFuncion inst = (InstruccionLlamadaFuncion)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-2)).value;
		Cuerpo c = (Cuerpo)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.peek()).value;
		 c.addInstr(inst); RESULT = c; 
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("CUER",3, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // CUER ::= INST_FOR CUER 
            {
              Cuerpo RESULT =null;
		InstruccionFor inst = (InstruccionFor)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-1)).value;
		Cuerpo c = (Cuerpo)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.peek()).value;
		 c.addInstr(inst); RESULT = c; 
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("CUER",3, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // CUER ::= INST_IF CUER 
            {
              Cuerpo RESULT =null;
		InstruccionIfElse inst = (InstruccionIfElse)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-1)).value;
		Cuerpo c = (Cuerpo)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.peek()).value;
		 c.addInstr(inst); RESULT = c; 
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("CUER",3, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // CUER ::= INST_IFELSE CUER 
            {
              Cuerpo RESULT =null;
		InstruccionIfElse inst = (InstruccionIfElse)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-1)).value;
		Cuerpo c = (Cuerpo)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.peek()).value;
		 c.addInstr(inst); RESULT = c; 
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("CUER",3, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // CUER ::= INST_WHILE CUER 
            {
              Cuerpo RESULT =null;
		InstruccionWhile inst = (InstruccionWhile)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-1)).value;
		Cuerpo c = (Cuerpo)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.peek()).value;
		 c.addInstr(inst); RESULT = c; 
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("CUER",3, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // CUER ::= 
            {
              Cuerpo RESULT =null;
		 RESULT = new Cuerpo(); 
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("CUER",3, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // INST_IF ::= IF PARAPERTURA Exp0 PARCIERRE LLAVEAPERTURA CUER LLAVECIERRE 
            {
              InstruccionIfElse RESULT =null;
		Expresion cond = (Expresion)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-4)).value;
		Cuerpo cif = (Cuerpo)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-1)).value;
		 RESULT = new InstruccionIfElse(cond, cif); 
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("INST_IF",16, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // INST_IFELSE ::= IF PARAPERTURA Exp0 PARCIERRE LLAVEAPERTURA CUER LLAVECIERRE ELSE LLAVEAPERTURA CUER LLAVECIERRE 
            {
              InstruccionIfElse RESULT =null;
		Expresion cond = (Expresion)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-8)).value;
		Cuerpo cif = (Cuerpo)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-5)).value;
		Cuerpo celse = (Cuerpo)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-1)).value;
		 RESULT = new InstruccionIfElse(cond, cif, celse); 
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("INST_IFELSE",17, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // INST_WHILE ::= WHILE PARAPERTURA Exp0 PARCIERRE LLAVEAPERTURA CUER LLAVECIERRE 
            {
              InstruccionWhile RESULT =null;
		Expresion cond = (Expresion)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-4)).value;
		Cuerpo cwhile = (Cuerpo)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-1)).value;
		 RESULT = new InstruccionWhile(cond, cwhile); 
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("INST_WHILE",18, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // INST_FOR ::= FOR PARAPERTURA INST_ASIG PUNTOCOMA Exp0 PUNTOCOMA INST_ASIG PARCIERRE LLAVEAPERTURA CUER LLAVECIERRE 
            {
              InstruccionFor RESULT =null;
		InstruccionAsignacion ini = (InstruccionAsignacion)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-8)).value;
		Expresion cond = (Expresion)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-6)).value;
		InstruccionAsignacion paso = (InstruccionAsignacion)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-4)).value;
		Cuerpo cfor = (Cuerpo)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-1)).value;
		 RESULT = new InstruccionFor(ini.getId(), ini.getValor(), cond, paso.getValor(), cfor); 
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("INST_FOR",20, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // INST_FOR ::= FOR PARAPERTURA INST_DECLASIG PUNTOCOMA Exp0 PUNTOCOMA INST_ASIG PARCIERRE LLAVEAPERTURA CUER LLAVECIERRE 
            {
              InstruccionFor RESULT =null;
		InstruccionDeclaracion ini = (InstruccionDeclaracion)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-8)).value;
		Expresion cond = (Expresion)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-6)).value;
		InstruccionAsignacion paso = (InstruccionAsignacion)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-4)).value;
		Cuerpo cfor = (Cuerpo)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-1)).value;
		 RESULT = new InstruccionFor(ini.getId(), ini.getValor(), cond, paso.getValor(), cfor); 
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("INST_FOR",20, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // INST_ASIG ::= Ident IGUAL Exp0 
            {
              InstruccionAsignacion RESULT =null;
		Id id = (Id)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-2)).value;
		Expresion exp = (Expresion)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.peek()).value;
		 RESULT = new InstruccionAsignacion(id, exp); 
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("INST_ASIG",21, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // INST_ASIG_VECTOR ::= Ident IGUAL LLAVEAPERTURA LIST_VAL2 LLAVECIERRE 
            {
              InstruccionAsigVector RESULT =null;
		Id id = (Id)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-4)).value;
		ArrayDeque<Expresion> list = (ArrayDeque<Expresion>)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-1)).value;
		 RESULT = new InstruccionAsigVector(id,list);
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("INST_ASIG_VECTOR",22, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // LIST_VAL2 ::= Exp0 
            {
              ArrayDeque<Expresion> RESULT =null;
		Expresion val = (Expresion)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.peek()).value;
		ArrayDeque<Expresion> list = new ArrayDeque<Expresion>(); list.add(val); RESULT = list;
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("LIST_VAL2",40, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // LIST_VAL2 ::= LIST_VAL2 COMA Exp0 
            {
              ArrayDeque<Expresion> RESULT =null;
		ArrayDeque<Expresion> list = (ArrayDeque<Expresion>)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-2)).value;
		Expresion val = (Expresion)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.peek()).value;
		list.add(val); RESULT = list;
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("LIST_VAL2",40, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // INST_DECL ::= Tip Ident 
            {
              InstruccionDeclaracion RESULT =null;
		Tipo t = (Tipo)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-1)).value;
		Id id = (Id)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.peek()).value;
		 RESULT = new InstruccionDeclaracion(t,id); 
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("INST_DECL",23, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // INST_DECL_VECTOR ::= Tip_vect Ident 
            {
              InstruccionDeclVector RESULT =null;
		TipoLista t = (TipoLista)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-1)).value;
		Id id = (Id)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.peek()).value;
		 RESULT = new InstruccionDeclVector(t.getTipoDeLaLista(),id,t.length()); 
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("INST_DECL_VECTOR",25, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // INST_DECLASIG ::= Tip Ident IGUAL Exp0 
            {
              InstruccionDeclaracion RESULT =null;
		Tipo t = (Tipo)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-3)).value;
		Id id = (Id)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-2)).value;
		Expresion exp = (Expresion)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.peek()).value;
		 RESULT = new InstruccionDeclaracion(t,id,exp); 
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("INST_DECLASIG",24, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // INST_DECL_VECTOR ::= Tip_vect Ident IGUAL LLAVEAPERTURA LIST_VAL LLAVECIERRE 
            {
              InstruccionDeclVector RESULT =null;
		TipoLista t = (TipoLista)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-5)).value;
		Id id = (Id)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-4)).value;
		ArrayDeque<Expresion> list = (ArrayDeque<Expresion>)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-1)).value;
		 RESULT = new InstruccionDeclVector(t.getTipoDeLaLista(),id,t.length(),list);
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("INST_DECL_VECTOR",25, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // LIST_VAL ::= Exp0 
            {
              ArrayDeque<Expresion> RESULT =null;
		Expresion val = (Expresion)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.peek()).value;
		ArrayDeque<Expresion> list = new ArrayDeque<Expresion>(); list.add(val); RESULT = list;
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("LIST_VAL",39, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // LIST_VAL ::= LIST_VAL COMA Exp0 
            {
              ArrayDeque<Expresion> RESULT =null;
		ArrayDeque<Expresion> list = (ArrayDeque<Expresion>)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-2)).value;
		Expresion val = (Expresion)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.peek()).value;
		list.add(val); RESULT = list;
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("LIST_VAL",39, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // ARGUMENTOS_INI ::= Tip Ident ARGUMENTOS 
            {
              ArrayDeque<Tipo_Id> RESULT =null;
		Tipo t = (Tipo)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-2)).value;
		Id id = (Id)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-1)).value;
		ArrayDeque<Tipo_Id> arg = (ArrayDeque<Tipo_Id>)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.peek()).value;
		 arg.addFirst(new Tipo_Id(t, id)); RESULT = arg; 
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("ARGUMENTOS_INI",35, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // ARGUMENTOS_INI ::= Tip AMPERSAND Ident ARGUMENTOS 
            {
              ArrayDeque<Tipo_Id> RESULT =null;
		Tipo t = (Tipo)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-3)).value;
		Id id = (Id)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-1)).value;
		ArrayDeque<Tipo_Id> arg = (ArrayDeque<Tipo_Id>)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.peek()).value;
		 arg.addFirst(new Tipo_Id(t, id)); RESULT = arg; 
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("ARGUMENTOS_INI",35, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // ARGUMENTOS_INI ::= 
            {
              ArrayDeque<Tipo_Id> RESULT =null;
		 RESULT = new ArrayDeque<Tipo_Id>(); 
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("ARGUMENTOS_INI",35, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // ARGUMENTOS ::= COMA Tip Ident ARGUMENTOS 
            {
              ArrayDeque<Tipo_Id> RESULT =null;
		Tipo t = (Tipo)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-2)).value;
		Id id = (Id)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-1)).value;
		ArrayDeque<Tipo_Id> arg = (ArrayDeque<Tipo_Id>)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.peek()).value;
		 arg.addFirst(new Tipo_Id(t, id)); RESULT = arg; 
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("ARGUMENTOS",36, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // ARGUMENTOS ::= COMA Tip AMPERSAND Ident ARGUMENTOS 
            {
              ArrayDeque<Tipo_Id> RESULT =null;
		Tipo t = (Tipo)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-3)).value;
		Id id = (Id)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-1)).value;
		ArrayDeque<Tipo_Id> arg = (ArrayDeque<Tipo_Id>)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.peek()).value;
		 arg.addFirst(new Tipo_Id(t, id)); RESULT = arg; 
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("ARGUMENTOS",36, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // ARGUMENTOS ::= 
            {
              ArrayDeque<Tipo_Id> RESULT =null;
		 RESULT = new ArrayDeque<Tipo_Id>(); 
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("ARGUMENTOS",36, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // CUER_FUN ::= INST_DECLASIG PUNTOCOMA CUER_FUN 
            {
              Cuerpo RESULT =null;
		InstruccionDeclaracion inst = (InstruccionDeclaracion)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-2)).value;
		Cuerpo c = (Cuerpo)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.peek()).value;
		 c.addInstr(inst); RESULT = c; 
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("CUER_FUN",4, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // CUER_FUN ::= INST_DECL PUNTOCOMA CUER_FUN 
            {
              Cuerpo RESULT =null;
		InstruccionDeclaracion inst = (InstruccionDeclaracion)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-2)).value;
		Cuerpo c = (Cuerpo)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.peek()).value;
		 c.addInstr(inst); RESULT = c; 
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("CUER_FUN",4, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // CUER_FUN ::= INST_ASIG PUNTOCOMA CUER_FUN 
            {
              Cuerpo RESULT =null;
		InstruccionAsignacion inst = (InstruccionAsignacion)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-2)).value;
		Cuerpo c = (Cuerpo)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.peek()).value;
		 c.addInstr(inst); RESULT = c; 
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("CUER_FUN",4, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // CUER_FUN ::= INST_CALL_PROC PUNTOCOMA CUER_FUN 
            {
              Cuerpo RESULT =null;
		InstruccionLlamadaFuncion inst = (InstruccionLlamadaFuncion)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-2)).value;
		Cuerpo c = (Cuerpo)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.peek()).value;
		 c.addInstr(inst); RESULT = c; 
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("CUER_FUN",4, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 85: // CUER_FUN ::= INST_FOR CUER_FUN 
            {
              Cuerpo RESULT =null;
		InstruccionFor inst = (InstruccionFor)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-1)).value;
		Cuerpo c = (Cuerpo)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.peek()).value;
		 c.addInstr(inst); RESULT = c; 
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("CUER_FUN",4, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 86: // CUER_FUN ::= INST_IF CUER_FUN 
            {
              Cuerpo RESULT =null;
		InstruccionIfElse inst = (InstruccionIfElse)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-1)).value;
		Cuerpo c = (Cuerpo)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.peek()).value;
		 c.addInstr(inst); RESULT = c; 
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("CUER_FUN",4, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 87: // CUER_FUN ::= INST_IFELSE CUER_FUN 
            {
              Cuerpo RESULT =null;
		InstruccionIfElse inst = (InstruccionIfElse)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-1)).value;
		Cuerpo c = (Cuerpo)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.peek()).value;
		 c.addInstr(inst); RESULT = c; 
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("CUER_FUN",4, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 88: // CUER_FUN ::= INST_WHILE CUER_FUN 
            {
              Cuerpo RESULT =null;
		InstruccionWhile inst = (InstruccionWhile)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-1)).value;
		Cuerpo c = (Cuerpo)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.peek()).value;
		 c.addInstr(inst); RESULT = c; 
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("CUER_FUN",4, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 89: // CUER_FUN ::= INST_RETURN PUNTOCOMA CUER_FUN 
            {
              Cuerpo RESULT =null;
		InstruccionReturn inst = (InstruccionReturn)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-2)).value;
		Cuerpo c = (Cuerpo)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.peek()).value;
		 c.addInstr(inst); RESULT = c; 
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("CUER_FUN",4, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 90: // CUER_FUN ::= 
            {
              Cuerpo RESULT =null;
		 RESULT = new Cuerpo(); 
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("CUER_FUN",4, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 91: // INST_DECL_FUN ::= FUNCTION Tip Ident PARAPERTURA ARGUMENTOS_INI PARCIERRE LLAVEAPERTURA CUER_FUN LLAVECIERRE 
            {
              InstruccionDeclFuncion RESULT =null;
		Tipo tipo_dev = (Tipo)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-7)).value;
		Id id = (Id)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-6)).value;
		ArrayDeque<Tipo_Id> arg = (ArrayDeque<Tipo_Id>)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-4)).value;
		Cuerpo c = (Cuerpo)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-1)).value;
		 RESULT = new InstruccionDeclFuncion(tipo_dev, id, arg, c); 
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("INST_DECL_FUN",27, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 92: // INST_DECL_FUN ::= FUNCTION VOID Ident PARAPERTURA ARGUMENTOS_INI PARCIERRE LLAVEAPERTURA CUER LLAVECIERRE 
            {
              InstruccionDeclFuncion RESULT =null;
		Id id = (Id)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-6)).value;
		ArrayDeque<Tipo_Id> arg = (ArrayDeque<Tipo_Id>)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-4)).value;
		Cuerpo c = (Cuerpo)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-1)).value;
		 RESULT = new InstruccionDeclFuncion(null, id, arg, c); 
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("INST_DECL_FUN",27, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 93: // ARGUMENTOSPROC_INI ::= Exp0 ARGUMENTOSPROC 
            {
              ArrayDeque<Expresion> RESULT =null;
		Expresion e = (Expresion)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-1)).value;
		ArrayDeque<Expresion> arg = (ArrayDeque<Expresion>)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.peek()).value;
		 arg.addFirst(e); RESULT = arg; 
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("ARGUMENTOSPROC_INI",37, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 94: // ARGUMENTOSPROC_INI ::= 
            {
              ArrayDeque<Expresion> RESULT =null;
		 RESULT = new ArrayDeque<Expresion>(); 
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("ARGUMENTOSPROC_INI",37, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 95: // ARGUMENTOSPROC ::= COMA Exp0 ARGUMENTOSPROC 
            {
              ArrayDeque<Expresion> RESULT =null;
		Expresion e = (Expresion)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-1)).value;
		ArrayDeque<Expresion> arg = (ArrayDeque<Expresion>)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.peek()).value;
		 arg.addFirst(e); RESULT = arg; 
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("ARGUMENTOSPROC",38, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 96: // ARGUMENTOSPROC ::= 
            {
              ArrayDeque<Expresion> RESULT =null;
		 RESULT = new ArrayDeque<Expresion>(); 
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("ARGUMENTOSPROC",38, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 97: // INST_RETURN ::= RETURN Exp0 
            {
              InstruccionReturn RESULT =null;
		Expresion e = (Expresion)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.peek()).value;
		 RESULT = new InstruccionReturn(e); 
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("INST_RETURN",29, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 98: // INST_CALL_PROC ::= Ident PARAPERTURA ARGUMENTOSPROC_INI PARCIERRE 
            {
              InstruccionLlamadaFuncion RESULT =null;
		Id id = (Id)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-3)).value;
		ArrayDeque<Expresion> arg = (ArrayDeque<Expresion>)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-1)).value;
		 RESULT = new InstruccionLlamadaFuncion(id, arg); 
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("INST_CALL_PROC",28, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 99: // INST_TYPEDEF ::= TYPEDEF Tip Ident 
            {
              InstruccionTypedef RESULT =null;
		Tipo tipo = (Tipo)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-1)).value;
		Id id = (Id)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.peek()).value;
		 RESULT = new InstruccionTypedef(tipo, id); 
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("INST_TYPEDEF",30, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 100: // INST_STRUCT ::= STRUCT Ident LLAVEAPERTURA CAMPOS_STRUCT LLAVECIERRE 
            {
              InstruccionDeclStruct RESULT =null;
		Object struct = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-4)).value;
		Id nombre = (Id)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-3)).value;
		ArrayDeque<Instruccion> lista = (ArrayDeque<Instruccion>)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-1)).value;
		RESULT = new InstruccionDeclStruct(nombre, lista);
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("INST_STRUCT",26, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 101: // CAMPOS_STRUCT ::= INST_DECL PUNTOCOMA CAMPOS_STRUCT 
            {
              ArrayDeque<Instruccion> RESULT =null;
		InstruccionDeclaracion decl = (InstruccionDeclaracion)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-2)).value;
		ArrayDeque<Instruccion> lista = (ArrayDeque<Instruccion>)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.peek()).value;
		lista.add(decl); RESULT = lista;
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("CAMPOS_STRUCT",41, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 102: // CAMPOS_STRUCT ::= INST_DECL_VECTOR PUNTOCOMA CAMPOS_STRUCT 
            {
              ArrayDeque<Instruccion> RESULT =null;
		InstruccionDeclVector decl = (InstruccionDeclVector)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-2)).value;
		ArrayDeque<Instruccion> lista = (ArrayDeque<Instruccion>)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.peek()).value;
		lista.add(decl); RESULT = lista;
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("CAMPOS_STRUCT",41, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 103: // CAMPOS_STRUCT ::= 
            {
              ArrayDeque<Instruccion> RESULT =null;
		RESULT = new ArrayDeque<Instruccion>();
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("CAMPOS_STRUCT",41, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 104: // Ident ::= IDEN 
            {
              Id RESULT =null;
		String id = (String)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.peek()).value;
		 RESULT = new Id(id); 
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("Ident",14, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 105: // EXPR_LLAM_FUN ::= Ident PARAPERTURA ARGUMENTOSPROC_INI PARCIERRE 
            {
              ExpresionLlamadaFuncion RESULT =null;
		Id id = (Id)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-3)).value;
		ArrayDeque<Expresion> arg = (ArrayDeque<Expresion>)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-1)).value;
		 RESULT = new ExpresionLlamadaFuncion(id, arg); 
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("EXPR_LLAM_FUN",31, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 106: // EXPR_ACC_VECT ::= Ident CORCHAPERTURA Exp0 CORCHCIERRE 
            {
              ListIndex RESULT =null;
		Id id = (Id)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-3)).value;
		Expresion idx = (Expresion)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-1)).value;
		 RESULT = new ListIndex(id, idx); 
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("EXPR_ACC_VECT",32, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 107: // Tip ::= INTEGER 
            {
              Tipo RESULT =null;
		 RESULT = new Tipo(Tipos.INTEGER); 
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("Tip",33, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 108: // Tip ::= BOOLEAN 
            {
              Tipo RESULT =null;
		 RESULT = new Tipo(Tipos.BOOLEAN); 
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("Tip",33, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 109: // Tip_vect ::= LIST MENOR Tip COMA NUM MAYOR 
            {
              TipoLista RESULT =null;
		Tipo t = (Tipo)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-3)).value;
		String n = (String)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-1)).value;
		 RESULT = new TipoLista(t, n); 
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("Tip_vect",34, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 110: // Tip_vect ::= LIST MENOR Tip_vect COMA NUM MAYOR 
            {
              TipoLista RESULT =null;
		TipoLista t = (TipoLista)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-3)).value;
		String n = (String)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-1)).value;
		 RESULT = new TipoLista(t, n); 
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("Tip_vect",34, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 111: // Tip ::= Tip ASTERISCO 
            {
              Tipo RESULT =null;
		Tipo t = (Tipo)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-1)).value;
		 RESULT = new TipoPuntero(t); 
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("Tip",33, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 112: // Tip ::= Ident 
            {
              Tipo RESULT =null;
		Id nombreStruct = (Id)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.peek()).value;
		 RESULT = new TipoStruct(nombreStruct.getS()); 
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("Tip",33, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$AnalizadorSintacticoTiny$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$AnalizadorSintacticoTiny$do_action(
    int                        CUP$AnalizadorSintacticoTiny$act_num,
    java_cup.runtime.lr_parser CUP$AnalizadorSintacticoTiny$parser,
    java.util.Stack            CUP$AnalizadorSintacticoTiny$stack,
    int                        CUP$AnalizadorSintacticoTiny$top)
    throws java.lang.Exception
    {
              return CUP$AnalizadorSintacticoTiny$do_action_part00000000(
                               CUP$AnalizadorSintacticoTiny$act_num,
                               CUP$AnalizadorSintacticoTiny$parser,
                               CUP$AnalizadorSintacticoTiny$stack,
                               CUP$AnalizadorSintacticoTiny$top);
    }
}

