
//----------------------------------------------------
// The following code was generated by CUP v0.11b beta 20140220
// Mon Apr 19 22:38:44 CEST 2021
//----------------------------------------------------

package asint;

import java_cup.runtime.*;
import alex.AnalizadorLexicoTiny;
import alex.UnidadLexica;
import errors.GestionErrores;
import ast.*;
import ast.e.*;
import ast.i.*;
import ast.t.*;
import java.util.ArrayDeque;
import java_cup.runtime.ComplexSymbolFactory.Location;

/** CUP v0.11b beta 20140220 generated parser.
  * @version Mon Apr 19 22:38:44 CEST 2021
  */
public class AnalizadorSintacticoTiny extends java_cup.runtime.lr_parser {

  /** Default constructor. */
  public AnalizadorSintacticoTiny() {super();}

  /** Constructor which sets the default scanner. */
  public AnalizadorSintacticoTiny(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public AnalizadorSintacticoTiny(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\062\000\002\030\004\000\002\002\004\000\002\030" +
    "\002\000\002\002\005\000\002\002\003\000\002\003\005" +
    "\000\002\003\003\000\002\004\004\000\002\004\003\000" +
    "\002\005\005\000\002\005\005\000\002\005\003\000\002" +
    "\006\005\000\002\006\005\000\002\006\005\000\002\006" +
    "\005\000\002\006\003\000\002\007\005\000\002\007\005" +
    "\000\002\007\003\000\002\010\005\000\002\010\005\000" +
    "\002\010\005\000\002\010\003\000\002\011\003\000\002" +
    "\011\003\000\002\011\003\000\002\011\003\000\002\014" +
    "\003\000\002\014\003\000\002\014\003\000\002\014\003" +
    "\000\002\014\003\000\002\014\003\000\002\014\003\000" +
    "\002\015\011\000\002\016\015\000\002\017\011\000\002" +
    "\021\015\000\002\022\005\000\002\023\004\000\002\023" +
    "\006\000\002\024\007\000\002\027\004\000\002\027\002" +
    "\000\002\013\003\000\002\031\003\000\002\031\003\000" +
    "\002\031\010\000\002\031\004" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\150\000\024\002\uffff\005\007\007\004\015\012\017" +
    "\006\020\025\026\014\027\024\030\005\001\002\000\004" +
    "\005\007\001\002\000\004\043\140\001\002\000\004\054" +
    "\132\001\002\000\070\002\uffd4\005\uffd4\007\uffd4\015\uffd4" +
    "\017\uffd4\020\uffd4\026\uffd4\027\uffd4\030\uffd4\035\uffd4\036" +
    "\uffd4\037\uffd4\040\uffd4\041\uffd4\042\uffd4\043\uffd4\044\uffd4" +
    "\045\uffd4\046\uffd4\047\uffd4\050\uffd4\051\uffd4\052\uffd4\055" +
    "\uffd4\056\uffd4\057\uffd4\063\uffd4\001\002\000\026\002\uffe2" +
    "\005\uffe2\007\uffe2\015\uffe2\017\uffe2\020\uffe2\026\uffe2\027" +
    "\uffe2\030\uffe2\057\uffe2\001\002\000\026\002\uffe5\005\uffe5" +
    "\007\uffe5\015\uffe5\017\uffe5\020\uffe5\026\uffe5\027\uffe5\030" +
    "\uffe5\057\uffe5\001\002\000\004\054\120\001\002\000\026" +
    "\002\uffff\005\007\007\004\015\012\017\006\020\025\026" +
    "\014\027\024\030\005\057\uffff\001\002\000\010\005\uffd2" +
    "\062\uffd2\066\uffd2\001\002\000\026\002\uffe0\005\uffe0\007" +
    "\uffe0\015\uffe0\017\uffe0\020\uffe0\026\uffe0\027\uffe0\030\uffe0" +
    "\057\uffe0\001\002\000\026\002\uffe4\005\uffe4\007\uffe4\015" +
    "\uffe4\017\uffe4\020\uffe4\026\uffe4\027\uffe4\030\uffe4\057\uffe4" +
    "\001\002\000\026\002\uffdf\005\uffdf\007\uffdf\015\uffdf\017" +
    "\uffdf\020\uffdf\026\uffdf\027\uffdf\030\uffdf\057\uffdf\001\002" +
    "\000\026\002\uffe3\005\uffe3\007\uffe3\015\uffe3\017\uffe3\020" +
    "\uffe3\026\uffe3\027\uffe3\030\uffe3\057\uffe3\001\002\000\004" +
    "\002\116\001\002\000\004\046\114\001\002\000\006\005" +
    "\007\066\110\001\002\000\010\005\uffd3\062\uffd3\066\uffd3" +
    "\001\002\000\004\054\027\001\002\000\026\002\uffe1\005" +
    "\uffe1\007\uffe1\015\uffe1\017\uffe1\020\uffe1\026\uffe1\027\uffe1" +
    "\030\uffe1\057\uffe1\001\002\000\014\004\030\005\007\032" +
    "\033\033\034\053\037\001\002\000\064\002\uffe9\005\uffe9" +
    "\007\uffe9\015\uffe9\017\uffe9\020\uffe9\026\uffe9\027\uffe9\030" +
    "\uffe9\035\uffe9\036\uffe9\037\uffe9\040\uffe9\041\uffe9\042\uffe9" +
    "\043\uffe9\044\uffe9\045\uffe9\047\uffe9\050\uffe9\051\uffe9\052" +
    "\uffe9\055\uffe9\057\uffe9\063\uffe9\001\002\000\006\052\077" +
    "\063\076\001\002\000\064\002\uffe6\005\uffe6\007\uffe6\015" +
    "\uffe6\017\uffe6\020\uffe6\026\uffe6\027\uffe6\030\uffe6\035\uffe6" +
    "\036\uffe6\037\uffe6\040\uffe6\041\uffe6\042\uffe6\043\uffe6\044" +
    "\uffe6\045\uffe6\047\uffe6\050\uffe6\051\uffe6\052\uffe6\055\uffe6" +
    "\057\uffe6\063\uffe6\001\002\000\064\002\uffe8\005\uffe8\007" +
    "\uffe8\015\uffe8\017\uffe8\020\uffe8\026\uffe8\027\uffe8\030\uffe8" +
    "\035\uffe8\036\uffe8\037\uffe8\040\uffe8\041\uffe8\042\uffe8\043" +
    "\uffe8\044\uffe8\045\uffe8\047\uffe8\050\uffe8\051\uffe8\052\uffe8" +
    "\055\uffe8\057\uffe8\063\uffe8\001\002\000\064\002\uffe7\005" +
    "\uffe7\007\uffe7\015\uffe7\017\uffe7\020\uffe7\026\uffe7\027\uffe7" +
    "\030\uffe7\035\uffe7\036\uffe7\037\uffe7\040\uffe7\041\uffe7\042" +
    "\uffe7\043\uffe7\044\uffe7\045\uffe7\047\uffe7\050\uffe7\051\uffe7" +
    "\052\uffe7\055\uffe7\057\uffe7\063\uffe7\001\002\000\064\002" +
    "\uffea\005\uffea\007\uffea\015\uffea\017\uffea\020\uffea\026\uffea" +
    "\027\uffea\030\uffea\035\uffea\036\uffea\037\uffea\040\uffea\041" +
    "\uffea\042\uffea\043\uffea\044\uffea\045\uffea\047\uffea\050\uffea" +
    "\051\uffea\052\uffea\055\uffea\057\uffea\063\uffea\001\002\000" +
    "\064\002\uffee\005\uffee\007\uffee\015\uffee\017\uffee\020\uffee" +
    "\026\uffee\027\uffee\030\uffee\035\uffee\036\uffee\037\063\040" +
    "\064\041\062\042\uffee\043\uffee\044\uffee\045\uffee\047\uffee" +
    "\050\uffee\051\uffee\052\uffee\055\uffee\057\uffee\063\uffee\001" +
    "\002\000\014\004\030\005\007\032\033\033\034\053\037" +
    "\001\002\000\056\002\ufff1\005\ufff1\007\ufff1\015\ufff1\017" +
    "\ufff1\020\ufff1\026\ufff1\027\ufff1\030\ufff1\035\057\036\060" +
    "\042\ufff1\043\ufff1\044\ufff1\045\ufff1\047\ufff1\050\ufff1\051" +
    "\ufff1\052\ufff1\055\ufff1\057\ufff1\063\ufff1\001\002\000\052" +
    "\002\ufff6\005\ufff6\007\ufff6\015\ufff6\017\ufff6\020\ufff6\026" +
    "\ufff6\027\ufff6\030\ufff6\042\055\043\054\044\052\045\053" +
    "\047\ufff6\050\ufff6\051\ufff6\052\ufff6\055\ufff6\057\ufff6\063" +
    "\ufff6\001\002\000\042\002\ufff9\005\ufff9\007\ufff9\015\ufff9" +
    "\017\ufff9\020\ufff9\026\ufff9\027\ufff9\030\ufff9\047\047\050" +
    "\050\051\ufff9\052\ufff9\055\ufff9\057\ufff9\063\ufff9\001\002" +
    "\000\036\002\ufffb\005\ufffb\007\ufffb\015\ufffb\017\ufffb\020" +
    "\ufffb\026\ufffb\027\ufffb\030\ufffb\051\ufffb\052\ufffb\055\ufffb" +
    "\057\ufffb\063\ufffb\001\002\000\036\002\ufffd\005\ufffd\007" +
    "\ufffd\015\ufffd\017\ufffd\020\ufffd\026\ufffd\027\ufffd\030\ufffd" +
    "\051\045\052\ufffd\055\ufffd\057\ufffd\063\ufffd\001\002\000" +
    "\014\004\030\005\007\032\033\033\034\053\037\001\002" +
    "\000\036\002\ufffc\005\ufffc\007\ufffc\015\ufffc\017\ufffc\020" +
    "\ufffc\026\ufffc\027\ufffc\030\ufffc\051\ufffc\052\ufffc\055\ufffc" +
    "\057\ufffc\063\ufffc\001\002\000\012\004\030\005\007\032" +
    "\033\033\034\001\002\000\012\004\030\005\007\032\033" +
    "\033\034\001\002\000\052\002\ufff7\005\ufff7\007\ufff7\015" +
    "\ufff7\017\ufff7\020\ufff7\026\ufff7\027\ufff7\030\ufff7\042\055" +
    "\043\054\044\052\045\053\047\ufff7\050\ufff7\051\ufff7\052" +
    "\ufff7\055\ufff7\057\ufff7\063\ufff7\001\002\000\012\004\030" +
    "\005\007\032\033\033\034\001\002\000\012\004\030\005" +
    "\007\032\033\033\034\001\002\000\012\004\030\005\007" +
    "\032\033\033\034\001\002\000\012\004\030\005\007\032" +
    "\033\033\034\001\002\000\056\002\ufff4\005\ufff4\007\ufff4" +
    "\015\ufff4\017\ufff4\020\ufff4\026\ufff4\027\ufff4\030\ufff4\035" +
    "\057\036\060\042\ufff4\043\ufff4\044\ufff4\045\ufff4\047\ufff4" +
    "\050\ufff4\051\ufff4\052\ufff4\055\ufff4\057\ufff4\063\ufff4\001" +
    "\002\000\012\004\030\005\007\032\033\033\034\001\002" +
    "\000\012\004\030\005\007\032\033\033\034\001\002\000" +
    "\064\002\uffef\005\uffef\007\uffef\015\uffef\017\uffef\020\uffef" +
    "\026\uffef\027\uffef\030\uffef\035\uffef\036\uffef\037\063\040" +
    "\064\041\062\042\uffef\043\uffef\044\uffef\045\uffef\047\uffef" +
    "\050\uffef\051\uffef\052\uffef\055\uffef\057\uffef\063\uffef\001" +
    "\002\000\012\004\030\005\007\032\033\033\034\001\002" +
    "\000\012\004\030\005\007\032\033\033\034\001\002\000" +
    "\012\004\030\005\007\032\033\033\034\001\002\000\064" +
    "\002\uffec\005\uffec\007\uffec\015\uffec\017\uffec\020\uffec\026" +
    "\uffec\027\uffec\030\uffec\035\uffec\036\uffec\037\uffec\040\uffec" +
    "\041\uffec\042\uffec\043\uffec\044\uffec\045\uffec\047\uffec\050" +
    "\uffec\051\uffec\052\uffec\055\uffec\057\uffec\063\uffec\001\002" +
    "\000\064\002\uffed\005\uffed\007\uffed\015\uffed\017\uffed\020" +
    "\uffed\026\uffed\027\uffed\030\uffed\035\uffed\036\uffed\037\uffed" +
    "\040\uffed\041\uffed\042\uffed\043\uffed\044\uffed\045\uffed\047" +
    "\uffed\050\uffed\051\uffed\052\uffed\055\uffed\057\uffed\063\uffed" +
    "\001\002\000\064\002\uffeb\005\uffeb\007\uffeb\015\uffeb\017" +
    "\uffeb\020\uffeb\026\uffeb\027\uffeb\030\uffeb\035\uffeb\036\uffeb" +
    "\037\uffeb\040\uffeb\041\uffeb\042\uffeb\043\uffeb\044\uffeb\045" +
    "\uffeb\047\uffeb\050\uffeb\051\uffeb\052\uffeb\055\uffeb\057\uffeb" +
    "\063\uffeb\001\002\000\064\002\ufff0\005\ufff0\007\ufff0\015" +
    "\ufff0\017\ufff0\020\ufff0\026\ufff0\027\ufff0\030\ufff0\035\ufff0" +
    "\036\ufff0\037\063\040\064\041\062\042\ufff0\043\ufff0\044" +
    "\ufff0\045\ufff0\047\ufff0\050\ufff0\051\ufff0\052\ufff0\055\ufff0" +
    "\057\ufff0\063\ufff0\001\002\000\056\002\ufff5\005\ufff5\007" +
    "\ufff5\015\ufff5\017\ufff5\020\ufff5\026\ufff5\027\ufff5\030\ufff5" +
    "\035\057\036\060\042\ufff5\043\ufff5\044\ufff5\045\ufff5\047" +
    "\ufff5\050\ufff5\051\ufff5\052\ufff5\055\ufff5\057\ufff5\063\ufff5" +
    "\001\002\000\056\002\ufff2\005\ufff2\007\ufff2\015\ufff2\017" +
    "\ufff2\020\ufff2\026\ufff2\027\ufff2\030\ufff2\035\057\036\060" +
    "\042\ufff2\043\ufff2\044\ufff2\045\ufff2\047\ufff2\050\ufff2\051" +
    "\ufff2\052\ufff2\055\ufff2\057\ufff2\063\ufff2\001\002\000\056" +
    "\002\ufff3\005\ufff3\007\ufff3\015\ufff3\017\ufff3\020\ufff3\026" +
    "\ufff3\027\ufff3\030\ufff3\035\057\036\060\042\ufff3\043\ufff3" +
    "\044\ufff3\045\ufff3\047\ufff3\050\ufff3\051\ufff3\052\ufff3\055" +
    "\ufff3\057\ufff3\063\ufff3\001\002\000\052\002\ufff8\005\ufff8" +
    "\007\ufff8\015\ufff8\017\ufff8\020\ufff8\026\ufff8\027\ufff8\030" +
    "\ufff8\042\055\043\054\044\052\045\053\047\ufff8\050\ufff8" +
    "\051\ufff8\052\ufff8\055\ufff8\057\ufff8\063\ufff8\001\002\000" +
    "\036\002\ufffa\005\ufffa\007\ufffa\015\ufffa\017\ufffa\020\ufffa" +
    "\026\ufffa\027\ufffa\030\ufffa\051\ufffa\052\ufffa\055\ufffa\057" +
    "\ufffa\063\ufffa\001\002\000\014\004\030\005\007\032\033" +
    "\033\034\053\037\001\002\000\014\004\030\005\007\032" +
    "\033\033\034\053\037\001\002\000\036\002\ufffe\005\ufffe" +
    "\007\ufffe\015\ufffe\017\ufffe\020\ufffe\026\ufffe\027\ufffe\030" +
    "\ufffe\051\045\052\ufffe\055\ufffe\057\ufffe\063\ufffe\001\002" +
    "\000\006\052\077\063\102\001\002\000\014\004\030\005" +
    "\007\032\033\033\034\053\037\001\002\000\006\052\077" +
    "\055\104\001\002\000\004\056\105\001\002\000\024\005" +
    "\007\007\004\015\012\017\006\020\025\026\014\027\024" +
    "\030\005\057\uffff\001\002\000\004\057\107\001\002\000" +
    "\026\002\uffdb\005\uffdb\007\uffdb\015\uffdb\017\uffdb\020\uffdb" +
    "\026\uffdb\027\uffdb\030\uffdb\057\uffdb\001\002\000\010\005" +
    "\uffd0\062\uffd0\066\uffd0\001\002\000\030\002\uffd9\005\uffd9" +
    "\007\uffd9\015\uffd9\017\uffd9\020\uffd9\026\uffd9\027\uffd9\030" +
    "\uffd9\046\112\057\uffd9\001\002\000\014\004\030\005\007" +
    "\032\033\033\034\053\037\001\002\000\030\002\uffd8\005" +
    "\uffd8\007\uffd8\015\uffd8\017\uffd8\020\uffd8\026\uffd8\027\uffd8" +
    "\030\uffd8\052\077\057\uffd8\001\002\000\014\004\030\005" +
    "\007\032\033\033\034\053\037\001\002\000\030\002\uffda" +
    "\005\uffda\007\uffda\015\uffda\017\uffda\020\uffda\026\uffda\027" +
    "\uffda\030\uffda\052\077\057\uffda\001\002\000\004\002\000" +
    "\001\002\000\006\002\001\057\001\001\002\000\014\004" +
    "\030\005\007\032\033\033\034\053\037\001\002\000\006" +
    "\052\077\055\122\001\002\000\004\056\123\001\002\000" +
    "\024\005\007\007\004\015\012\017\006\020\025\026\014" +
    "\027\024\030\005\057\uffff\001\002\000\004\057\125\001" +
    "\002\000\030\002\uffde\005\uffde\007\uffde\015\uffde\016\126" +
    "\017\uffde\020\uffde\026\uffde\027\uffde\030\uffde\057\uffde\001" +
    "\002\000\004\056\127\001\002\000\024\005\007\007\004" +
    "\015\012\017\006\020\025\026\014\027\024\030\005\057" +
    "\uffff\001\002\000\004\057\131\001\002\000\026\002\uffdd" +
    "\005\uffdd\007\uffdd\015\uffdd\017\uffdd\020\uffdd\026\uffdd\027" +
    "\uffdd\030\uffdd\057\uffdd\001\002\000\014\004\030\005\007" +
    "\032\033\033\034\053\037\001\002\000\006\052\077\055" +
    "\134\001\002\000\004\056\135\001\002\000\024\005\007" +
    "\007\004\015\012\017\006\020\025\026\014\027\024\030" +
    "\005\057\uffff\001\002\000\004\057\137\001\002\000\026" +
    "\002\uffdc\005\uffdc\007\uffdc\015\uffdc\017\uffdc\020\uffdc\026" +
    "\uffdc\027\uffdc\030\uffdc\057\uffdc\001\002\000\010\026\014" +
    "\027\024\030\005\001\002\000\006\062\142\066\110\001" +
    "\002\000\004\004\143\001\002\000\004\042\144\001\002" +
    "\000\010\005\uffd1\062\uffd1\066\uffd1\001\002\000\004\056" +
    "\146\001\002\000\012\026\014\027\024\030\005\057\uffd5" +
    "\001\002\000\012\026\014\027\024\030\005\057\uffd5\001" +
    "\002\000\004\057\151\001\002\000\026\002\uffd7\005\uffd7" +
    "\007\uffd7\015\uffd7\017\uffd7\020\uffd7\026\uffd7\027\uffd7\030" +
    "\uffd7\057\uffd7\001\002\000\004\057\uffd6\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\150\000\030\013\021\014\012\015\010\016\015\017" +
    "\017\021\007\022\025\023\014\024\016\030\020\031\022" +
    "\001\001\000\004\013\144\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\030\013\021\014\012\015" +
    "\010\016\015\017\017\021\007\022\025\023\014\024\016" +
    "\030\116\031\022\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\013\110\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\024\002\030\003\043\004\042\005\041\006\040\007" +
    "\037\010\035\011\034\013\031\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\020" +
    "\004\074\005\041\006\040\007\037\010\035\011\034\013" +
    "\031\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\020\004" +
    "\045\005\041\006\040\007\037\010\035\011\034\013\031" +
    "\001\001\000\002\001\001\000\014\006\073\007\037\010" +
    "\035\011\034\013\031\001\001\000\014\006\050\007\037" +
    "\010\035\011\034\013\031\001\001\000\002\001\001\000" +
    "\012\007\072\010\035\011\034\013\031\001\001\000\012" +
    "\007\071\010\035\011\034\013\031\001\001\000\012\007" +
    "\070\010\035\011\034\013\031\001\001\000\012\007\055" +
    "\010\035\011\034\013\031\001\001\000\002\001\001\000" +
    "\010\010\067\011\034\013\031\001\001\000\010\010\060" +
    "\011\034\013\031\001\001\000\002\001\001\000\006\011" +
    "\066\013\031\001\001\000\006\011\065\013\031\001\001" +
    "\000\006\011\064\013\031\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\024\002\100\003\043\004\042" +
    "\005\041\006\040\007\037\010\035\011\034\013\031\001" +
    "\001\000\022\003\077\004\042\005\041\006\040\007\037" +
    "\010\035\011\034\013\031\001\001\000\002\001\001\000" +
    "\002\001\001\000\024\002\102\003\043\004\042\005\041" +
    "\006\040\007\037\010\035\011\034\013\031\001\001\000" +
    "\002\001\001\000\002\001\001\000\030\013\021\014\012" +
    "\015\010\016\015\017\017\021\007\022\025\023\014\024" +
    "\016\030\105\031\022\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\024\002" +
    "\112\003\043\004\042\005\041\006\040\007\037\010\035" +
    "\011\034\013\031\001\001\000\002\001\001\000\024\002" +
    "\114\003\043\004\042\005\041\006\040\007\037\010\035" +
    "\011\034\013\031\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\024\002\120\003\043\004\042" +
    "\005\041\006\040\007\037\010\035\011\034\013\031\001" +
    "\001\000\002\001\001\000\002\001\001\000\030\013\021" +
    "\014\012\015\010\016\015\017\017\021\007\022\025\023" +
    "\014\024\016\030\123\031\022\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\030\013\021\014" +
    "\012\015\010\016\015\017\017\021\007\022\025\023\014" +
    "\024\016\030\127\031\022\001\001\000\002\001\001\000" +
    "\002\001\001\000\024\002\132\003\043\004\042\005\041" +
    "\006\040\007\037\010\035\011\034\013\031\001\001\000" +
    "\002\001\001\000\002\001\001\000\030\013\021\014\012" +
    "\015\010\016\015\017\017\021\007\022\025\023\014\024" +
    "\016\030\135\031\022\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\031\140\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\010\023\146\027\147\031\022\001\001\000" +
    "\010\023\146\027\151\031\022\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$AnalizadorSintacticoTiny$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$AnalizadorSintacticoTiny$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$AnalizadorSintacticoTiny$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 1;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}


  /** User initialization code. */
  public void user_init() throws java.lang.Exception
    {
 
   errores = new GestionErrores();
   AnalizadorLexicoTiny alex = (AnalizadorLexicoTiny)getScanner();
   alex.fijaGestionErrores(errores);

    }

  /** Scan to get the next Symbol. */
  public java_cup.runtime.Symbol scan()
    throws java.lang.Exception
    {
 return getScanner().next_token(); 
    }

 
   private GestionErrores errores;
   public void syntax_error(Symbol unidadLexica) {
     errores.errorSintactico((UnidadLexica)unidadLexica);
   }

}

/** Cup generated class to encapsulate user supplied action code.*/
class CUP$AnalizadorSintacticoTiny$actions {


   private ASExpresion as = new ASExpresion();

  private final AnalizadorSintacticoTiny parser;

  /** Constructor */
  CUP$AnalizadorSintacticoTiny$actions(AnalizadorSintacticoTiny parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$AnalizadorSintacticoTiny$do_action_part00000000(
    int                        CUP$AnalizadorSintacticoTiny$act_num,
    java_cup.runtime.lr_parser CUP$AnalizadorSintacticoTiny$parser,
    java.util.Stack            CUP$AnalizadorSintacticoTiny$stack,
    int                        CUP$AnalizadorSintacticoTiny$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$AnalizadorSintacticoTiny$result;

      /* select the action based on the action number */
      switch (CUP$AnalizadorSintacticoTiny$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // CUER ::= INST CUER 
            {
              Cuerpo RESULT =null;
		Instruccion inst = (Instruccion)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-1)).value;
		Cuerpo lista_inst = (Cuerpo)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.peek()).value;
		lista_inst.addInstr(inst); RESULT = lista_inst;
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("CUER",22, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // $START ::= CUER EOF 
            {
              Object RESULT =null;
		Cuerpo start_val = (Cuerpo)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-1)).value;
		RESULT = start_val;
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("$START",0, RESULT);
            }
          /* ACCEPT */
          CUP$AnalizadorSintacticoTiny$parser.done_parsing();
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // CUER ::= 
            {
              Cuerpo RESULT =null;
		RESULT= new Cuerpo();
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("CUER",22, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // Exp0 ::= Exp0 OR Exp1 
            {
              Expresion RESULT =null;
		Expresion exp1 = (Expresion)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-2)).value;
		Expresion exp2 = (Expresion)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.peek()).value;
		 RESULT = as.or(exp1, exp2); 
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("Exp0",0, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // Exp0 ::= Exp1 
            {
              Expresion RESULT =null;
		Expresion exp = (Expresion)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.peek()).value;
		 RESULT = exp; 
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("Exp0",0, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // Exp1 ::= Exp1 AND Exp2 
            {
              Expresion RESULT =null;
		Expresion exp1 = (Expresion)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-2)).value;
		Expresion exp2 = (Expresion)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.peek()).value;
		 RESULT = as.and(exp1, exp2); 
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("Exp1",1, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // Exp1 ::= Exp2 
            {
              Expresion RESULT =null;
		Expresion exp = (Expresion)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.peek()).value;
		 RESULT = exp; 
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("Exp1",1, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // Exp2 ::= NOT Exp2 
            {
              Expresion RESULT =null;
		Expresion exp2 = (Expresion)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.peek()).value;
		 RESULT = as.not(exp2); 
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("Exp2",2, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // Exp2 ::= Exp3 
            {
              Expresion RESULT =null;
		Expresion exp = (Expresion)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.peek()).value;
		 RESULT = exp; 
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("Exp2",2, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // Exp3 ::= Exp3 IGUALIGUAL Exp4 
            {
              Expresion RESULT =null;
		Expresion exp1 = (Expresion)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-2)).value;
		Expresion exp2 = (Expresion)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.peek()).value;
		 RESULT = as.equals(exp1, exp2); 
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("Exp3",3, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // Exp3 ::= Exp3 NOIGUAL Exp4 
            {
              Expresion RESULT =null;
		Expresion exp1 = (Expresion)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-2)).value;
		Expresion exp2 = (Expresion)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.peek()).value;
		 RESULT = as.nequals(exp1, exp2); 
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("Exp3",3, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // Exp3 ::= Exp4 
            {
              Expresion RESULT =null;
		Expresion exp = (Expresion)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.peek()).value;
		 RESULT = exp; 
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("Exp3",3, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // Exp4 ::= Exp4 MENOR Exp5 
            {
              Expresion RESULT =null;
		Expresion exp1 = (Expresion)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-2)).value;
		Expresion exp2 = (Expresion)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.peek()).value;
		 RESULT = as.lt(exp1, exp2); 
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("Exp4",4, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // Exp4 ::= Exp4 MAYOR Exp5 
            {
              Expresion RESULT =null;
		Expresion exp1 = (Expresion)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-2)).value;
		Expresion exp2 = (Expresion)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.peek()).value;
		 RESULT = as.gt(exp1, exp2); 
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("Exp4",4, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // Exp4 ::= Exp4 MENOROIGUAL Exp5 
            {
              Expresion RESULT =null;
		Expresion exp1 = (Expresion)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-2)).value;
		Expresion exp2 = (Expresion)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.peek()).value;
		 RESULT = as.leq(exp1, exp2); 
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("Exp4",4, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // Exp4 ::= Exp4 MAYOROIGUAL Exp5 
            {
              Expresion RESULT =null;
		Expresion exp1 = (Expresion)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-2)).value;
		Expresion exp2 = (Expresion)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.peek()).value;
		 RESULT = as.geq(exp1, exp2); 
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("Exp4",4, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // Exp4 ::= Exp5 
            {
              Expresion RESULT =null;
		Expresion exp = (Expresion)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.peek()).value;
		 RESULT = exp; 
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("Exp4",4, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // Exp5 ::= Exp5 SUM Exp6 
            {
              Expresion RESULT =null;
		Expresion exp1 = (Expresion)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-2)).value;
		Expresion exp2 = (Expresion)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.peek()).value;
		 RESULT = as.suma(exp1, exp2); 
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("Exp5",5, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // Exp5 ::= Exp5 SUB Exp6 
            {
              Expresion RESULT =null;
		Expresion exp1 = (Expresion)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-2)).value;
		Expresion exp2 = (Expresion)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.peek()).value;
		 RESULT = as.resta(exp1, exp2); 
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("Exp5",5, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // Exp5 ::= Exp6 
            {
              Expresion RESULT =null;
		Expresion exp = (Expresion)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.peek()).value;
		 RESULT = exp; 
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("Exp5",5, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // Exp6 ::= Exp6 MULT Exp7 
            {
              Expresion RESULT =null;
		Expresion exp1 = (Expresion)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-2)).value;
		Expresion exp2 = (Expresion)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.peek()).value;
		 RESULT = as.mul(exp1, exp2); 
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("Exp6",6, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // Exp6 ::= Exp6 DIV Exp7 
            {
              Expresion RESULT =null;
		Expresion exp1 = (Expresion)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-2)).value;
		Expresion exp2 = (Expresion)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.peek()).value;
		 RESULT = as.div(exp1, exp2); 
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("Exp6",6, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // Exp6 ::= Exp6 MOD Exp7 
            {
              Expresion RESULT =null;
		Expresion exp1 = (Expresion)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-2)).value;
		Expresion exp2 = (Expresion)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.peek()).value;
		 RESULT = as.mod(exp1, exp2); 
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("Exp6",6, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // Exp6 ::= Exp7 
            {
              Expresion RESULT =null;
		Expresion exp = (Expresion)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.peek()).value;
		 RESULT = exp; 
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("Exp6",6, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // Exp7 ::= NUM 
            {
              Expresion RESULT =null;
		String cadenaNum = (String)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.peek()).value;
		 RESULT = as.num(cadenaNum); 
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("Exp7",7, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // Exp7 ::= TRUE 
            {
              Expresion RESULT =null;
		 RESULT = as.bool_true(); 
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("Exp7",7, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // Exp7 ::= FALSE 
            {
              Expresion RESULT =null;
		 RESULT = as.bool_false(); 
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("Exp7",7, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // Exp7 ::= Ident 
            {
              Expresion RESULT =null;
		Id id = (Id)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.peek()).value;
		 RESULT = id; 
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("Exp7",7, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // INST ::= INST_IF 
            {
              Instruccion RESULT =null;
		Instruccion op1 = (Instruccion)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.peek()).value;
		RESULT = op1;
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("INST",10, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // INST ::= INST_IFELSE 
            {
              Instruccion RESULT =null;
		Instruccion op1 = (Instruccion)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.peek()).value;
		RESULT = op1;
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("INST",10, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // INST ::= INST_WHILE 
            {
              Instruccion RESULT =null;
		Instruccion op1 = (Instruccion)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.peek()).value;
		RESULT = op1;
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("INST",10, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // INST ::= INST_FOR 
            {
              Instruccion RESULT =null;
		Instruccion op1 = (Instruccion)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.peek()).value;
		RESULT = op1;
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("INST",10, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // INST ::= INST_ASIG 
            {
              Instruccion RESULT =null;
		Instruccion op1 = (Instruccion)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.peek()).value;
		RESULT = op1;
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("INST",10, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // INST ::= INST_DECL 
            {
              Instruccion RESULT =null;
		Instruccion op1 = (Instruccion)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.peek()).value;
		RESULT = op1;
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("INST",10, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // INST ::= INST_STRUCT 
            {
              Instruccion RESULT =null;
		Instruccion op1 = (Instruccion)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.peek()).value;
		RESULT = op1;
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("INST",10, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // INST_IF ::= IF PARAPERTURA Exp0 PARCIERRE LLAVEAPERTURA CUER LLAVECIERRE 
            {
              Instruccion RESULT =null;
		Expresion cond = (Expresion)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-4)).value;
		Cuerpo cif = (Cuerpo)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-1)).value;
		 RESULT = new InstruccionIfElse(cond, cif); 
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("INST_IF",11, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // INST_IFELSE ::= IF PARAPERTURA Exp0 PARCIERRE LLAVEAPERTURA CUER LLAVECIERRE ELSE LLAVEAPERTURA CUER LLAVECIERRE 
            {
              Instruccion RESULT =null;
		Expresion cond = (Expresion)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-8)).value;
		Cuerpo cif = (Cuerpo)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-5)).value;
		Cuerpo celse = (Cuerpo)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-1)).value;
		 RESULT = new InstruccionIfElse(cond, cif, celse); 
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("INST_IFELSE",12, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // INST_WHILE ::= WHILE PARAPERTURA Exp0 PARCIERRE LLAVEAPERTURA CUER LLAVECIERRE 
            {
              Instruccion RESULT =null;
		Expresion cond = (Expresion)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-4)).value;
		Cuerpo cwhile = (Cuerpo)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-1)).value;
		 RESULT = new InstruccionWhile(cond, cwhile); 
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("INST_WHILE",13, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // INST_FOR ::= FOR PARAPERTURA Exp0 PUNTOCOMA Exp0 PUNTOCOMA Exp0 PARCIERRE LLAVEAPERTURA CUER LLAVECIERRE 
            {
              Instruccion RESULT =null;
		Expresion id = (Expresion)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-8)).value;
		Expresion cond = (Expresion)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-6)).value;
		Expresion paso = (Expresion)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-4)).value;
		Cuerpo cfor = (Cuerpo)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-1)).value;
		 RESULT = new InstruccionFor(id, cond, paso, cfor); 
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("INST_FOR",15, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // INST_ASIG ::= Ident IGUAL Exp0 
            {
              Instruccion RESULT =null;
		Id id = (Id)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-2)).value;
		Expresion exp = (Expresion)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.peek()).value;
		 RESULT = new InstruccionAsignacion(id, exp); 
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("INST_ASIG",16, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // INST_DECL ::= Tip Ident 
            {
              Instruccion RESULT =null;
		Tipo t = (Tipo)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-1)).value;
		Id id = (Id)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.peek()).value;
		 RESULT = new InstruccionDeclaracion(t,id); 
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("INST_DECL",17, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // INST_DECL ::= Tip Ident IGUAL Exp0 
            {
              Instruccion RESULT =null;
		Tipo t = (Tipo)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-3)).value;
		Id id = (Id)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-2)).value;
		Expresion exp = (Expresion)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.peek()).value;
		 RESULT = new InstruccionDeclaracion(t,id,exp); 
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("INST_DECL",17, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // INST_STRUCT ::= STRUCT Ident LLAVEAPERTURA CAMPOS_STRUCT LLAVECIERRE 
            {
              Instruccion RESULT =null;
		Object struct = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-4)).value;
		Id nombre = (Id)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-3)).value;
		ArrayDeque<Instruccion> lista = (ArrayDeque<Instruccion>)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-1)).value;
		RESULT = new InstruccionDeclStruct(nombre, lista);
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("INST_STRUCT",18, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // CAMPOS_STRUCT ::= INST_DECL CAMPOS_STRUCT 
            {
              ArrayDeque<Instruccion> RESULT =null;
		Instruccion decl = (Instruccion)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-1)).value;
		ArrayDeque<Instruccion> lista = (ArrayDeque<Instruccion>)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.peek()).value;
		lista.add(decl); RESULT = lista;
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("CAMPOS_STRUCT",21, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // CAMPOS_STRUCT ::= 
            {
              ArrayDeque<Instruccion> RESULT =null;
		RESULT = new ArrayDeque<Instruccion>();
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("CAMPOS_STRUCT",21, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // Ident ::= IDEN 
            {
              Id RESULT =null;
		String id = (String)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.peek()).value;
		 RESULT = new Id(id); 
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("Ident",9, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // Tip ::= INTEGER 
            {
              Tipo RESULT =null;
		 RESULT = new Tipo(Tipos.INTEGER); 
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("Tip",23, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // Tip ::= BOOLEAN 
            {
              Tipo RESULT =null;
		 RESULT = new Tipo(Tipos.BOOLEAN); 
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("Tip",23, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // Tip ::= LIST MENOR Tip COMA NUM MAYOR 
            {
              Tipo RESULT =null;
		Tipo t = (Tipo)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-3)).value;
		String n = (String)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-1)).value;
		 RESULT = new TipoLista(t, n); 
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("Tip",23, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // Tip ::= Tip ASTERISCO 
            {
              Tipo RESULT =null;
		Tipo t = (Tipo)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-1)).value;
		 RESULT = new TipoPuntero(t); 
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("Tip",23, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$AnalizadorSintacticoTiny$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$AnalizadorSintacticoTiny$do_action(
    int                        CUP$AnalizadorSintacticoTiny$act_num,
    java_cup.runtime.lr_parser CUP$AnalizadorSintacticoTiny$parser,
    java.util.Stack            CUP$AnalizadorSintacticoTiny$stack,
    int                        CUP$AnalizadorSintacticoTiny$top)
    throws java.lang.Exception
    {
              return CUP$AnalizadorSintacticoTiny$do_action_part00000000(
                               CUP$AnalizadorSintacticoTiny$act_num,
                               CUP$AnalizadorSintacticoTiny$parser,
                               CUP$AnalizadorSintacticoTiny$stack,
                               CUP$AnalizadorSintacticoTiny$top);
    }
}

