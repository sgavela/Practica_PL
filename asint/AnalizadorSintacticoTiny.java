
//----------------------------------------------------
// The following code was generated by CUP v0.11b beta 20140220
// Tue Apr 20 15:10:03 CEST 2021
//----------------------------------------------------

package asint;

import java_cup.runtime.*;
import alex.AnalizadorLexicoTiny;
import alex.UnidadLexica;
import errors.GestionErrores;
import ast.*;
import ast.e.*;
import ast.i.*;
import ast.t.*;
import java.util.ArrayDeque;
import java_cup.runtime.ComplexSymbolFactory.Location;

/** CUP v0.11b beta 20140220 generated parser.
  * @version Tue Apr 20 15:10:03 CEST 2021
  */
public class AnalizadorSintacticoTiny extends java_cup.runtime.lr_parser {

  /** Default constructor. */
  public AnalizadorSintacticoTiny() {super();}

  /** Constructor which sets the default scanner. */
  public AnalizadorSintacticoTiny(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public AnalizadorSintacticoTiny(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\077\000\002\030\004\000\002\002\004\000\002\030" +
    "\002\000\002\002\005\000\002\002\003\000\002\003\005" +
    "\000\002\003\003\000\002\004\004\000\002\004\003\000" +
    "\002\005\005\000\002\005\005\000\002\005\003\000\002" +
    "\006\005\000\002\006\005\000\002\006\005\000\002\006" +
    "\005\000\002\006\003\000\002\007\005\000\002\007\005" +
    "\000\002\007\003\000\002\010\005\000\002\010\005\000" +
    "\002\010\005\000\002\010\003\000\002\011\003\000\002" +
    "\011\003\000\002\011\003\000\002\011\003\000\002\014" +
    "\003\000\002\014\003\000\002\014\003\000\002\014\003" +
    "\000\002\014\003\000\002\014\003\000\002\014\003\000" +
    "\002\014\003\000\002\014\003\000\002\015\011\000\002" +
    "\016\015\000\002\017\011\000\002\021\015\000\002\021" +
    "\015\000\002\022\005\000\002\023\004\000\002\024\006" +
    "\000\002\033\005\000\002\033\006\000\002\033\002\000" +
    "\002\034\006\000\002\034\007\000\002\034\002\000\002" +
    "\026\013\000\002\026\013\000\002\035\004\000\002\035" +
    "\002\000\002\036\005\000\002\036\002\000\002\027\006" +
    "\000\002\013\003\000\002\031\003\000\002\031\003\000" +
    "\002\031\010\000\002\031\004" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\225\000\024\002\uffff\005\010\010\011\015\014\017" +
    "\006\020\027\026\020\027\025\030\005\001\002\000\026" +
    "\002\uffdf\005\uffdf\010\uffdf\015\uffdf\017\uffdf\020\uffdf\026" +
    "\uffdf\027\uffdf\030\uffdf\057\uffdf\001\002\000\004\043\223" +
    "\001\002\000\004\054\215\001\002\000\026\002\uffde\005" +
    "\uffde\010\uffde\015\uffde\017\uffde\020\uffde\026\uffde\027\uffde" +
    "\030\uffde\057\uffde\001\002\000\072\002\uffc7\005\uffc7\010" +
    "\uffc7\015\uffc7\017\uffc7\020\uffc7\026\uffc7\027\uffc7\030\uffc7" +
    "\035\uffc7\036\uffc7\037\uffc7\040\uffc7\041\uffc7\042\uffc7\043" +
    "\uffc7\044\uffc7\045\uffc7\046\uffc7\047\uffc7\050\uffc7\051\uffc7" +
    "\052\uffc7\054\uffc7\055\uffc7\057\uffc7\062\uffc7\063\uffc7\001" +
    "\002\000\012\012\161\026\020\027\025\030\005\001\002" +
    "\000\026\002\uffe2\005\uffe2\010\uffe2\015\uffe2\017\uffe2\020" +
    "\uffe2\026\uffe2\027\uffe2\030\uffe2\057\uffe2\001\002\000\026" +
    "\002\uffe5\005\uffe5\010\uffe5\015\uffe5\017\uffe5\020\uffe5\026" +
    "\uffe5\027\uffe5\030\uffe5\057\uffe5\001\002\000\004\054\146" +
    "\001\002\000\026\002\uffdd\005\uffdd\010\uffdd\015\uffdd\017" +
    "\uffdd\020\uffdd\026\uffdd\027\uffdd\030\uffdd\057\uffdd\001\002" +
    "\000\026\002\uffff\005\010\010\011\015\014\017\006\020" +
    "\027\026\020\027\025\030\005\057\uffff\001\002\000\026" +
    "\002\uffe0\005\uffe0\010\uffe0\015\uffe0\017\uffe0\020\uffe0\026" +
    "\uffe0\027\uffe0\030\uffe0\057\uffe0\001\002\000\012\005\uffc5" +
    "\062\uffc5\066\uffc5\067\uffc5\001\002\000\026\002\uffe4\005" +
    "\uffe4\010\uffe4\015\uffe4\017\uffe4\020\uffe4\026\uffe4\027\uffe4" +
    "\030\uffe4\057\uffe4\001\002\000\026\002\uffe3\005\uffe3\010" +
    "\uffe3\015\uffe3\017\uffe3\020\uffe3\026\uffe3\027\uffe3\030\uffe3" +
    "\057\uffe3\001\002\000\004\002\144\001\002\000\006\046" +
    "\121\054\134\001\002\000\012\005\uffc6\062\uffc6\066\uffc6" +
    "\067\uffc6\001\002\000\006\005\010\066\036\001\002\000" +
    "\004\054\031\001\002\000\026\002\uffe1\005\uffe1\010\uffe1" +
    "\015\uffe1\017\uffe1\020\uffe1\026\uffe1\027\uffe1\030\uffe1\057" +
    "\uffe1\001\002\000\012\005\010\026\020\027\025\030\005" +
    "\001\002\000\004\063\123\001\002\000\004\046\121\001" +
    "\002\000\004\063\111\001\002\000\006\005\010\066\036" +
    "\001\002\000\012\005\uffc3\062\uffc3\066\uffc3\067\uffc3\001" +
    "\002\000\004\046\040\001\002\000\014\004\041\005\010" +
    "\032\044\033\045\053\050\001\002\000\066\002\uffe9\005" +
    "\uffe9\010\uffe9\015\uffe9\017\uffe9\020\uffe9\026\uffe9\027\uffe9" +
    "\030\uffe9\035\uffe9\036\uffe9\037\uffe9\040\uffe9\041\uffe9\042" +
    "\uffe9\043\uffe9\044\uffe9\045\uffe9\047\uffe9\050\uffe9\051\uffe9" +
    "\052\uffe9\055\uffe9\057\uffe9\062\uffe9\063\uffe9\001\002\000" +
    "\032\002\uffd5\005\uffd5\010\uffd5\015\uffd5\017\uffd5\020\uffd5" +
    "\026\uffd5\027\uffd5\030\uffd5\052\107\057\uffd5\063\uffd5\001" +
    "\002\000\066\002\uffe6\005\uffe6\010\uffe6\015\uffe6\017\uffe6" +
    "\020\uffe6\026\uffe6\027\uffe6\030\uffe6\035\uffe6\036\uffe6\037" +
    "\uffe6\040\uffe6\041\uffe6\042\uffe6\043\uffe6\044\uffe6\045\uffe6" +
    "\047\uffe6\050\uffe6\051\uffe6\052\uffe6\055\uffe6\057\uffe6\062" +
    "\uffe6\063\uffe6\001\002\000\066\002\uffe8\005\uffe8\010\uffe8" +
    "\015\uffe8\017\uffe8\020\uffe8\026\uffe8\027\uffe8\030\uffe8\035" +
    "\uffe8\036\uffe8\037\uffe8\040\uffe8\041\uffe8\042\uffe8\043\uffe8" +
    "\044\uffe8\045\uffe8\047\uffe8\050\uffe8\051\uffe8\052\uffe8\055" +
    "\uffe8\057\uffe8\062\uffe8\063\uffe8\001\002\000\066\002\uffe7" +
    "\005\uffe7\010\uffe7\015\uffe7\017\uffe7\020\uffe7\026\uffe7\027" +
    "\uffe7\030\uffe7\035\uffe7\036\uffe7\037\uffe7\040\uffe7\041\uffe7" +
    "\042\uffe7\043\uffe7\044\uffe7\045\uffe7\047\uffe7\050\uffe7\051" +
    "\uffe7\052\uffe7\055\uffe7\057\uffe7\062\uffe7\063\uffe7\001\002" +
    "\000\066\002\uffea\005\uffea\010\uffea\015\uffea\017\uffea\020" +
    "\uffea\026\uffea\027\uffea\030\uffea\035\uffea\036\uffea\037\uffea" +
    "\040\uffea\041\uffea\042\uffea\043\uffea\044\uffea\045\uffea\047" +
    "\uffea\050\uffea\051\uffea\052\uffea\055\uffea\057\uffea\062\uffea" +
    "\063\uffea\001\002\000\066\002\uffee\005\uffee\010\uffee\015" +
    "\uffee\017\uffee\020\uffee\026\uffee\027\uffee\030\uffee\035\uffee" +
    "\036\uffee\037\074\040\075\041\073\042\uffee\043\uffee\044" +
    "\uffee\045\uffee\047\uffee\050\uffee\051\uffee\052\uffee\055\uffee" +
    "\057\uffee\062\uffee\063\uffee\001\002\000\014\004\041\005" +
    "\010\032\044\033\045\053\050\001\002\000\060\002\ufff1" +
    "\005\ufff1\010\ufff1\015\ufff1\017\ufff1\020\ufff1\026\ufff1\027" +
    "\ufff1\030\ufff1\035\070\036\071\042\ufff1\043\ufff1\044\ufff1" +
    "\045\ufff1\047\ufff1\050\ufff1\051\ufff1\052\ufff1\055\ufff1\057" +
    "\ufff1\062\ufff1\063\ufff1\001\002\000\054\002\ufff6\005\ufff6" +
    "\010\ufff6\015\ufff6\017\ufff6\020\ufff6\026\ufff6\027\ufff6\030" +
    "\ufff6\042\066\043\065\044\063\045\064\047\ufff6\050\ufff6" +
    "\051\ufff6\052\ufff6\055\ufff6\057\ufff6\062\ufff6\063\ufff6\001" +
    "\002\000\044\002\ufff9\005\ufff9\010\ufff9\015\ufff9\017\ufff9" +
    "\020\ufff9\026\ufff9\027\ufff9\030\ufff9\047\060\050\061\051" +
    "\ufff9\052\ufff9\055\ufff9\057\ufff9\062\ufff9\063\ufff9\001\002" +
    "\000\040\002\ufffb\005\ufffb\010\ufffb\015\ufffb\017\ufffb\020" +
    "\ufffb\026\ufffb\027\ufffb\030\ufffb\051\ufffb\052\ufffb\055\ufffb" +
    "\057\ufffb\062\ufffb\063\ufffb\001\002\000\040\002\ufffd\005" +
    "\ufffd\010\ufffd\015\ufffd\017\ufffd\020\ufffd\026\ufffd\027\ufffd" +
    "\030\ufffd\051\056\052\ufffd\055\ufffd\057\ufffd\062\ufffd\063" +
    "\ufffd\001\002\000\014\004\041\005\010\032\044\033\045" +
    "\053\050\001\002\000\040\002\ufffc\005\ufffc\010\ufffc\015" +
    "\ufffc\017\ufffc\020\ufffc\026\ufffc\027\ufffc\030\ufffc\051\ufffc" +
    "\052\ufffc\055\ufffc\057\ufffc\062\ufffc\063\ufffc\001\002\000" +
    "\012\004\041\005\010\032\044\033\045\001\002\000\012" +
    "\004\041\005\010\032\044\033\045\001\002\000\054\002" +
    "\ufff7\005\ufff7\010\ufff7\015\ufff7\017\ufff7\020\ufff7\026\ufff7" +
    "\027\ufff7\030\ufff7\042\066\043\065\044\063\045\064\047" +
    "\ufff7\050\ufff7\051\ufff7\052\ufff7\055\ufff7\057\ufff7\062\ufff7" +
    "\063\ufff7\001\002\000\012\004\041\005\010\032\044\033" +
    "\045\001\002\000\012\004\041\005\010\032\044\033\045" +
    "\001\002\000\012\004\041\005\010\032\044\033\045\001" +
    "\002\000\012\004\041\005\010\032\044\033\045\001\002" +
    "\000\060\002\ufff4\005\ufff4\010\ufff4\015\ufff4\017\ufff4\020" +
    "\ufff4\026\ufff4\027\ufff4\030\ufff4\035\070\036\071\042\ufff4" +
    "\043\ufff4\044\ufff4\045\ufff4\047\ufff4\050\ufff4\051\ufff4\052" +
    "\ufff4\055\ufff4\057\ufff4\062\ufff4\063\ufff4\001\002\000\012" +
    "\004\041\005\010\032\044\033\045\001\002\000\012\004" +
    "\041\005\010\032\044\033\045\001\002\000\066\002\uffef" +
    "\005\uffef\010\uffef\015\uffef\017\uffef\020\uffef\026\uffef\027" +
    "\uffef\030\uffef\035\uffef\036\uffef\037\074\040\075\041\073" +
    "\042\uffef\043\uffef\044\uffef\045\uffef\047\uffef\050\uffef\051" +
    "\uffef\052\uffef\055\uffef\057\uffef\062\uffef\063\uffef\001\002" +
    "\000\012\004\041\005\010\032\044\033\045\001\002\000" +
    "\012\004\041\005\010\032\044\033\045\001\002\000\012" +
    "\004\041\005\010\032\044\033\045\001\002\000\066\002" +
    "\uffec\005\uffec\010\uffec\015\uffec\017\uffec\020\uffec\026\uffec" +
    "\027\uffec\030\uffec\035\uffec\036\uffec\037\uffec\040\uffec\041" +
    "\uffec\042\uffec\043\uffec\044\uffec\045\uffec\047\uffec\050\uffec" +
    "\051\uffec\052\uffec\055\uffec\057\uffec\062\uffec\063\uffec\001" +
    "\002\000\066\002\uffed\005\uffed\010\uffed\015\uffed\017\uffed" +
    "\020\uffed\026\uffed\027\uffed\030\uffed\035\uffed\036\uffed\037" +
    "\uffed\040\uffed\041\uffed\042\uffed\043\uffed\044\uffed\045\uffed" +
    "\047\uffed\050\uffed\051\uffed\052\uffed\055\uffed\057\uffed\062" +
    "\uffed\063\uffed\001\002\000\066\002\uffeb\005\uffeb\010\uffeb" +
    "\015\uffeb\017\uffeb\020\uffeb\026\uffeb\027\uffeb\030\uffeb\035" +
    "\uffeb\036\uffeb\037\uffeb\040\uffeb\041\uffeb\042\uffeb\043\uffeb" +
    "\044\uffeb\045\uffeb\047\uffeb\050\uffeb\051\uffeb\052\uffeb\055" +
    "\uffeb\057\uffeb\062\uffeb\063\uffeb\001\002\000\066\002\ufff0" +
    "\005\ufff0\010\ufff0\015\ufff0\017\ufff0\020\ufff0\026\ufff0\027" +
    "\ufff0\030\ufff0\035\ufff0\036\ufff0\037\074\040\075\041\073" +
    "\042\ufff0\043\ufff0\044\ufff0\045\ufff0\047\ufff0\050\ufff0\051" +
    "\ufff0\052\ufff0\055\ufff0\057\ufff0\062\ufff0\063\ufff0\001\002" +
    "\000\060\002\ufff5\005\ufff5\010\ufff5\015\ufff5\017\ufff5\020" +
    "\ufff5\026\ufff5\027\ufff5\030\ufff5\035\070\036\071\042\ufff5" +
    "\043\ufff5\044\ufff5\045\ufff5\047\ufff5\050\ufff5\051\ufff5\052" +
    "\ufff5\055\ufff5\057\ufff5\062\ufff5\063\ufff5\001\002\000\060" +
    "\002\ufff2\005\ufff2\010\ufff2\015\ufff2\017\ufff2\020\ufff2\026" +
    "\ufff2\027\ufff2\030\ufff2\035\070\036\071\042\ufff2\043\ufff2" +
    "\044\ufff2\045\ufff2\047\ufff2\050\ufff2\051\ufff2\052\ufff2\055" +
    "\ufff2\057\ufff2\062\ufff2\063\ufff2\001\002\000\060\002\ufff3" +
    "\005\ufff3\010\ufff3\015\ufff3\017\ufff3\020\ufff3\026\ufff3\027" +
    "\ufff3\030\ufff3\035\070\036\071\042\ufff3\043\ufff3\044\ufff3" +
    "\045\ufff3\047\ufff3\050\ufff3\051\ufff3\052\ufff3\055\ufff3\057" +
    "\ufff3\062\ufff3\063\ufff3\001\002\000\054\002\ufff8\005\ufff8" +
    "\010\ufff8\015\ufff8\017\ufff8\020\ufff8\026\ufff8\027\ufff8\030" +
    "\ufff8\042\066\043\065\044\063\045\064\047\ufff8\050\ufff8" +
    "\051\ufff8\052\ufff8\055\ufff8\057\ufff8\062\ufff8\063\ufff8\001" +
    "\002\000\040\002\ufffa\005\ufffa\010\ufffa\015\ufffa\017\ufffa" +
    "\020\ufffa\026\ufffa\027\ufffa\030\ufffa\051\ufffa\052\ufffa\055" +
    "\ufffa\057\ufffa\062\ufffa\063\ufffa\001\002\000\014\004\041" +
    "\005\010\032\044\033\045\053\050\001\002\000\040\002" +
    "\ufffe\005\ufffe\010\ufffe\015\ufffe\017\ufffe\020\ufffe\026\ufffe" +
    "\027\ufffe\030\ufffe\051\056\052\ufffe\055\ufffe\057\ufffe\062" +
    "\ufffe\063\ufffe\001\002\000\014\004\041\005\010\032\044" +
    "\033\045\053\050\001\002\000\006\052\107\063\113\001" +
    "\002\000\004\005\010\001\002\000\004\055\115\001\002" +
    "\000\004\056\116\001\002\000\024\005\010\010\011\015" +
    "\014\017\006\020\027\026\020\027\025\030\005\057\uffff" +
    "\001\002\000\004\057\120\001\002\000\026\002\uffd9\005" +
    "\uffd9\010\uffd9\015\uffd9\017\uffd9\020\uffd9\026\uffd9\027\uffd9" +
    "\030\uffd9\057\uffd9\001\002\000\014\004\041\005\010\032" +
    "\044\033\045\053\050\001\002\000\034\002\uffd7\005\uffd7" +
    "\010\uffd7\015\uffd7\017\uffd7\020\uffd7\026\uffd7\027\uffd7\030" +
    "\uffd7\052\107\055\uffd7\057\uffd7\063\uffd7\001\002\000\014" +
    "\004\041\005\010\032\044\033\045\053\050\001\002\000" +
    "\006\052\107\063\125\001\002\000\004\005\010\001\002" +
    "\000\004\055\127\001\002\000\004\056\130\001\002\000" +
    "\024\005\010\010\011\015\014\017\006\020\027\026\020" +
    "\027\025\030\005\057\uffff\001\002\000\004\057\132\001" +
    "\002\000\026\002\uffd8\005\uffd8\010\uffd8\015\uffd8\017\uffd8" +
    "\020\uffd8\026\uffd8\027\uffd8\030\uffd8\057\uffd8\001\002\000" +
    "\030\002\uffd6\005\uffd6\010\uffd6\015\uffd6\017\uffd6\020\uffd6" +
    "\026\uffd6\027\uffd6\030\uffd6\046\040\057\uffd6\001\002\000" +
    "\016\004\041\005\010\032\044\033\045\053\050\055\uffcb" +
    "\001\002\000\010\052\107\055\uffc9\062\140\001\002\000" +
    "\004\055\137\001\002\000\026\002\uffc8\005\uffc8\010\uffc8" +
    "\015\uffc8\017\uffc8\020\uffc8\026\uffc8\027\uffc8\030\uffc8\057" +
    "\uffc8\001\002\000\014\004\041\005\010\032\044\033\045" +
    "\053\050\001\002\000\004\055\uffcc\001\002\000\010\052" +
    "\107\055\uffc9\062\140\001\002\000\004\055\uffca\001\002" +
    "\000\004\002\000\001\002\000\006\002\001\057\001\001" +
    "\002\000\014\004\041\005\010\032\044\033\045\053\050" +
    "\001\002\000\006\052\107\055\150\001\002\000\004\056" +
    "\151\001\002\000\024\005\010\010\011\015\014\017\006" +
    "\020\027\026\020\027\025\030\005\057\uffff\001\002\000" +
    "\004\057\153\001\002\000\030\002\uffdc\005\uffdc\010\uffdc" +
    "\015\uffdc\016\154\017\uffdc\020\uffdc\026\uffdc\027\uffdc\030" +
    "\uffdc\057\uffdc\001\002\000\004\056\155\001\002\000\024" +
    "\005\010\010\011\015\014\017\006\020\027\026\020\027" +
    "\025\030\005\057\uffff\001\002\000\004\057\157\001\002" +
    "\000\026\002\uffdb\005\uffdb\010\uffdb\015\uffdb\017\uffdb\020" +
    "\uffdb\026\uffdb\027\uffdb\030\uffdb\057\uffdb\001\002\000\006" +
    "\005\010\066\036\001\002\000\004\005\010\001\002\000" +
    "\004\054\163\001\002\000\012\026\020\027\025\030\005" +
    "\055\uffd2\001\002\000\004\055\202\001\002\000\010\005" +
    "\010\066\036\067\166\001\002\000\004\005\010\001\002" +
    "\000\006\055\uffcf\062\170\001\002\000\010\026\020\027" +
    "\025\030\005\001\002\000\004\055\uffd4\001\002\000\010" +
    "\005\010\066\036\067\173\001\002\000\004\005\010\001" +
    "\002\000\006\055\uffcf\062\170\001\002\000\004\055\uffd1" +
    "\001\002\000\006\055\uffcf\062\170\001\002\000\004\055" +
    "\uffd0\001\002\000\006\055\uffcf\062\170\001\002\000\004" +
    "\055\uffd3\001\002\000\004\056\203\001\002\000\024\005" +
    "\010\010\011\015\014\017\006\020\027\026\020\027\025" +
    "\030\005\057\uffff\001\002\000\004\057\205\001\002\000" +
    "\026\002\uffcd\005\uffcd\010\uffcd\015\uffcd\017\uffcd\020\uffcd" +
    "\026\uffcd\027\uffcd\030\uffcd\057\uffcd\001\002\000\004\054" +
    "\207\001\002\000\012\026\020\027\025\030\005\055\uffd2" +
    "\001\002\000\004\055\211\001\002\000\004\056\212\001" +
    "\002\000\024\005\010\010\011\015\014\017\006\020\027" +
    "\026\020\027\025\030\005\057\uffff\001\002\000\004\057" +
    "\214\001\002\000\026\002\uffce\005\uffce\010\uffce\015\uffce" +
    "\017\uffce\020\uffce\026\uffce\027\uffce\030\uffce\057\uffce\001" +
    "\002\000\014\004\041\005\010\032\044\033\045\053\050" +
    "\001\002\000\006\052\107\055\217\001\002\000\004\056" +
    "\220\001\002\000\024\005\010\010\011\015\014\017\006" +
    "\020\027\026\020\027\025\030\005\057\uffff\001\002\000" +
    "\004\057\222\001\002\000\026\002\uffda\005\uffda\010\uffda" +
    "\015\uffda\017\uffda\020\uffda\026\uffda\027\uffda\030\uffda\057" +
    "\uffda\001\002\000\010\026\020\027\025\030\005\001\002" +
    "\000\006\062\225\066\036\001\002\000\004\004\226\001" +
    "\002\000\004\042\227\001\002\000\012\005\uffc4\062\uffc4" +
    "\066\uffc4\067\uffc4\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\225\000\034\013\023\014\015\015\012\016\020\017" +
    "\021\021\011\022\027\023\016\024\003\026\006\027\014" +
    "\030\022\031\025\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\031\157\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\034\013\023" +
    "\014\015\015\012\016\020\017\021\021\011\022\027\023" +
    "\016\024\003\026\006\027\014\030\144\031\025\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\013\132\001\001\000\002\001\001\000" +
    "\002\001\001\000\012\013\032\022\033\024\031\031\034" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\013\036\001\001\000\002\001\001\000\002" +
    "\001\001\000\024\002\041\003\054\004\053\005\052\006" +
    "\051\007\050\010\046\011\045\013\042\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\020\004\105\005\052\006\051\007\050\010\046\011" +
    "\045\013\042\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\020\004\056\005\052\006\051\007\050\010\046\011\045" +
    "\013\042\001\001\000\002\001\001\000\014\006\104\007" +
    "\050\010\046\011\045\013\042\001\001\000\014\006\061" +
    "\007\050\010\046\011\045\013\042\001\001\000\002\001" +
    "\001\000\012\007\103\010\046\011\045\013\042\001\001" +
    "\000\012\007\102\010\046\011\045\013\042\001\001\000" +
    "\012\007\101\010\046\011\045\013\042\001\001\000\012" +
    "\007\066\010\046\011\045\013\042\001\001\000\002\001" +
    "\001\000\010\010\100\011\045\013\042\001\001\000\010" +
    "\010\071\011\045\013\042\001\001\000\002\001\001\000" +
    "\006\011\077\013\042\001\001\000\006\011\076\013\042" +
    "\001\001\000\006\011\075\013\042\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\022\003\107\004\053" +
    "\005\052\006\051\007\050\010\046\011\045\013\042\001" +
    "\001\000\002\001\001\000\024\002\111\003\054\004\053" +
    "\005\052\006\051\007\050\010\046\011\045\013\042\001" +
    "\001\000\002\001\001\000\006\013\032\022\113\001\001" +
    "\000\002\001\001\000\002\001\001\000\034\013\023\014" +
    "\015\015\012\016\020\017\021\021\011\022\027\023\016" +
    "\024\003\026\006\027\014\030\116\031\025\001\001\000" +
    "\002\001\001\000\002\001\001\000\024\002\121\003\054" +
    "\004\053\005\052\006\051\007\050\010\046\011\045\013" +
    "\042\001\001\000\002\001\001\000\024\002\123\003\054" +
    "\004\053\005\052\006\051\007\050\010\046\011\045\013" +
    "\042\001\001\000\002\001\001\000\006\013\032\022\125" +
    "\001\001\000\002\001\001\000\002\001\001\000\034\013" +
    "\023\014\015\015\012\016\020\017\021\021\011\022\027" +
    "\023\016\024\003\026\006\027\014\030\130\031\025\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\026\002\134\003\054\004\053\005\052\006\051\007" +
    "\050\010\046\011\045\013\042\035\135\001\001\000\004" +
    "\036\140\001\001\000\002\001\001\000\002\001\001\000" +
    "\024\002\141\003\054\004\053\005\052\006\051\007\050" +
    "\010\046\011\045\013\042\001\001\000\002\001\001\000" +
    "\004\036\142\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\024\002\146\003\054\004\053\005" +
    "\052\006\051\007\050\010\046\011\045\013\042\001\001" +
    "\000\002\001\001\000\002\001\001\000\034\013\023\014" +
    "\015\015\012\016\020\017\021\021\011\022\027\023\016" +
    "\024\003\026\006\027\014\030\151\031\025\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\034" +
    "\013\023\014\015\015\012\016\020\017\021\021\011\022" +
    "\027\023\016\024\003\026\006\027\014\030\155\031\025" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\013" +
    "\205\001\001\000\004\013\161\001\001\000\002\001\001" +
    "\000\006\031\164\033\163\001\001\000\002\001\001\000" +
    "\004\013\166\001\001\000\004\013\177\001\001\000\004" +
    "\034\170\001\001\000\004\031\171\001\001\000\002\001" +
    "\001\000\004\013\173\001\001\000\004\013\175\001\001" +
    "\000\004\034\174\001\001\000\002\001\001\000\004\034" +
    "\176\001\001\000\002\001\001\000\004\034\200\001\001" +
    "\000\002\001\001\000\002\001\001\000\034\013\023\014" +
    "\015\015\012\016\020\017\021\021\011\022\027\023\016" +
    "\024\003\026\006\027\014\030\203\031\025\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\006" +
    "\031\164\033\207\001\001\000\002\001\001\000\002\001" +
    "\001\000\034\013\023\014\015\015\012\016\020\017\021" +
    "\021\011\022\027\023\016\024\003\026\006\027\014\030" +
    "\212\031\025\001\001\000\002\001\001\000\002\001\001" +
    "\000\024\002\215\003\054\004\053\005\052\006\051\007" +
    "\050\010\046\011\045\013\042\001\001\000\002\001\001" +
    "\000\002\001\001\000\034\013\023\014\015\015\012\016" +
    "\020\017\021\021\011\022\027\023\016\024\003\026\006" +
    "\027\014\030\220\031\025\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\031\223\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$AnalizadorSintacticoTiny$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$AnalizadorSintacticoTiny$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$AnalizadorSintacticoTiny$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 1;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}


  /** User initialization code. */
  public void user_init() throws java.lang.Exception
    {
 
   errores = new GestionErrores();
   AnalizadorLexicoTiny alex = (AnalizadorLexicoTiny)getScanner();
   alex.fijaGestionErrores(errores);

    }

  /** Scan to get the next Symbol. */
  public java_cup.runtime.Symbol scan()
    throws java.lang.Exception
    {
 return getScanner().next_token(); 
    }

 
   private GestionErrores errores;
   public void syntax_error(Symbol unidadLexica) {
     errores.errorSintactico((UnidadLexica)unidadLexica);
   }

}

/** Cup generated class to encapsulate user supplied action code.*/
class CUP$AnalizadorSintacticoTiny$actions {


   private ASExpresion as = new ASExpresion();

  private final AnalizadorSintacticoTiny parser;

  /** Constructor */
  CUP$AnalizadorSintacticoTiny$actions(AnalizadorSintacticoTiny parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$AnalizadorSintacticoTiny$do_action_part00000000(
    int                        CUP$AnalizadorSintacticoTiny$act_num,
    java_cup.runtime.lr_parser CUP$AnalizadorSintacticoTiny$parser,
    java.util.Stack            CUP$AnalizadorSintacticoTiny$stack,
    int                        CUP$AnalizadorSintacticoTiny$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$AnalizadorSintacticoTiny$result;

      /* select the action based on the action number */
      switch (CUP$AnalizadorSintacticoTiny$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // CUER ::= INST CUER 
            {
              Cuerpo RESULT =null;
		Instruccion inst = (Instruccion)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-1)).value;
		Cuerpo lista_inst = (Cuerpo)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.peek()).value;
		lista_inst.addInstr(inst); RESULT = lista_inst;
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("CUER",22, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // $START ::= CUER EOF 
            {
              Object RESULT =null;
		Cuerpo start_val = (Cuerpo)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-1)).value;
		RESULT = start_val;
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("$START",0, RESULT);
            }
          /* ACCEPT */
          CUP$AnalizadorSintacticoTiny$parser.done_parsing();
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // CUER ::= 
            {
              Cuerpo RESULT =null;
		RESULT= new Cuerpo();
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("CUER",22, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // Exp0 ::= Exp0 OR Exp1 
            {
              Expresion RESULT =null;
		Expresion exp1 = (Expresion)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-2)).value;
		Expresion exp2 = (Expresion)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.peek()).value;
		 RESULT = as.or(exp1, exp2); 
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("Exp0",0, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // Exp0 ::= Exp1 
            {
              Expresion RESULT =null;
		Expresion exp = (Expresion)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.peek()).value;
		 RESULT = exp; 
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("Exp0",0, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // Exp1 ::= Exp1 AND Exp2 
            {
              Expresion RESULT =null;
		Expresion exp1 = (Expresion)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-2)).value;
		Expresion exp2 = (Expresion)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.peek()).value;
		 RESULT = as.and(exp1, exp2); 
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("Exp1",1, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // Exp1 ::= Exp2 
            {
              Expresion RESULT =null;
		Expresion exp = (Expresion)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.peek()).value;
		 RESULT = exp; 
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("Exp1",1, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // Exp2 ::= NOT Exp2 
            {
              Expresion RESULT =null;
		Expresion exp2 = (Expresion)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.peek()).value;
		 RESULT = as.not(exp2); 
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("Exp2",2, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // Exp2 ::= Exp3 
            {
              Expresion RESULT =null;
		Expresion exp = (Expresion)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.peek()).value;
		 RESULT = exp; 
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("Exp2",2, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // Exp3 ::= Exp3 IGUALIGUAL Exp4 
            {
              Expresion RESULT =null;
		Expresion exp1 = (Expresion)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-2)).value;
		Expresion exp2 = (Expresion)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.peek()).value;
		 RESULT = as.equals(exp1, exp2); 
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("Exp3",3, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // Exp3 ::= Exp3 NOIGUAL Exp4 
            {
              Expresion RESULT =null;
		Expresion exp1 = (Expresion)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-2)).value;
		Expresion exp2 = (Expresion)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.peek()).value;
		 RESULT = as.nequals(exp1, exp2); 
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("Exp3",3, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // Exp3 ::= Exp4 
            {
              Expresion RESULT =null;
		Expresion exp = (Expresion)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.peek()).value;
		 RESULT = exp; 
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("Exp3",3, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // Exp4 ::= Exp4 MENOR Exp5 
            {
              Expresion RESULT =null;
		Expresion exp1 = (Expresion)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-2)).value;
		Expresion exp2 = (Expresion)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.peek()).value;
		 RESULT = as.lt(exp1, exp2); 
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("Exp4",4, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // Exp4 ::= Exp4 MAYOR Exp5 
            {
              Expresion RESULT =null;
		Expresion exp1 = (Expresion)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-2)).value;
		Expresion exp2 = (Expresion)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.peek()).value;
		 RESULT = as.gt(exp1, exp2); 
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("Exp4",4, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // Exp4 ::= Exp4 MENOROIGUAL Exp5 
            {
              Expresion RESULT =null;
		Expresion exp1 = (Expresion)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-2)).value;
		Expresion exp2 = (Expresion)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.peek()).value;
		 RESULT = as.leq(exp1, exp2); 
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("Exp4",4, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // Exp4 ::= Exp4 MAYOROIGUAL Exp5 
            {
              Expresion RESULT =null;
		Expresion exp1 = (Expresion)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-2)).value;
		Expresion exp2 = (Expresion)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.peek()).value;
		 RESULT = as.geq(exp1, exp2); 
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("Exp4",4, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // Exp4 ::= Exp5 
            {
              Expresion RESULT =null;
		Expresion exp = (Expresion)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.peek()).value;
		 RESULT = exp; 
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("Exp4",4, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // Exp5 ::= Exp5 SUM Exp6 
            {
              Expresion RESULT =null;
		Expresion exp1 = (Expresion)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-2)).value;
		Expresion exp2 = (Expresion)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.peek()).value;
		 RESULT = as.suma(exp1, exp2); 
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("Exp5",5, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // Exp5 ::= Exp5 SUB Exp6 
            {
              Expresion RESULT =null;
		Expresion exp1 = (Expresion)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-2)).value;
		Expresion exp2 = (Expresion)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.peek()).value;
		 RESULT = as.resta(exp1, exp2); 
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("Exp5",5, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // Exp5 ::= Exp6 
            {
              Expresion RESULT =null;
		Expresion exp = (Expresion)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.peek()).value;
		 RESULT = exp; 
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("Exp5",5, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // Exp6 ::= Exp6 MULT Exp7 
            {
              Expresion RESULT =null;
		Expresion exp1 = (Expresion)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-2)).value;
		Expresion exp2 = (Expresion)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.peek()).value;
		 RESULT = as.mul(exp1, exp2); 
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("Exp6",6, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // Exp6 ::= Exp6 DIV Exp7 
            {
              Expresion RESULT =null;
		Expresion exp1 = (Expresion)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-2)).value;
		Expresion exp2 = (Expresion)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.peek()).value;
		 RESULT = as.div(exp1, exp2); 
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("Exp6",6, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // Exp6 ::= Exp6 MOD Exp7 
            {
              Expresion RESULT =null;
		Expresion exp1 = (Expresion)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-2)).value;
		Expresion exp2 = (Expresion)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.peek()).value;
		 RESULT = as.mod(exp1, exp2); 
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("Exp6",6, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // Exp6 ::= Exp7 
            {
              Expresion RESULT =null;
		Expresion exp = (Expresion)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.peek()).value;
		 RESULT = exp; 
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("Exp6",6, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // Exp7 ::= NUM 
            {
              Expresion RESULT =null;
		String cadenaNum = (String)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.peek()).value;
		 RESULT = as.num(cadenaNum); 
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("Exp7",7, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // Exp7 ::= TRUE 
            {
              Expresion RESULT =null;
		 RESULT = as.bool_true(); 
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("Exp7",7, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // Exp7 ::= FALSE 
            {
              Expresion RESULT =null;
		 RESULT = as.bool_false(); 
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("Exp7",7, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // Exp7 ::= Ident 
            {
              Expresion RESULT =null;
		Id id = (Id)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.peek()).value;
		 RESULT = id; 
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("Exp7",7, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // INST ::= INST_IF 
            {
              Instruccion RESULT =null;
		InstruccionIfElse op1 = (InstruccionIfElse)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.peek()).value;
		RESULT = op1;
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("INST",10, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // INST ::= INST_IFELSE 
            {
              Instruccion RESULT =null;
		InstruccionIfElse op1 = (InstruccionIfElse)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.peek()).value;
		RESULT = op1;
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("INST",10, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // INST ::= INST_WHILE 
            {
              Instruccion RESULT =null;
		InstruccionWhile op1 = (InstruccionWhile)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.peek()).value;
		RESULT = op1;
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("INST",10, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // INST ::= INST_FOR 
            {
              Instruccion RESULT =null;
		InstruccionFor op1 = (InstruccionFor)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.peek()).value;
		RESULT = op1;
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("INST",10, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // INST ::= INST_ASIG 
            {
              Instruccion RESULT =null;
		InstruccionAsignacion op1 = (InstruccionAsignacion)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.peek()).value;
		RESULT = op1;
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("INST",10, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // INST ::= INST_DECL 
            {
              Instruccion RESULT =null;
		InstruccionDeclaracion op1 = (InstruccionDeclaracion)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.peek()).value;
		RESULT = op1;
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("INST",10, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // INST ::= INST_DECLASIG 
            {
              Instruccion RESULT =null;
		InstruccionDeclaracion op1 = (InstruccionDeclaracion)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.peek()).value;
		RESULT = op1;
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("INST",10, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // INST ::= INST_DECL_FUN 
            {
              Instruccion RESULT =null;
		InstruccionDeclFuncion op1 = (InstruccionDeclFuncion)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.peek()).value;
		RESULT = op1;
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("INST",10, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // INST ::= INST_CALL_PROC 
            {
              Instruccion RESULT =null;
		InstruccionLlamadaFuncion op1 = (InstruccionLlamadaFuncion)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.peek()).value;
		RESULT = op1;
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("INST",10, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // INST_IF ::= IF PARAPERTURA Exp0 PARCIERRE LLAVEAPERTURA CUER LLAVECIERRE 
            {
              InstruccionIfElse RESULT =null;
		Expresion cond = (Expresion)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-4)).value;
		Cuerpo cif = (Cuerpo)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-1)).value;
		 RESULT = new InstruccionIfElse(cond, cif); 
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("INST_IF",11, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // INST_IFELSE ::= IF PARAPERTURA Exp0 PARCIERRE LLAVEAPERTURA CUER LLAVECIERRE ELSE LLAVEAPERTURA CUER LLAVECIERRE 
            {
              InstruccionIfElse RESULT =null;
		Expresion cond = (Expresion)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-8)).value;
		Cuerpo cif = (Cuerpo)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-5)).value;
		Cuerpo celse = (Cuerpo)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-1)).value;
		 RESULT = new InstruccionIfElse(cond, cif, celse); 
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("INST_IFELSE",12, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // INST_WHILE ::= WHILE PARAPERTURA Exp0 PARCIERRE LLAVEAPERTURA CUER LLAVECIERRE 
            {
              InstruccionWhile RESULT =null;
		Expresion cond = (Expresion)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-4)).value;
		Cuerpo cwhile = (Cuerpo)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-1)).value;
		 RESULT = new InstruccionWhile(cond, cwhile); 
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("INST_WHILE",13, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // INST_FOR ::= FOR PARAPERTURA INST_ASIG PUNTOCOMA Exp0 PUNTOCOMA INST_ASIG PARCIERRE LLAVEAPERTURA CUER LLAVECIERRE 
            {
              InstruccionFor RESULT =null;
		InstruccionAsignacion ini = (InstruccionAsignacion)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-8)).value;
		Expresion cond = (Expresion)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-6)).value;
		InstruccionAsignacion paso = (InstruccionAsignacion)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-4)).value;
		Cuerpo cfor = (Cuerpo)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-1)).value;
		 RESULT = new InstruccionFor(ini.getId(), ini.getValor(), cond, paso.getValor(), cfor); 
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("INST_FOR",15, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // INST_FOR ::= FOR PARAPERTURA INST_DECLASIG PUNTOCOMA Exp0 PUNTOCOMA INST_ASIG PARCIERRE LLAVEAPERTURA CUER LLAVECIERRE 
            {
              InstruccionFor RESULT =null;
		InstruccionDeclaracion ini = (InstruccionDeclaracion)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-8)).value;
		Expresion cond = (Expresion)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-6)).value;
		InstruccionAsignacion paso = (InstruccionAsignacion)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-4)).value;
		Cuerpo cfor = (Cuerpo)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-1)).value;
		 RESULT = new InstruccionFor(ini.getId(), ini.getValor(), cond, paso.getValor(), cfor); 
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("INST_FOR",15, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // INST_ASIG ::= Ident IGUAL Exp0 
            {
              InstruccionAsignacion RESULT =null;
		Id id = (Id)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-2)).value;
		Expresion exp = (Expresion)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.peek()).value;
		 RESULT = new InstruccionAsignacion(id, exp); 
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("INST_ASIG",16, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // INST_DECL ::= Tip Ident 
            {
              InstruccionDeclaracion RESULT =null;
		Tipo t = (Tipo)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-1)).value;
		Id id = (Id)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.peek()).value;
		 RESULT = new InstruccionDeclaracion(t,id); 
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("INST_DECL",17, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // INST_DECLASIG ::= Tip Ident IGUAL Exp0 
            {
              InstruccionDeclaracion RESULT =null;
		Tipo t = (Tipo)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-3)).value;
		Id id = (Id)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-2)).value;
		Expresion exp = (Expresion)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.peek()).value;
		 RESULT = new InstruccionDeclaracion(t,id,exp); 
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("INST_DECLASIG",18, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // ARGUMENTOS_INI ::= Tip Ident ARGUMENTOS 
            {
              ArrayDeque<Tipo_Id> RESULT =null;
		Tipo t = (Tipo)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-2)).value;
		Id id = (Id)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-1)).value;
		ArrayDeque<Tipo_Id> arg = (ArrayDeque<Tipo_Id>)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.peek()).value;
		 arg.addFirst(new Tipo_Id(t, id)); RESULT = arg; 
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("ARGUMENTOS_INI",25, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // ARGUMENTOS_INI ::= Tip AMPERSAND Ident ARGUMENTOS 
            {
              ArrayDeque<Tipo_Id> RESULT =null;
		Tipo t = (Tipo)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-3)).value;
		Id id = (Id)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-1)).value;
		ArrayDeque<Tipo_Id> arg = (ArrayDeque<Tipo_Id>)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.peek()).value;
		 arg.addFirst(new Tipo_Id(t, id)); RESULT = arg; 
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("ARGUMENTOS_INI",25, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // ARGUMENTOS_INI ::= 
            {
              ArrayDeque<Tipo_Id> RESULT =null;
		 RESULT = new ArrayDeque<Tipo_Id>(); 
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("ARGUMENTOS_INI",25, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // ARGUMENTOS ::= COMA Tip Ident ARGUMENTOS 
            {
              ArrayDeque<Tipo_Id> RESULT =null;
		Tipo t = (Tipo)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-2)).value;
		Id id = (Id)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-1)).value;
		ArrayDeque<Tipo_Id> arg = (ArrayDeque<Tipo_Id>)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.peek()).value;
		 arg.addFirst(new Tipo_Id(t, id)); RESULT = arg; 
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("ARGUMENTOS",26, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // ARGUMENTOS ::= COMA Tip AMPERSAND Ident ARGUMENTOS 
            {
              ArrayDeque<Tipo_Id> RESULT =null;
		Tipo t = (Tipo)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-3)).value;
		Id id = (Id)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-1)).value;
		ArrayDeque<Tipo_Id> arg = (ArrayDeque<Tipo_Id>)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.peek()).value;
		 arg.addFirst(new Tipo_Id(t, id)); RESULT = arg; 
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("ARGUMENTOS",26, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // ARGUMENTOS ::= 
            {
              ArrayDeque<Tipo_Id> RESULT =null;
		 RESULT = new ArrayDeque<Tipo_Id>(); 
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("ARGUMENTOS",26, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // INST_DECL_FUN ::= FUNCTION Tip Ident PARAPERTURA ARGUMENTOS_INI PARCIERRE LLAVEAPERTURA CUER LLAVECIERRE 
            {
              InstruccionDeclFuncion RESULT =null;
		Tipo tipo_dev = (Tipo)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-7)).value;
		Id id = (Id)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-6)).value;
		ArrayDeque<Tipo_Id> arg = (ArrayDeque<Tipo_Id>)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-4)).value;
		Cuerpo c = (Cuerpo)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-1)).value;
		 RESULT = new InstruccionDeclFuncion(tipo_dev, id, arg, c); 
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("INST_DECL_FUN",20, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // INST_DECL_FUN ::= FUNCTION VOID Ident PARAPERTURA ARGUMENTOS_INI PARCIERRE LLAVEAPERTURA CUER LLAVECIERRE 
            {
              InstruccionDeclFuncion RESULT =null;
		Id id = (Id)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-6)).value;
		ArrayDeque<Tipo_Id> arg = (ArrayDeque<Tipo_Id>)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-4)).value;
		Cuerpo c = (Cuerpo)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-1)).value;
		 RESULT = new InstruccionDeclFuncion(null, id, arg, c); 
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("INST_DECL_FUN",20, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // ARGUMENTOSPROC_INI ::= Exp0 ARGUMENTOSPROC 
            {
              ArrayDeque<Expresion> RESULT =null;
		Expresion e = (Expresion)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-1)).value;
		ArrayDeque<Expresion> arg = (ArrayDeque<Expresion>)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.peek()).value;
		 arg.addFirst(e); RESULT = arg; 
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("ARGUMENTOSPROC_INI",27, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // ARGUMENTOSPROC_INI ::= 
            {
              ArrayDeque<Expresion> RESULT =null;
		 RESULT = new ArrayDeque<Expresion>(); 
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("ARGUMENTOSPROC_INI",27, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // ARGUMENTOSPROC ::= COMA Exp0 ARGUMENTOSPROC 
            {
              ArrayDeque<Expresion> RESULT =null;
		Expresion e = (Expresion)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-1)).value;
		ArrayDeque<Expresion> arg = (ArrayDeque<Expresion>)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.peek()).value;
		 arg.addFirst(e); RESULT = arg; 
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("ARGUMENTOSPROC",28, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // ARGUMENTOSPROC ::= 
            {
              ArrayDeque<Expresion> RESULT =null;
		 RESULT = new ArrayDeque<Expresion>(); 
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("ARGUMENTOSPROC",28, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // INST_CALL_PROC ::= Ident PARAPERTURA ARGUMENTOSPROC_INI PARCIERRE 
            {
              InstruccionLlamadaFuncion RESULT =null;
		Id id = (Id)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-3)).value;
		ArrayDeque<Expresion> arg = (ArrayDeque<Expresion>)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-1)).value;
		 RESULT = new InstruccionLlamadaFuncion(id, arg); 
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("INST_CALL_PROC",21, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // Ident ::= IDEN 
            {
              Id RESULT =null;
		String id = (String)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.peek()).value;
		 RESULT = new Id(id); 
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("Ident",9, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // Tip ::= INTEGER 
            {
              Tipo RESULT =null;
		 RESULT = new Tipo(Tipos.INTEGER); 
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("Tip",23, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // Tip ::= BOOLEAN 
            {
              Tipo RESULT =null;
		 RESULT = new Tipo(Tipos.BOOLEAN); 
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("Tip",23, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // Tip ::= LIST MENOR Tip COMA NUM MAYOR 
            {
              Tipo RESULT =null;
		Tipo t = (Tipo)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-3)).value;
		String n = (String)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-1)).value;
		 RESULT = new TipoLista(t, n); 
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("Tip",23, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // Tip ::= Tip ASTERISCO 
            {
              Tipo RESULT =null;
		Tipo t = (Tipo)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-1)).value;
		 RESULT = new TipoPuntero(t); 
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("Tip",23, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$AnalizadorSintacticoTiny$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$AnalizadorSintacticoTiny$do_action(
    int                        CUP$AnalizadorSintacticoTiny$act_num,
    java_cup.runtime.lr_parser CUP$AnalizadorSintacticoTiny$parser,
    java.util.Stack            CUP$AnalizadorSintacticoTiny$stack,
    int                        CUP$AnalizadorSintacticoTiny$top)
    throws java.lang.Exception
    {
              return CUP$AnalizadorSintacticoTiny$do_action_part00000000(
                               CUP$AnalizadorSintacticoTiny$act_num,
                               CUP$AnalizadorSintacticoTiny$parser,
                               CUP$AnalizadorSintacticoTiny$stack,
                               CUP$AnalizadorSintacticoTiny$top);
    }
}

