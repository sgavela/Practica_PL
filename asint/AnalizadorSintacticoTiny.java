
//----------------------------------------------------
// The following code was generated by CUP v0.11b beta 20140220
// Wed Apr 21 00:27:26 CEST 2021
//----------------------------------------------------

package asint;

import java_cup.runtime.*;
import alex.AnalizadorLexicoTiny;
import alex.UnidadLexica;
import errors.GestionErrores;
import ast.*;
import ast.e.*;
import ast.i.*;
import ast.t.*;
import java.util.ArrayDeque;
import java_cup.runtime.ComplexSymbolFactory.Location;

/** CUP v0.11b beta 20140220 generated parser.
  * @version Wed Apr 21 00:27:26 CEST 2021
  */
public class AnalizadorSintacticoTiny extends java_cup.runtime.lr_parser {

  /** Default constructor. */
  public AnalizadorSintacticoTiny() {super();}

  /** Constructor which sets the default scanner. */
  public AnalizadorSintacticoTiny(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public AnalizadorSintacticoTiny(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\117\000\002\002\007\000\002\002\004\000\002\003" +
    "\005\000\002\003\005\000\002\003\005\000\002\003\005" +
    "\000\002\003\002\000\002\004\005\000\002\004\005\000" +
    "\002\004\005\000\002\004\005\000\002\004\004\000\002" +
    "\004\004\000\002\004\004\000\002\004\004\000\002\004" +
    "\002\000\002\006\005\000\002\006\003\000\002\007\005" +
    "\000\002\007\003\000\002\010\004\000\002\010\003\000" +
    "\002\011\005\000\002\011\005\000\002\011\003\000\002" +
    "\012\005\000\002\012\005\000\002\012\005\000\002\012" +
    "\005\000\002\012\003\000\002\013\005\000\002\013\005" +
    "\000\002\013\003\000\002\014\005\000\002\014\005\000" +
    "\002\014\005\000\002\014\003\000\002\015\003\000\002" +
    "\015\003\000\002\015\003\000\002\015\003\000\002\015" +
    "\003\000\002\005\005\000\002\005\005\000\002\005\005" +
    "\000\002\005\005\000\002\005\004\000\002\005\004\000" +
    "\002\005\004\000\002\005\004\000\002\005\002\000\002" +
    "\021\011\000\002\022\015\000\002\023\011\000\002\025" +
    "\015\000\002\025\015\000\002\026\005\000\002\027\004" +
    "\000\002\030\006\000\002\037\005\000\002\037\006\000" +
    "\002\037\002\000\002\040\006\000\002\040\007\000\002" +
    "\040\002\000\002\032\015\000\002\032\013\000\002\041" +
    "\004\000\002\041\002\000\002\042\005\000\002\042\002" +
    "\000\002\034\004\000\002\033\006\000\002\017\003\000" +
    "\002\035\006\000\002\036\003\000\002\036\003\000\002" +
    "\036\010\000\002\036\004" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\313\000\016\005\010\010\016\014\ufffb\026\007\027" +
    "\005\030\011\001\002\000\004\063\314\001\002\000\012" +
    "\005\uffb6\062\uffb6\066\uffb6\067\uffb6\001\002\000\004\046" +
    "\177\001\002\000\012\005\uffb5\062\uffb5\066\uffb5\067\uffb5" +
    "\001\002\000\046\035\uffb8\036\uffb8\037\uffb8\040\uffb8\041" +
    "\uffb8\042\uffb8\043\uffb8\044\uffb8\045\uffb8\046\uffb8\047\uffb8" +
    "\050\uffb8\051\uffb8\052\uffb8\054\uffb8\055\uffb8\062\uffb8\063" +
    "\uffb8\001\002\000\004\043\307\001\002\000\004\002\306" +
    "\001\002\000\004\014\256\001\002\000\004\063\254\001" +
    "\002\000\004\063\252\001\002\000\012\012\110\026\007" +
    "\027\005\030\011\001\002\000\006\005\010\066\023\001" +
    "\002\000\004\063\021\001\002\000\016\005\010\010\016" +
    "\014\ufffb\026\007\027\005\030\011\001\002\000\004\014" +
    "\uffff\001\002\000\012\005\uffb3\062\uffb3\066\uffb3\067\uffb3" +
    "\001\002\000\006\046\025\063\uffc8\001\002\000\014\004" +
    "\026\005\010\032\031\033\033\053\036\001\002\000\042" +
    "\035\uffdc\036\uffdc\037\uffdc\040\uffdc\041\uffdc\042\uffdc\043" +
    "\uffdc\044\uffdc\045\uffdc\047\uffdc\050\uffdc\051\uffdc\052\uffdc" +
    "\055\uffdc\062\uffdc\063\uffdc\001\002\000\006\052\103\063" +
    "\uffc7\001\002\000\044\035\uffd9\036\uffd9\037\uffd9\040\uffd9" +
    "\041\uffd9\042\uffd9\043\uffd9\044\uffd9\045\uffd9\047\uffd9\050" +
    "\uffd9\051\uffd9\052\uffd9\054\075\055\uffd9\062\uffd9\063\uffd9" +
    "\001\002\000\042\035\uffdb\036\uffdb\037\uffdb\040\uffdb\041" +
    "\uffdb\042\uffdb\043\uffdb\044\uffdb\045\uffdb\047\uffdb\050\uffdb" +
    "\051\uffdb\052\uffdb\055\uffdb\062\uffdb\063\uffdb\001\002\000" +
    "\042\035\uffd8\036\uffd8\037\uffd8\040\uffd8\041\uffd8\042\uffd8" +
    "\043\uffd8\044\uffd8\045\uffd8\047\uffd8\050\uffd8\051\uffd8\052" +
    "\uffd8\055\uffd8\062\uffd8\063\uffd8\001\002\000\042\035\uffda" +
    "\036\uffda\037\uffda\040\uffda\041\uffda\042\uffda\043\uffda\044" +
    "\uffda\045\uffda\047\uffda\050\uffda\051\uffda\052\uffda\055\uffda" +
    "\062\uffda\063\uffda\001\002\000\042\035\uffdd\036\uffdd\037" +
    "\uffdd\040\uffdd\041\uffdd\042\uffdd\043\uffdd\044\uffdd\045\uffdd" +
    "\047\uffdd\050\uffdd\051\uffdd\052\uffdd\055\uffdd\062\uffdd\063" +
    "\uffdd\001\002\000\042\035\uffe1\036\uffe1\037\062\040\063" +
    "\041\061\042\uffe1\043\uffe1\044\uffe1\045\uffe1\047\uffe1\050" +
    "\uffe1\051\uffe1\052\uffe1\055\uffe1\062\uffe1\063\uffe1\001\002" +
    "\000\014\004\026\005\010\032\031\033\033\053\036\001" +
    "\002\000\034\035\056\036\057\042\uffe4\043\uffe4\044\uffe4" +
    "\045\uffe4\047\uffe4\050\uffe4\051\uffe4\052\uffe4\055\uffe4\062" +
    "\uffe4\063\uffe4\001\002\000\030\042\054\043\053\044\052" +
    "\045\051\047\uffe9\050\uffe9\051\uffe9\052\uffe9\055\uffe9\062" +
    "\uffe9\063\uffe9\001\002\000\020\047\046\050\047\051\uffec" +
    "\052\uffec\055\uffec\062\uffec\063\uffec\001\002\000\014\051" +
    "\uffee\052\uffee\055\uffee\062\uffee\063\uffee\001\002\000\014" +
    "\051\044\052\ufff0\055\ufff0\062\ufff0\063\ufff0\001\002\000" +
    "\014\004\026\005\010\032\031\033\033\053\036\001\002" +
    "\000\014\051\uffef\052\uffef\055\uffef\062\uffef\063\uffef\001" +
    "\002\000\012\004\026\005\010\032\031\033\033\001\002" +
    "\000\012\004\026\005\010\032\031\033\033\001\002\000" +
    "\030\042\054\043\053\044\052\045\051\047\uffea\050\uffea" +
    "\051\uffea\052\uffea\055\uffea\062\uffea\063\uffea\001\002\000" +
    "\012\004\026\005\010\032\031\033\033\001\002\000\012" +
    "\004\026\005\010\032\031\033\033\001\002\000\012\004" +
    "\026\005\010\032\031\033\033\001\002\000\012\004\026" +
    "\005\010\032\031\033\033\001\002\000\034\035\056\036" +
    "\057\042\uffe7\043\uffe7\044\uffe7\045\uffe7\047\uffe7\050\uffe7" +
    "\051\uffe7\052\uffe7\055\uffe7\062\uffe7\063\uffe7\001\002\000" +
    "\012\004\026\005\010\032\031\033\033\001\002\000\012" +
    "\004\026\005\010\032\031\033\033\001\002\000\042\035" +
    "\uffe2\036\uffe2\037\062\040\063\041\061\042\uffe2\043\uffe2" +
    "\044\uffe2\045\uffe2\047\uffe2\050\uffe2\051\uffe2\052\uffe2\055" +
    "\uffe2\062\uffe2\063\uffe2\001\002\000\012\004\026\005\010" +
    "\032\031\033\033\001\002\000\012\004\026\005\010\032" +
    "\031\033\033\001\002\000\012\004\026\005\010\032\031" +
    "\033\033\001\002\000\042\035\uffdf\036\uffdf\037\uffdf\040" +
    "\uffdf\041\uffdf\042\uffdf\043\uffdf\044\uffdf\045\uffdf\047\uffdf" +
    "\050\uffdf\051\uffdf\052\uffdf\055\uffdf\062\uffdf\063\uffdf\001" +
    "\002\000\042\035\uffe0\036\uffe0\037\uffe0\040\uffe0\041\uffe0" +
    "\042\uffe0\043\uffe0\044\uffe0\045\uffe0\047\uffe0\050\uffe0\051" +
    "\uffe0\052\uffe0\055\uffe0\062\uffe0\063\uffe0\001\002\000\042" +
    "\035\uffde\036\uffde\037\uffde\040\uffde\041\uffde\042\uffde\043" +
    "\uffde\044\uffde\045\uffde\047\uffde\050\uffde\051\uffde\052\uffde" +
    "\055\uffde\062\uffde\063\uffde\001\002\000\042\035\uffe3\036" +
    "\uffe3\037\062\040\063\041\061\042\uffe3\043\uffe3\044\uffe3" +
    "\045\uffe3\047\uffe3\050\uffe3\051\uffe3\052\uffe3\055\uffe3\062" +
    "\uffe3\063\uffe3\001\002\000\034\035\056\036\057\042\uffe8" +
    "\043\uffe8\044\uffe8\045\uffe8\047\uffe8\050\uffe8\051\uffe8\052" +
    "\uffe8\055\uffe8\062\uffe8\063\uffe8\001\002\000\034\035\056" +
    "\036\057\042\uffe6\043\uffe6\044\uffe6\045\uffe6\047\uffe6\050" +
    "\uffe6\051\uffe6\052\uffe6\055\uffe6\062\uffe6\063\uffe6\001\002" +
    "\000\034\035\056\036\057\042\uffe5\043\uffe5\044\uffe5\045" +
    "\uffe5\047\uffe5\050\uffe5\051\uffe5\052\uffe5\055\uffe5\062\uffe5" +
    "\063\uffe5\001\002\000\030\042\054\043\053\044\052\045" +
    "\051\047\uffeb\050\uffeb\051\uffeb\052\uffeb\055\uffeb\062\uffeb" +
    "\063\uffeb\001\002\000\014\051\uffed\052\uffed\055\uffed\062" +
    "\uffed\063\uffed\001\002\000\016\004\026\005\010\032\031" +
    "\033\033\053\036\055\uffbd\001\002\000\010\052\103\055" +
    "\uffbb\062\101\001\002\000\004\055\100\001\002\000\042" +
    "\035\uffb7\036\uffb7\037\uffb7\040\uffb7\041\uffb7\042\uffb7\043" +
    "\uffb7\044\uffb7\045\uffb7\047\uffb7\050\uffb7\051\uffb7\052\uffb7" +
    "\055\uffb7\062\uffb7\063\uffb7\001\002\000\014\004\026\005" +
    "\010\032\031\033\033\053\036\001\002\000\004\055\uffbe" +
    "\001\002\000\014\004\026\005\010\032\031\033\033\053" +
    "\036\001\002\000\014\051\044\052\ufff1\055\ufff1\062\ufff1" +
    "\063\ufff1\001\002\000\010\052\103\055\uffbb\062\101\001" +
    "\002\000\004\055\uffbc\001\002\000\006\005\010\066\023" +
    "\001\002\000\004\005\010\001\002\000\004\054\112\001" +
    "\002\000\012\026\007\027\005\030\011\055\uffc4\001\002" +
    "\000\004\055\131\001\002\000\010\005\010\066\023\067" +
    "\115\001\002\000\004\005\010\001\002\000\006\055\uffc1" +
    "\062\117\001\002\000\010\026\007\027\005\030\011\001" +
    "\002\000\004\055\uffc6\001\002\000\010\005\010\066\023" +
    "\067\122\001\002\000\004\005\010\001\002\000\006\055" +
    "\uffc1\062\117\001\002\000\004\055\uffc3\001\002\000\006" +
    "\055\uffc1\062\117\001\002\000\004\055\uffc2\001\002\000" +
    "\006\055\uffc1\062\117\001\002\000\004\055\uffc5\001\002" +
    "\000\004\056\132\001\002\000\022\005\010\015\137\017" +
    "\134\020\146\026\007\027\005\030\011\057\uffcf\001\002" +
    "\000\004\063\235\001\002\000\004\054\227\001\002\000" +
    "\024\005\010\011\uffcf\015\137\017\134\020\146\026\007" +
    "\027\005\030\011\057\uffcf\001\002\000\024\005\010\011" +
    "\uffcf\015\137\017\134\020\146\026\007\027\005\030\011" +
    "\057\uffcf\001\002\000\004\054\213\001\002\000\004\063" +
    "\211\001\002\000\004\063\207\001\002\000\024\005\010" +
    "\011\uffcf\015\137\017\134\020\146\026\007\027\005\030" +
    "\011\057\uffcf\001\002\000\024\005\010\011\uffcf\015\137" +
    "\017\134\020\146\026\007\027\005\030\011\057\uffcf\001" +
    "\002\000\004\057\204\001\002\000\006\046\177\054\200" +
    "\001\002\000\004\054\152\001\002\000\004\063\150\001" +
    "\002\000\024\005\010\011\uffcf\015\137\017\134\020\146" +
    "\026\007\027\005\030\011\057\uffcf\001\002\000\006\011" +
    "\uffd5\057\uffd5\001\002\000\012\005\010\026\007\027\005" +
    "\030\011\001\002\000\004\063\167\001\002\000\006\005" +
    "\010\066\023\001\002\000\004\063\156\001\002\000\014" +
    "\004\026\005\010\032\031\033\033\053\036\001\002\000" +
    "\006\052\103\063\160\001\002\000\004\005\010\001\002" +
    "\000\004\055\162\001\002\000\004\056\163\001\002\000" +
    "\022\005\010\015\137\017\134\020\146\026\007\027\005" +
    "\030\011\057\uffcf\001\002\000\004\057\165\001\002\000" +
    "\024\005\uffcb\011\uffcb\015\uffcb\017\uffcb\020\uffcb\026\uffcb" +
    "\027\uffcb\030\uffcb\057\uffcb\001\002\000\004\046\025\001" +
    "\002\000\014\004\026\005\010\032\031\033\033\053\036" +
    "\001\002\000\006\052\103\063\171\001\002\000\004\005" +
    "\010\001\002\000\004\055\173\001\002\000\004\056\174" +
    "\001\002\000\022\005\010\015\137\017\134\020\146\026" +
    "\007\027\005\030\011\057\uffcf\001\002\000\004\057\176" +
    "\001\002\000\024\005\uffca\011\uffca\015\uffca\017\uffca\020" +
    "\uffca\026\uffca\027\uffca\030\uffca\057\uffca\001\002\000\014" +
    "\004\026\005\010\032\031\033\033\053\036\001\002\000" +
    "\016\004\026\005\010\032\031\033\033\053\036\055\uffbd" +
    "\001\002\000\004\055\202\001\002\000\004\063\uffb9\001" +
    "\002\000\010\052\103\055\uffc9\063\uffc9\001\002\000\004" +
    "\063\uffbf\001\002\000\006\011\uffd0\057\uffd0\001\002\000" +
    "\006\011\uffd1\057\uffd1\001\002\000\024\005\010\011\uffcf" +
    "\015\137\017\134\020\146\026\007\027\005\030\011\057" +
    "\uffcf\001\002\000\006\011\uffd6\057\uffd6\001\002\000\024" +
    "\005\010\011\uffcf\015\137\017\134\020\146\026\007\027" +
    "\005\030\011\057\uffcf\001\002\000\006\011\uffd4\057\uffd4" +
    "\001\002\000\014\004\026\005\010\032\031\033\033\053" +
    "\036\001\002\000\006\052\103\055\215\001\002\000\004" +
    "\056\216\001\002\000\022\005\010\015\137\017\134\020" +
    "\146\026\007\027\005\030\011\057\uffcf\001\002\000\004" +
    "\057\220\001\002\000\026\005\uffce\011\uffce\015\uffce\016" +
    "\221\017\uffce\020\uffce\026\uffce\027\uffce\030\uffce\057\uffce" +
    "\001\002\000\004\056\222\001\002\000\022\005\010\015" +
    "\137\017\134\020\146\026\007\027\005\030\011\057\uffcf" +
    "\001\002\000\004\057\224\001\002\000\024\005\uffcd\011" +
    "\uffcd\015\uffcd\017\uffcd\020\uffcd\026\uffcd\027\uffcd\030\uffcd" +
    "\057\uffcd\001\002\000\006\011\uffd3\057\uffd3\001\002\000" +
    "\006\011\uffd2\057\uffd2\001\002\000\014\004\026\005\010" +
    "\032\031\033\033\053\036\001\002\000\006\052\103\055" +
    "\231\001\002\000\004\056\232\001\002\000\022\005\010" +
    "\015\137\017\134\020\146\026\007\027\005\030\011\057" +
    "\uffcf\001\002\000\004\057\234\001\002\000\024\005\uffcc" +
    "\011\uffcc\015\uffcc\017\uffcc\020\uffcc\026\uffcc\027\uffcc\030" +
    "\uffcc\057\uffcc\001\002\000\024\005\010\011\uffcf\015\137" +
    "\017\134\020\146\026\007\027\005\030\011\057\uffcf\001" +
    "\002\000\006\011\uffd7\057\uffd7\001\002\000\004\054\240" +
    "\001\002\000\012\026\007\027\005\030\011\055\uffc4\001" +
    "\002\000\004\055\242\001\002\000\004\056\243\001\002" +
    "\000\022\005\010\011\uffcf\015\137\017\134\020\146\026" +
    "\007\027\005\030\011\001\002\000\004\011\245\001\002" +
    "\000\014\004\026\005\010\032\031\033\033\053\036\001" +
    "\002\000\004\063\247\001\002\000\004\057\250\001\002" +
    "\000\004\063\uffc0\001\002\000\006\052\103\063\uffba\001" +
    "\002\000\016\005\010\010\016\014\ufffb\026\007\027\005" +
    "\030\011\001\002\000\004\014\ufffd\001\002\000\016\005" +
    "\010\010\016\014\ufffb\026\007\027\005\030\011\001\002" +
    "\000\004\014\ufffc\001\002\000\004\056\257\001\002\000" +
    "\022\005\010\015\137\017\134\020\146\026\007\027\005" +
    "\030\011\057\ufff2\001\002\000\004\063\304\001\002\000" +
    "\004\057\303\001\002\000\022\005\010\015\137\017\134" +
    "\020\146\026\007\027\005\030\011\057\ufff2\001\002\000" +
    "\022\005\010\015\137\017\134\020\146\026\007\027\005" +
    "\030\011\057\ufff2\001\002\000\004\063\277\001\002\000" +
    "\004\063\275\001\002\000\022\005\010\015\137\017\134" +
    "\020\146\026\007\027\005\030\011\057\ufff2\001\002\000" +
    "\022\005\010\015\137\017\134\020\146\026\007\027\005" +
    "\030\011\057\ufff2\001\002\000\004\063\271\001\002\000" +
    "\022\005\010\015\137\017\134\020\146\026\007\027\005" +
    "\030\011\057\ufff2\001\002\000\004\057\ufff8\001\002\000" +
    "\004\057\ufff3\001\002\000\004\057\ufff4\001\002\000\022" +
    "\005\010\015\137\017\134\020\146\026\007\027\005\030" +
    "\011\057\ufff2\001\002\000\004\057\ufff9\001\002\000\022" +
    "\005\010\015\137\017\134\020\146\026\007\027\005\030" +
    "\011\057\ufff2\001\002\000\004\057\ufff7\001\002\000\004" +
    "\057\ufff5\001\002\000\004\057\ufff6\001\002\000\004\002" +
    "\001\001\002\000\022\005\010\015\137\017\134\020\146" +
    "\026\007\027\005\030\011\057\ufff2\001\002\000\004\057" +
    "\ufffa\001\002\000\004\002\000\001\002\000\010\026\007" +
    "\027\005\030\011\001\002\000\006\062\311\066\023\001" +
    "\002\000\004\004\312\001\002\000\004\042\313\001\002" +
    "\000\012\005\uffb4\062\uffb4\066\uffb4\067\uffb4\001\002\000" +
    "\016\005\010\010\016\014\ufffb\026\007\027\005\030\011" +
    "\001\002\000\004\014\ufffe\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\313\000\022\002\011\003\012\017\005\026\013\027" +
    "\014\030\003\032\017\036\016\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\036" +
    "\106\001\001\000\004\017\023\001\001\000\002\001\001" +
    "\000\020\003\021\017\005\026\013\027\014\030\003\032" +
    "\017\036\016\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\026\006\026\007\042\010\041\011" +
    "\040\012\037\013\036\014\034\015\033\017\027\035\031" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\022\010\073\011" +
    "\040\012\037\013\036\014\034\015\033\017\027\035\031" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\022\010\044" +
    "\011\040\012\037\013\036\014\034\015\033\017\027\035" +
    "\031\001\001\000\002\001\001\000\016\012\072\013\036" +
    "\014\034\015\033\017\027\035\031\001\001\000\016\012" +
    "\047\013\036\014\034\015\033\017\027\035\031\001\001" +
    "\000\002\001\001\000\014\013\071\014\034\015\033\017" +
    "\027\035\031\001\001\000\014\013\070\014\034\015\033" +
    "\017\027\035\031\001\001\000\014\013\067\014\034\015" +
    "\033\017\027\035\031\001\001\000\014\013\054\014\034" +
    "\015\033\017\027\035\031\001\001\000\002\001\001\000" +
    "\012\014\066\015\033\017\027\035\031\001\001\000\012" +
    "\014\057\015\033\017\027\035\031\001\001\000\002\001" +
    "\001\000\010\015\065\017\027\035\031\001\001\000\010" +
    "\015\064\017\027\035\031\001\001\000\010\015\063\017" +
    "\027\035\031\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\030\006\075\007\042\010\041\011\040\012" +
    "\037\013\036\014\034\015\033\017\027\035\031\041\076" +
    "\001\001\000\004\042\101\001\001\000\002\001\001\000" +
    "\002\001\001\000\026\006\104\007\042\010\041\011\040" +
    "\012\037\013\036\014\034\015\033\017\027\035\031\001" +
    "\001\000\002\001\001\000\024\007\103\010\041\011\040" +
    "\012\037\013\036\014\034\015\033\017\027\035\031\001" +
    "\001\000\002\001\001\000\004\042\105\001\001\000\002" +
    "\001\001\000\004\017\236\001\001\000\004\017\110\001" +
    "\001\000\002\001\001\000\006\036\113\037\112\001\001" +
    "\000\002\001\001\000\004\017\115\001\001\000\004\017" +
    "\126\001\001\000\004\040\117\001\001\000\004\036\120" +
    "\001\001\000\002\001\001\000\004\017\122\001\001\000" +
    "\004\017\124\001\001\000\004\040\123\001\001\000\002" +
    "\001\001\000\004\040\125\001\001\000\002\001\001\000" +
    "\004\040\127\001\001\000\002\001\001\000\002\001\001" +
    "\000\030\005\143\017\144\021\134\022\141\023\142\025" +
    "\135\026\146\027\140\030\132\033\137\036\016\001\001" +
    "\000\002\001\001\000\002\001\001\000\030\005\225\017" +
    "\144\021\134\022\141\023\142\025\135\026\146\027\140" +
    "\030\132\033\137\036\016\001\001\000\030\005\224\017" +
    "\144\021\134\022\141\023\142\025\135\026\146\027\140" +
    "\030\132\033\137\036\016\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\030\005\205\017\144" +
    "\021\134\022\141\023\142\025\135\026\146\027\140\030" +
    "\132\033\137\036\016\001\001\000\030\005\204\017\144" +
    "\021\134\022\141\023\142\025\135\026\146\027\140\030" +
    "\132\033\137\036\016\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\030\005" +
    "\150\017\144\021\134\022\141\023\142\025\135\026\146" +
    "\027\140\030\132\033\137\036\016\001\001\000\002\001" +
    "\001\000\012\017\005\026\154\030\152\036\153\001\001" +
    "\000\002\001\001\000\004\017\165\001\001\000\002\001" +
    "\001\000\026\006\156\007\042\010\041\011\040\012\037" +
    "\013\036\014\034\015\033\017\027\035\031\001\001\000" +
    "\002\001\001\000\006\017\005\026\160\001\001\000\002" +
    "\001\001\000\002\001\001\000\030\005\163\017\144\021" +
    "\134\022\141\023\142\025\135\026\146\027\140\030\132" +
    "\033\137\036\016\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\026\006\167\007\042\010\041" +
    "\011\040\012\037\013\036\014\034\015\033\017\027\035" +
    "\031\001\001\000\002\001\001\000\006\017\005\026\171" +
    "\001\001\000\002\001\001\000\002\001\001\000\030\005" +
    "\174\017\144\021\134\022\141\023\142\025\135\026\146" +
    "\027\140\030\132\033\137\036\016\001\001\000\002\001" +
    "\001\000\002\001\001\000\026\006\202\007\042\010\041" +
    "\011\040\012\037\013\036\014\034\015\033\017\027\035" +
    "\031\001\001\000\030\006\075\007\042\010\041\011\040" +
    "\012\037\013\036\014\034\015\033\017\027\035\031\041" +
    "\200\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\030\005\207\017\144\021\134\022\141\023\142" +
    "\025\135\026\146\027\140\030\132\033\137\036\016\001" +
    "\001\000\002\001\001\000\030\005\211\017\144\021\134" +
    "\022\141\023\142\025\135\026\146\027\140\030\132\033" +
    "\137\036\016\001\001\000\002\001\001\000\026\006\213" +
    "\007\042\010\041\011\040\012\037\013\036\014\034\015" +
    "\033\017\027\035\031\001\001\000\002\001\001\000\002" +
    "\001\001\000\030\005\216\017\144\021\134\022\141\023" +
    "\142\025\135\026\146\027\140\030\132\033\137\036\016" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\030\005\222\017\144\021\134\022\141\023\142" +
    "\025\135\026\146\027\140\030\132\033\137\036\016\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\026\006\227\007\042\010\041\011" +
    "\040\012\037\013\036\014\034\015\033\017\027\035\031" +
    "\001\001\000\002\001\001\000\002\001\001\000\030\005" +
    "\232\017\144\021\134\022\141\023\142\025\135\026\146" +
    "\027\140\030\132\033\137\036\016\001\001\000\002\001" +
    "\001\000\002\001\001\000\030\005\235\017\144\021\134" +
    "\022\141\023\142\025\135\026\146\027\140\030\132\033" +
    "\137\036\016\001\001\000\002\001\001\000\002\001\001" +
    "\000\006\036\113\037\240\001\001\000\002\001\001\000" +
    "\002\001\001\000\030\005\243\017\144\021\134\022\141" +
    "\023\142\025\135\026\146\027\140\030\132\033\137\036" +
    "\016\001\001\000\004\034\245\001\001\000\026\006\250" +
    "\007\042\010\041\011\040\012\037\013\036\014\034\015" +
    "\033\017\027\035\031\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\020\003" +
    "\252\017\005\026\013\027\014\030\003\032\017\036\016" +
    "\001\001\000\002\001\001\000\020\003\254\017\005\026" +
    "\013\027\014\030\003\032\017\036\016\001\001\000\002" +
    "\001\001\000\002\001\001\000\030\004\260\017\144\021" +
    "\262\022\265\023\266\025\261\026\267\027\264\030\257" +
    "\033\263\036\016\001\001\000\002\001\001\000\002\001" +
    "\001\000\030\004\301\017\144\021\262\022\265\023\266" +
    "\025\261\026\267\027\264\030\257\033\263\036\016\001" +
    "\001\000\030\004\300\017\144\021\262\022\265\023\266" +
    "\025\261\026\267\027\264\030\257\033\263\036\016\001" +
    "\001\000\002\001\001\000\002\001\001\000\030\004\273" +
    "\017\144\021\262\022\265\023\266\025\261\026\267\027" +
    "\264\030\257\033\263\036\016\001\001\000\030\004\272" +
    "\017\144\021\262\022\265\023\266\025\261\026\267\027" +
    "\264\030\257\033\263\036\016\001\001\000\002\001\001" +
    "\000\030\004\271\017\144\021\262\022\265\023\266\025" +
    "\261\026\267\027\264\030\257\033\263\036\016\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\030\004\275\017\144\021\262\022\265\023\266\025\261" +
    "\026\267\027\264\030\257\033\263\036\016\001\001\000" +
    "\002\001\001\000\030\004\277\017\144\021\262\022\265" +
    "\023\266\025\261\026\267\027\264\030\257\033\263\036" +
    "\016\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\030\004\304\017\144\021" +
    "\262\022\265\023\266\025\261\026\267\027\264\030\257" +
    "\033\263\036\016\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\036\307\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\020\003" +
    "\314\017\005\026\013\027\014\030\003\032\017\036\016" +
    "\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$AnalizadorSintacticoTiny$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$AnalizadorSintacticoTiny$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$AnalizadorSintacticoTiny$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 1;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}


  /** User initialization code. */
  public void user_init() throws java.lang.Exception
    {
 
   errores = new GestionErrores();
   AnalizadorLexicoTiny alex = (AnalizadorLexicoTiny)getScanner();
   alex.fijaGestionErrores(errores);

    }

  /** Scan to get the next Symbol. */
  public java_cup.runtime.Symbol scan()
    throws java.lang.Exception
    {
 return getScanner().next_token(); 
    }

 
   private GestionErrores errores;
   public void syntax_error(Symbol unidadLexica) {
     errores.errorSintactico((UnidadLexica)unidadLexica);
   }

}

/** Cup generated class to encapsulate user supplied action code.*/
class CUP$AnalizadorSintacticoTiny$actions {


   private ASExpresion as = new ASExpresion();

  private final AnalizadorSintacticoTiny parser;

  /** Constructor */
  CUP$AnalizadorSintacticoTiny$actions(AnalizadorSintacticoTiny parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$AnalizadorSintacticoTiny$do_action_part00000000(
    int                        CUP$AnalizadorSintacticoTiny$act_num,
    java_cup.runtime.lr_parser CUP$AnalizadorSintacticoTiny$parser,
    java.util.Stack            CUP$AnalizadorSintacticoTiny$stack,
    int                        CUP$AnalizadorSintacticoTiny$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$AnalizadorSintacticoTiny$result;

      /* select the action based on the action number */
      switch (CUP$AnalizadorSintacticoTiny$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // PROG_COMP ::= CABECERA MAIN LLAVEAPERTURA CUERPO_MAIN LLAVECIERRE 
            {
              ProgramaCompleto RESULT =null;
		Cabecera cab = (Cabecera)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-4)).value;
		CuerpoMain c_main = (CuerpoMain)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-1)).value;
		 RESULT = new ProgramaCompleto(cab, c_main); 
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("PROG_COMP",0, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // $START ::= PROG_COMP EOF 
            {
              Object RESULT =null;
		ProgramaCompleto start_val = (ProgramaCompleto)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-1)).value;
		RESULT = start_val;
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("$START",0, RESULT);
            }
          /* ACCEPT */
          CUP$AnalizadorSintacticoTiny$parser.done_parsing();
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // CABECERA ::= INST_DECL_FUN PUNTOCOMA CABECERA 
            {
              Cabecera RESULT =null;
		InstruccionDeclFuncion inst = (InstruccionDeclFuncion)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-2)).value;
		Cabecera cab = (Cabecera)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.peek()).value;
		 cab.addInstr(inst); RESULT = cab; 
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("CABECERA",1, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // CABECERA ::= INST_DECLASIG PUNTOCOMA CABECERA 
            {
              Cabecera RESULT =null;
		InstruccionDeclaracion inst = (InstruccionDeclaracion)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-2)).value;
		Cabecera cab = (Cabecera)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.peek()).value;
		 cab.addInstr(inst); RESULT = cab; 
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("CABECERA",1, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // CABECERA ::= INST_DECL PUNTOCOMA CABECERA 
            {
              Cabecera RESULT =null;
		InstruccionDeclaracion inst = (InstruccionDeclaracion)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-2)).value;
		Cabecera cab = (Cabecera)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.peek()).value;
		 cab.addInstr(inst); RESULT = cab; 
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("CABECERA",1, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // CABECERA ::= INST_ASIG PUNTOCOMA CABECERA 
            {
              Cabecera RESULT =null;
		InstruccionAsignacion inst = (InstruccionAsignacion)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-2)).value;
		Cabecera cab = (Cabecera)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.peek()).value;
		 cab.addInstr(inst); RESULT = cab; 
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("CABECERA",1, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // CABECERA ::= 
            {
              Cabecera RESULT =null;
		 RESULT = new Cabecera(); 
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("CABECERA",1, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // CUERPO_MAIN ::= INST_DECLASIG PUNTOCOMA CUERPO_MAIN 
            {
              CuerpoMain RESULT =null;
		InstruccionDeclaracion inst = (InstruccionDeclaracion)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-2)).value;
		CuerpoMain c_main = (CuerpoMain)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.peek()).value;
		 c_main.addInstr(inst); RESULT = c_main; 
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("CUERPO_MAIN",2, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // CUERPO_MAIN ::= INST_DECL PUNTOCOMA CUERPO_MAIN 
            {
              CuerpoMain RESULT =null;
		InstruccionDeclaracion inst = (InstruccionDeclaracion)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-2)).value;
		CuerpoMain c_main = (CuerpoMain)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.peek()).value;
		 c_main.addInstr(inst); RESULT = c_main; 
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("CUERPO_MAIN",2, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // CUERPO_MAIN ::= INST_ASIG PUNTOCOMA CUERPO_MAIN 
            {
              CuerpoMain RESULT =null;
		InstruccionAsignacion inst = (InstruccionAsignacion)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-2)).value;
		CuerpoMain c_main = (CuerpoMain)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.peek()).value;
		 c_main.addInstr(inst); RESULT = c_main; 
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("CUERPO_MAIN",2, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // CUERPO_MAIN ::= INST_CALL_PROC PUNTOCOMA CUERPO_MAIN 
            {
              CuerpoMain RESULT =null;
		InstruccionLlamadaFuncion inst = (InstruccionLlamadaFuncion)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-2)).value;
		CuerpoMain c_main = (CuerpoMain)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.peek()).value;
		 c_main.addInstr(inst); RESULT = c_main; 
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("CUERPO_MAIN",2, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // CUERPO_MAIN ::= INST_FOR CUERPO_MAIN 
            {
              CuerpoMain RESULT =null;
		InstruccionFor inst = (InstruccionFor)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-1)).value;
		CuerpoMain c_main = (CuerpoMain)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.peek()).value;
		 c_main.addInstr(inst); RESULT = c_main; 
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("CUERPO_MAIN",2, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // CUERPO_MAIN ::= INST_IF CUERPO_MAIN 
            {
              CuerpoMain RESULT =null;
		InstruccionIfElse inst = (InstruccionIfElse)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-1)).value;
		CuerpoMain c_main = (CuerpoMain)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.peek()).value;
		 c_main.addInstr(inst); RESULT = c_main; 
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("CUERPO_MAIN",2, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // CUERPO_MAIN ::= INST_IFELSE CUERPO_MAIN 
            {
              CuerpoMain RESULT =null;
		InstruccionIfElse inst = (InstruccionIfElse)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-1)).value;
		CuerpoMain c_main = (CuerpoMain)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.peek()).value;
		 c_main.addInstr(inst); RESULT = c_main; 
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("CUERPO_MAIN",2, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // CUERPO_MAIN ::= INST_WHILE CUERPO_MAIN 
            {
              CuerpoMain RESULT =null;
		InstruccionWhile inst = (InstruccionWhile)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-1)).value;
		CuerpoMain c_main = (CuerpoMain)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.peek()).value;
		 c_main.addInstr(inst); RESULT = c_main; 
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("CUERPO_MAIN",2, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // CUERPO_MAIN ::= 
            {
              CuerpoMain RESULT =null;
		 RESULT = new CuerpoMain(); 
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("CUERPO_MAIN",2, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // Exp0 ::= Exp0 OR Exp1 
            {
              Expresion RESULT =null;
		Expresion exp1 = (Expresion)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-2)).value;
		Expresion exp2 = (Expresion)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.peek()).value;
		 RESULT = as.or(exp1, exp2); 
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("Exp0",4, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // Exp0 ::= Exp1 
            {
              Expresion RESULT =null;
		Expresion exp = (Expresion)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.peek()).value;
		 RESULT = exp; 
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("Exp0",4, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // Exp1 ::= Exp1 AND Exp2 
            {
              Expresion RESULT =null;
		Expresion exp1 = (Expresion)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-2)).value;
		Expresion exp2 = (Expresion)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.peek()).value;
		 RESULT = as.and(exp1, exp2); 
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("Exp1",5, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // Exp1 ::= Exp2 
            {
              Expresion RESULT =null;
		Expresion exp = (Expresion)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.peek()).value;
		 RESULT = exp; 
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("Exp1",5, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // Exp2 ::= NOT Exp2 
            {
              Expresion RESULT =null;
		Expresion exp2 = (Expresion)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.peek()).value;
		 RESULT = as.not(exp2); 
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("Exp2",6, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // Exp2 ::= Exp3 
            {
              Expresion RESULT =null;
		Expresion exp = (Expresion)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.peek()).value;
		 RESULT = exp; 
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("Exp2",6, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // Exp3 ::= Exp3 IGUALIGUAL Exp4 
            {
              Expresion RESULT =null;
		Expresion exp1 = (Expresion)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-2)).value;
		Expresion exp2 = (Expresion)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.peek()).value;
		 RESULT = as.equals(exp1, exp2); 
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("Exp3",7, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // Exp3 ::= Exp3 NOIGUAL Exp4 
            {
              Expresion RESULT =null;
		Expresion exp1 = (Expresion)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-2)).value;
		Expresion exp2 = (Expresion)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.peek()).value;
		 RESULT = as.nequals(exp1, exp2); 
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("Exp3",7, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // Exp3 ::= Exp4 
            {
              Expresion RESULT =null;
		Expresion exp = (Expresion)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.peek()).value;
		 RESULT = exp; 
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("Exp3",7, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // Exp4 ::= Exp4 MENOR Exp5 
            {
              Expresion RESULT =null;
		Expresion exp1 = (Expresion)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-2)).value;
		Expresion exp2 = (Expresion)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.peek()).value;
		 RESULT = as.lt(exp1, exp2); 
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("Exp4",8, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // Exp4 ::= Exp4 MAYOR Exp5 
            {
              Expresion RESULT =null;
		Expresion exp1 = (Expresion)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-2)).value;
		Expresion exp2 = (Expresion)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.peek()).value;
		 RESULT = as.gt(exp1, exp2); 
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("Exp4",8, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // Exp4 ::= Exp4 MENOROIGUAL Exp5 
            {
              Expresion RESULT =null;
		Expresion exp1 = (Expresion)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-2)).value;
		Expresion exp2 = (Expresion)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.peek()).value;
		 RESULT = as.leq(exp1, exp2); 
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("Exp4",8, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // Exp4 ::= Exp4 MAYOROIGUAL Exp5 
            {
              Expresion RESULT =null;
		Expresion exp1 = (Expresion)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-2)).value;
		Expresion exp2 = (Expresion)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.peek()).value;
		 RESULT = as.geq(exp1, exp2); 
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("Exp4",8, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // Exp4 ::= Exp5 
            {
              Expresion RESULT =null;
		Expresion exp = (Expresion)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.peek()).value;
		 RESULT = exp; 
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("Exp4",8, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // Exp5 ::= Exp5 SUM Exp6 
            {
              Expresion RESULT =null;
		Expresion exp1 = (Expresion)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-2)).value;
		Expresion exp2 = (Expresion)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.peek()).value;
		 RESULT = as.suma(exp1, exp2); 
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("Exp5",9, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // Exp5 ::= Exp5 SUB Exp6 
            {
              Expresion RESULT =null;
		Expresion exp1 = (Expresion)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-2)).value;
		Expresion exp2 = (Expresion)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.peek()).value;
		 RESULT = as.resta(exp1, exp2); 
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("Exp5",9, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // Exp5 ::= Exp6 
            {
              Expresion RESULT =null;
		Expresion exp = (Expresion)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.peek()).value;
		 RESULT = exp; 
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("Exp5",9, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // Exp6 ::= Exp6 MULT Exp7 
            {
              Expresion RESULT =null;
		Expresion exp1 = (Expresion)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-2)).value;
		Expresion exp2 = (Expresion)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.peek()).value;
		 RESULT = as.mul(exp1, exp2); 
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("Exp6",10, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // Exp6 ::= Exp6 DIV Exp7 
            {
              Expresion RESULT =null;
		Expresion exp1 = (Expresion)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-2)).value;
		Expresion exp2 = (Expresion)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.peek()).value;
		 RESULT = as.div(exp1, exp2); 
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("Exp6",10, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // Exp6 ::= Exp6 MOD Exp7 
            {
              Expresion RESULT =null;
		Expresion exp1 = (Expresion)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-2)).value;
		Expresion exp2 = (Expresion)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.peek()).value;
		 RESULT = as.mod(exp1, exp2); 
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("Exp6",10, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // Exp6 ::= Exp7 
            {
              Expresion RESULT =null;
		Expresion exp = (Expresion)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.peek()).value;
		 RESULT = exp; 
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("Exp6",10, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // Exp7 ::= NUM 
            {
              Expresion RESULT =null;
		String cadenaNum = (String)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.peek()).value;
		 RESULT = as.num(cadenaNum); 
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("Exp7",11, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // Exp7 ::= TRUE 
            {
              Expresion RESULT =null;
		 RESULT = as.bool_true(); 
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("Exp7",11, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // Exp7 ::= FALSE 
            {
              Expresion RESULT =null;
		 RESULT = as.bool_false(); 
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("Exp7",11, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // Exp7 ::= Ident 
            {
              Expresion RESULT =null;
		Id id = (Id)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.peek()).value;
		 RESULT = id; 
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("Exp7",11, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // Exp7 ::= EXPR_LLAM_FUN 
            {
              Expresion RESULT =null;
		ExpresionLlamadaFuncion llam_fun = (ExpresionLlamadaFuncion)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.peek()).value;
		 RESULT = llam_fun; 
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("Exp7",11, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // CUER ::= INST_DECLASIG PUNTOCOMA CUER 
            {
              Cuerpo RESULT =null;
		InstruccionDeclaracion inst = (InstruccionDeclaracion)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-2)).value;
		Cuerpo c = (Cuerpo)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.peek()).value;
		 c.addInstr(inst); RESULT = c; 
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("CUER",3, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // CUER ::= INST_DECL PUNTOCOMA CUER 
            {
              Cuerpo RESULT =null;
		InstruccionDeclaracion inst = (InstruccionDeclaracion)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-2)).value;
		Cuerpo c = (Cuerpo)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.peek()).value;
		 c.addInstr(inst); RESULT = c; 
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("CUER",3, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // CUER ::= INST_ASIG PUNTOCOMA CUER 
            {
              Cuerpo RESULT =null;
		InstruccionAsignacion inst = (InstruccionAsignacion)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-2)).value;
		Cuerpo c = (Cuerpo)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.peek()).value;
		 c.addInstr(inst); RESULT = c; 
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("CUER",3, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // CUER ::= INST_CALL_PROC PUNTOCOMA CUER 
            {
              Cuerpo RESULT =null;
		InstruccionLlamadaFuncion inst = (InstruccionLlamadaFuncion)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-2)).value;
		Cuerpo c = (Cuerpo)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.peek()).value;
		 c.addInstr(inst); RESULT = c; 
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("CUER",3, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // CUER ::= INST_FOR CUER 
            {
              Cuerpo RESULT =null;
		InstruccionFor inst = (InstruccionFor)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-1)).value;
		Cuerpo c = (Cuerpo)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.peek()).value;
		 c.addInstr(inst); RESULT = c; 
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("CUER",3, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // CUER ::= INST_IF CUER 
            {
              Cuerpo RESULT =null;
		InstruccionIfElse inst = (InstruccionIfElse)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-1)).value;
		Cuerpo c = (Cuerpo)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.peek()).value;
		 c.addInstr(inst); RESULT = c; 
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("CUER",3, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // CUER ::= INST_IFELSE CUER 
            {
              Cuerpo RESULT =null;
		InstruccionIfElse inst = (InstruccionIfElse)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-1)).value;
		Cuerpo c = (Cuerpo)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.peek()).value;
		 c.addInstr(inst); RESULT = c; 
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("CUER",3, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // CUER ::= INST_WHILE CUER 
            {
              Cuerpo RESULT =null;
		InstruccionWhile inst = (InstruccionWhile)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-1)).value;
		Cuerpo c = (Cuerpo)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.peek()).value;
		 c.addInstr(inst); RESULT = c; 
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("CUER",3, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // CUER ::= 
            {
              Cuerpo RESULT =null;
		 RESULT = new Cuerpo(); 
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("CUER",3, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // INST_IF ::= IF PARAPERTURA Exp0 PARCIERRE LLAVEAPERTURA CUER LLAVECIERRE 
            {
              InstruccionIfElse RESULT =null;
		Expresion cond = (Expresion)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-4)).value;
		Cuerpo cif = (Cuerpo)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-1)).value;
		 RESULT = new InstruccionIfElse(cond, cif); 
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("INST_IF",15, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // INST_IFELSE ::= IF PARAPERTURA Exp0 PARCIERRE LLAVEAPERTURA CUER LLAVECIERRE ELSE LLAVEAPERTURA CUER LLAVECIERRE 
            {
              InstruccionIfElse RESULT =null;
		Expresion cond = (Expresion)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-8)).value;
		Cuerpo cif = (Cuerpo)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-5)).value;
		Cuerpo celse = (Cuerpo)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-1)).value;
		 RESULT = new InstruccionIfElse(cond, cif, celse); 
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("INST_IFELSE",16, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // INST_WHILE ::= WHILE PARAPERTURA Exp0 PARCIERRE LLAVEAPERTURA CUER LLAVECIERRE 
            {
              InstruccionWhile RESULT =null;
		Expresion cond = (Expresion)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-4)).value;
		Cuerpo cwhile = (Cuerpo)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-1)).value;
		 RESULT = new InstruccionWhile(cond, cwhile); 
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("INST_WHILE",17, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // INST_FOR ::= FOR PARAPERTURA INST_ASIG PUNTOCOMA Exp0 PUNTOCOMA INST_ASIG PARCIERRE LLAVEAPERTURA CUER LLAVECIERRE 
            {
              InstruccionFor RESULT =null;
		InstruccionAsignacion ini = (InstruccionAsignacion)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-8)).value;
		Expresion cond = (Expresion)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-6)).value;
		InstruccionAsignacion paso = (InstruccionAsignacion)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-4)).value;
		Cuerpo cfor = (Cuerpo)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-1)).value;
		 RESULT = new InstruccionFor(ini.getId(), ini.getValor(), cond, paso.getValor(), cfor); 
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("INST_FOR",19, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // INST_FOR ::= FOR PARAPERTURA INST_DECLASIG PUNTOCOMA Exp0 PUNTOCOMA INST_ASIG PARCIERRE LLAVEAPERTURA CUER LLAVECIERRE 
            {
              InstruccionFor RESULT =null;
		InstruccionDeclaracion ini = (InstruccionDeclaracion)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-8)).value;
		Expresion cond = (Expresion)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-6)).value;
		InstruccionAsignacion paso = (InstruccionAsignacion)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-4)).value;
		Cuerpo cfor = (Cuerpo)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-1)).value;
		 RESULT = new InstruccionFor(ini.getId(), ini.getValor(), cond, paso.getValor(), cfor); 
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("INST_FOR",19, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // INST_ASIG ::= Ident IGUAL Exp0 
            {
              InstruccionAsignacion RESULT =null;
		Id id = (Id)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-2)).value;
		Expresion exp = (Expresion)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.peek()).value;
		 RESULT = new InstruccionAsignacion(id, exp); 
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("INST_ASIG",20, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // INST_DECL ::= Tip Ident 
            {
              InstruccionDeclaracion RESULT =null;
		Tipo t = (Tipo)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-1)).value;
		Id id = (Id)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.peek()).value;
		 RESULT = new InstruccionDeclaracion(t,id); 
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("INST_DECL",21, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // INST_DECLASIG ::= Tip Ident IGUAL Exp0 
            {
              InstruccionDeclaracion RESULT =null;
		Tipo t = (Tipo)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-3)).value;
		Id id = (Id)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-2)).value;
		Expresion exp = (Expresion)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.peek()).value;
		 RESULT = new InstruccionDeclaracion(t,id,exp); 
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("INST_DECLASIG",22, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // ARGUMENTOS_INI ::= Tip Ident ARGUMENTOS 
            {
              ArrayDeque<Tipo_Id> RESULT =null;
		Tipo t = (Tipo)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-2)).value;
		Id id = (Id)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-1)).value;
		ArrayDeque<Tipo_Id> arg = (ArrayDeque<Tipo_Id>)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.peek()).value;
		 arg.addFirst(new Tipo_Id(t, id)); RESULT = arg; 
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("ARGUMENTOS_INI",29, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // ARGUMENTOS_INI ::= Tip AMPERSAND Ident ARGUMENTOS 
            {
              ArrayDeque<Tipo_Id> RESULT =null;
		Tipo t = (Tipo)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-3)).value;
		Id id = (Id)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-1)).value;
		ArrayDeque<Tipo_Id> arg = (ArrayDeque<Tipo_Id>)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.peek()).value;
		 arg.addFirst(new Tipo_Id(t, id)); RESULT = arg; 
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("ARGUMENTOS_INI",29, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // ARGUMENTOS_INI ::= 
            {
              ArrayDeque<Tipo_Id> RESULT =null;
		 RESULT = new ArrayDeque<Tipo_Id>(); 
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("ARGUMENTOS_INI",29, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // ARGUMENTOS ::= COMA Tip Ident ARGUMENTOS 
            {
              ArrayDeque<Tipo_Id> RESULT =null;
		Tipo t = (Tipo)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-2)).value;
		Id id = (Id)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-1)).value;
		ArrayDeque<Tipo_Id> arg = (ArrayDeque<Tipo_Id>)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.peek()).value;
		 arg.addFirst(new Tipo_Id(t, id)); RESULT = arg; 
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("ARGUMENTOS",30, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // ARGUMENTOS ::= COMA Tip AMPERSAND Ident ARGUMENTOS 
            {
              ArrayDeque<Tipo_Id> RESULT =null;
		Tipo t = (Tipo)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-3)).value;
		Id id = (Id)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-1)).value;
		ArrayDeque<Tipo_Id> arg = (ArrayDeque<Tipo_Id>)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.peek()).value;
		 arg.addFirst(new Tipo_Id(t, id)); RESULT = arg; 
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("ARGUMENTOS",30, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // ARGUMENTOS ::= 
            {
              ArrayDeque<Tipo_Id> RESULT =null;
		 RESULT = new ArrayDeque<Tipo_Id>(); 
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("ARGUMENTOS",30, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // INST_DECL_FUN ::= FUNCTION Tip Ident PARAPERTURA ARGUMENTOS_INI PARCIERRE LLAVEAPERTURA CUER INST_RETURN PUNTOCOMA LLAVECIERRE 
            {
              InstruccionDeclFuncion RESULT =null;
		Tipo tipo_dev = (Tipo)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-9)).value;
		Id id = (Id)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-8)).value;
		ArrayDeque<Tipo_Id> arg = (ArrayDeque<Tipo_Id>)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-6)).value;
		Cuerpo c = (Cuerpo)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-3)).value;
		 RESULT = new InstruccionDeclFuncion(tipo_dev, id, arg, c); 
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("INST_DECL_FUN",24, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // INST_DECL_FUN ::= FUNCTION VOID Ident PARAPERTURA ARGUMENTOS_INI PARCIERRE LLAVEAPERTURA CUER LLAVECIERRE 
            {
              InstruccionDeclFuncion RESULT =null;
		Id id = (Id)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-6)).value;
		ArrayDeque<Tipo_Id> arg = (ArrayDeque<Tipo_Id>)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-4)).value;
		Cuerpo c = (Cuerpo)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-1)).value;
		 RESULT = new InstruccionDeclFuncion(null, id, arg, c); 
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("INST_DECL_FUN",24, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // ARGUMENTOSPROC_INI ::= Exp0 ARGUMENTOSPROC 
            {
              ArrayDeque<Expresion> RESULT =null;
		Expresion e = (Expresion)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-1)).value;
		ArrayDeque<Expresion> arg = (ArrayDeque<Expresion>)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.peek()).value;
		 arg.addFirst(e); RESULT = arg; 
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("ARGUMENTOSPROC_INI",31, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // ARGUMENTOSPROC_INI ::= 
            {
              ArrayDeque<Expresion> RESULT =null;
		 RESULT = new ArrayDeque<Expresion>(); 
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("ARGUMENTOSPROC_INI",31, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // ARGUMENTOSPROC ::= COMA Exp0 ARGUMENTOSPROC 
            {
              ArrayDeque<Expresion> RESULT =null;
		Expresion e = (Expresion)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-1)).value;
		ArrayDeque<Expresion> arg = (ArrayDeque<Expresion>)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.peek()).value;
		 arg.addFirst(e); RESULT = arg; 
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("ARGUMENTOSPROC",32, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // ARGUMENTOSPROC ::= 
            {
              ArrayDeque<Expresion> RESULT =null;
		 RESULT = new ArrayDeque<Expresion>(); 
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("ARGUMENTOSPROC",32, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // INST_RETURN ::= RETURN Exp0 
            {
              InstruccionReturn RESULT =null;
		Expresion e = (Expresion)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.peek()).value;
		 RESULT = new InstruccionReturn(e); 
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("INST_RETURN",26, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // INST_CALL_PROC ::= Ident PARAPERTURA ARGUMENTOSPROC_INI PARCIERRE 
            {
              InstruccionLlamadaFuncion RESULT =null;
		Id id = (Id)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-3)).value;
		ArrayDeque<Expresion> arg = (ArrayDeque<Expresion>)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-1)).value;
		 RESULT = new InstruccionLlamadaFuncion(id, arg); 
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("INST_CALL_PROC",25, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // Ident ::= IDEN 
            {
              Id RESULT =null;
		String id = (String)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.peek()).value;
		 RESULT = new Id(id); 
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("Ident",13, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // EXPR_LLAM_FUN ::= Ident PARAPERTURA ARGUMENTOSPROC_INI PARCIERRE 
            {
              ExpresionLlamadaFuncion RESULT =null;
		Id id = (Id)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-3)).value;
		ArrayDeque<Expresion> arg = (ArrayDeque<Expresion>)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-1)).value;
		 RESULT = new ExpresionLlamadaFuncion(id, arg); 
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("EXPR_LLAM_FUN",27, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // Tip ::= INTEGER 
            {
              Tipo RESULT =null;
		 RESULT = new Tipo(Tipos.INTEGER); 
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("Tip",28, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // Tip ::= BOOLEAN 
            {
              Tipo RESULT =null;
		 RESULT = new Tipo(Tipos.BOOLEAN); 
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("Tip",28, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // Tip ::= LIST MENOR Tip COMA NUM MAYOR 
            {
              Tipo RESULT =null;
		Tipo t = (Tipo)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-3)).value;
		String n = (String)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-1)).value;
		 RESULT = new TipoLista(t, n); 
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("Tip",28, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // Tip ::= Tip ASTERISCO 
            {
              Tipo RESULT =null;
		Tipo t = (Tipo)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny$stack.elementAt(CUP$AnalizadorSintacticoTiny$top-1)).value;
		 RESULT = new TipoPuntero(t); 
              CUP$AnalizadorSintacticoTiny$result = parser.getSymbolFactory().newSymbol("Tip",28, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$AnalizadorSintacticoTiny$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$AnalizadorSintacticoTiny$do_action(
    int                        CUP$AnalizadorSintacticoTiny$act_num,
    java_cup.runtime.lr_parser CUP$AnalizadorSintacticoTiny$parser,
    java.util.Stack            CUP$AnalizadorSintacticoTiny$stack,
    int                        CUP$AnalizadorSintacticoTiny$top)
    throws java.lang.Exception
    {
              return CUP$AnalizadorSintacticoTiny$do_action_part00000000(
                               CUP$AnalizadorSintacticoTiny$act_num,
                               CUP$AnalizadorSintacticoTiny$parser,
                               CUP$AnalizadorSintacticoTiny$stack,
                               CUP$AnalizadorSintacticoTiny$top);
    }
}

